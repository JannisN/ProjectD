#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

struct Ray {
  vec3 origin;
  vec3 direction;
};

struct Sphere {
  vec3  center;
  float radius;
};

float hitSphere(const Sphere s, const Ray r) {
  vec3  oc           = r.origin - s.center;
  float a            = dot(r.direction, r.direction);
  float b            = 2.0 * dot(oc, r.direction);
  float c            = dot(oc, oc) - s.radius * s.radius;
  float discriminant = b * b - 4 * a * c;
  if(discriminant < 0.0)
  {
    return -1.0;
  }
  else
  {
    return (-b - sqrt(discriminant)) / (2.0 * a);
  }
}

void main() {
    vec4 origin4 = vec4(1, 1, -0, 1);
    //vec4 origin4 = vec4(-1, -1, -7, 1);
    vec3 origin = gl_ObjectToWorldEXT * origin4;
    Sphere sphere;
    sphere.center = origin.xyz;
    sphere.radius = 0.8;

    Ray ray;
    ray.origin    = gl_WorldRayOriginEXT;
    ray.direction = gl_WorldRayDirectionEXT;

    float tHit = -1;
    tHit = hitSphere(sphere, ray);
    if (tHit > 0) {
        reportIntersectionEXT(tHit, 0);
    }
}