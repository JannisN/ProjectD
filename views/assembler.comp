/*
glslangValidator -V ./views/assembler.comp -o ./views/assembler.spv
*/
#version 460

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout (push_constant) uniform mypc_t {
    int fromX, fromY;
    int toX, toY;
    int borderX, borderY;
    int time;
    int secondaryTime;
} mypc;

layout (set = 0, binding = 0, rgba8) uniform image2D swapchain;
layout (set = 0, binding = 1, rgba8) uniform image2D dPos0;
layout (set = 0, binding = 2, rgba8) uniform image2D dPos1;

layout (set = 0, binding = 3) uniform sampler2D oldColor0;
layout (set = 0, binding = 4) uniform sampler2D oldColor1;
layout (set = 0, binding = 5, rgba8) uniform image2D newColor0;
layout (set = 0, binding = 6, rgba8) uniform image2D newColor1;
layout (set = 0, binding = 7, rgba8) uniform image2D currentDepth;
layout (set = 0, binding = 8, rgba8) uniform image2D oldDepth;
layout (set = 0, binding = 9, rgba8) uniform image2D guessDepth;
layout (set = 0, binding = 10, rgba8) uniform image2D renderImage;
layout (set = 0, binding = 11, rgba8) uniform image2D currentNormal;
layout (set = 0, binding = 12, rgba8) uniform image2D oldNormal;


ivec4 packFloatToVec4i(const float value) {
    const vec4 bitSh = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);
    const vec4 bitMsk = vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);
    vec4 res = fract(value * bitSh);
    res -= res.xxyz * bitMsk;
    return ivec4(res);
}
float unpackFloatFromVec4i(const ivec4 value) {
    const vec4 bitSh = vec4(1.0/(256.0*256.0*256.0), 1.0/(256.0*256.0), 1.0/256.0, 1.0);
    return float(dot(value, bitSh));
}

vec4 packFloat(float f) {
    uint i = floatBitsToUint(f);
    return vec4(
        1.0 / 255.0 * (i >> 24),
        1.0 / 255.0 * ((i >> 16) & 255),
        1.0 / 255.0 * ((i >> 8) & 255),
        1.0 / 255.0 * (i & 255)
    );
}
float unpackFloat(vec4 v) {
    return uintBitsToFloat(
        uint(v.x * 255) << 24 +
        uint(v.y * 255) << 16 +
        uint(v.z * 255) << 8 +
        uint(v.w * 255)
    );
}
vec4 EncodeFloatRGBA( float v )
{
    vec4 kEncodeMul = vec4(1.0, 255.0, 65025.0, 16581375.0);
    float kEncodeBit = 1.0/255.0;
    vec4 enc = kEncodeMul * v;
    enc = fract (enc);
    enc -= enc.yzww * kEncodeBit;
    return enc;
}

float DecodeFloatRGBA( vec4 enc )
{
    vec4 kDecodeDot = vec4(1.0, 1./255.0, 1./65025.0, 1./16581375.0);   
    return dot( enc, kDecodeDot );
}
// Converts a color from linear light gamma to sRGB gamma
vec4 fromLinear(vec4 linearRGB)
{
    bvec3 cutoff = lessThan(linearRGB.rgb, vec3(0.0031308));
    vec3 higher = vec3(1.055)*pow(linearRGB.rgb, vec3(1.0/2.4)) - vec3(0.055);
    vec3 lower = linearRGB.rgb * vec3(12.92);

    return vec4(mix(higher, lower, cutoff), linearRGB.a);
}

float aaDistance2(vec3 old, vec3 l, vec3 t) {
    if (length(l - t) < 0.001) {
        return length(old - l);
    }
    float x = -dot(-l + t, old - t) / dot(-l + t, -l + t);
    //return x;
    if (x >= 0 && 1 - x >= 0) {
        return length(old - x * l - (1 - x) * t);
    } else {
        return length(old - l);
    }
}

float aaDistance(vec3 old, vec3 l, vec3 t, vec3 m) {
    if (length(l - m) < 0.01) {
        return aaDistance2(old, t, m);
    }
    if (length(t - m) < 0.01) {
        return aaDistance2(old, l, m);
    }
    if (length(l - t) < 0.01) {
        return aaDistance2(old, t, m);
    }
    vec3 lm = l - m;
    vec3 tm = t - m;
    float lmtm = dot(lm, tm);
    float lm2 = dot(lm, lm);
    float tm2 = dot(tm, tm);
    float x = dot((-old + m) / lm2, -lm - tm * dot(lm, tm) / tm2)
        / (1 - lmtm * lmtm / lm2 / tm2);
    float y = -dot(tm, -old + l * x + (1 - x) * m) / tm2;
    /*if (length(-old + m) < 0.001) {
        x = 0.0;
    }
    if (length(tm) < 0.001) {
        y = 0.0;
    }*/
    /*if (
        length(lm) < 0.01 ||
        length(tm) < 0.01 ||
        lmtm < 0.01
    ) {
            return 0.0;
    }*/
    if (x >= 0 && y >= 0) {
        return length(-old + l * x + t * y + (1 - x - y) * m);
    } else {
        return length(-old + l);
    }
}

void main() {
    int width = mypc.toX - 1;
    int height = mypc.toY - 1;

    float dp0 = DecodeFloatRGBA(imageLoad(dPos0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
    float dp1 = DecodeFloatRGBA(imageLoad(dPos1, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
    //dp0 = int(dp0 * width) / float(width);
    //dp1 = int(dp1 * height) / float(height);
    /*bool onScreen = true;
    if (dp0 < 0 || dp0 > 1 || dp1 < 0 || dp1 > 1) {
        onScreen = false;
    }*/
    vec2 oldPosTexture = vec2(dp0, dp1);
    bool outOfBounds = false;
    if (dp0 == 1.0 / 255.0 || dp0 == 254.0 / 255.0 || dp1 == 1.0 / 255.0 || dp1 == 254.0 / 255.0) {
        //outOfBounds = true;
    }
    /*if (dp0 != 0 && dp1 != 0) {
        dp0 = (dp0 - 0.25) * 2;
        dp1 = (dp1 - 0.25) * 2;
    }*/
    vec2 oldPos = vec2(
        round(width * dp0) / float(width), 
        round(height * dp1) / float(height)); 
    ivec2 oldPosInt = ivec2(round(width * dp0), round(height * dp1));


    //oldPos = vec2(gl_GlobalInvocationID.x / float(mypc.toX), gl_GlobalInvocationID.y / float(mypc.toY));
    //vec4 oldColor = texture(oldColor0, vec2(gl_GlobalInvocationID.x / 1000.0, gl_GlobalInvocationID.y / 1000.0));// + texture(oldColor1, oldPos) / 255.0;
    //vec4 oldColor = texture(oldColor0, oldPos);// + texture(oldColor1, oldPos) / 255.0;
    vec4 oldColor;
    if (oldPosTexture == vec2(0, 0)) {
        for (int i = -1; i < 2; i++) {
            for (int j = -1; j < 2; j++) {
                // noch unsicher ob besser ohne oder mit if
                //if (i != j) {
                float dp0 = DecodeFloatRGBA(imageLoad(dPos0, ivec2(int(gl_GlobalInvocationID.x + i), int(gl_GlobalInvocationID.y + j))));
                float dp1 = DecodeFloatRGBA(imageLoad(dPos1, ivec2(int(gl_GlobalInvocationID.x + i), int(gl_GlobalInvocationID.y + j))));
                if (dp0 != 0.0 && dp1 != 0.0) {
                    oldPosTexture = vec2(dp0 - i / float(mypc.toX), dp1 - j / float(mypc.toY));
                    break;
                }
                //}
            }
        }
        //oldPosTexture = vec2(gl_GlobalInvocationID.x / float(mypc.toX), gl_GlobalInvocationID.y / float(mypc.toY));
    }
    //oldColor = vec4(ivec3(255 * texture(oldColor0, oldPos).rgb) / 255.0, 1.0);// + texture(oldColor1, oldPos) / 255.0;
    //oldColor += vec4(ivec3(255 * texture(oldColor1, oldPos).rgb) / 255.0 / 255.0, 0.0);
    oldColor = texture(oldColor0, oldPosTexture);// + texture(oldColor1, oldPos) / 255.0;
    oldColor += texture(oldColor1, oldPosTexture) / 255.0;
    //oldColor = vec4(oldPos, 0.0, 1.0);
    vec4 acurate = vec4(texture(oldColor1, oldPosTexture).rgb, 1.0);

    
    vec3 oldN = imageLoad(oldNormal, oldPosInt).xyz * 2.0 - 1.0;
    vec3 currentN = imageLoad(currentNormal, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))).xyz * 2.0 - 1.0;

    float oldZ = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(oldDepth, oldPosInt)))));
    /*if (oldPos == vec2(0, 0)) {
        oldZ = 1000;
    }*/
    float currentZ = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)))))));
    float guessZ = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(guessDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)))))));

    vec2 screenCoords;
    screenCoords.x = gl_GlobalInvocationID.x / float(width) * 2.0 - 1.0;
    screenCoords.y = gl_GlobalInvocationID.y / float(height) * 2.0 - 1.0;
    vec3 camNormal = normalize(vec3(screenCoords.x * 0.5 * float(width) / float(height), screenCoords.y * -0.5, 1.0));
    vec4 normal = imageLoad(currentNormal, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))) * 2.0 - 1.0;
    // man müsste auch auf die distanz achten, da objekte weit weg viel grössere unterschiede haben im z wert
    float angleFactor = -dot(normal.xyz, camNormal);
    /*if (dot(currentN, oldN) < 0.95) {
        modDistance = 100;
    }*/
        //vec4(1 / 10.0 * tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))))))), 0.0, 0.0, 1.0)
    /*if (oldPos == vec2(0, 0)) {
        oldZ = 100.0;
    }*/
    //oldZ = currentZ;
    if (oldZ < 0.0001) {
        oldZ = 10000.0;
    }
    if (guessZ < 0.0001) {
        guessZ = 10000.0;
    }
    //if (abs(oldZ - guessZ) > 0.1) {
    ivec2 oldPosIntMoved = oldPosInt;
    float dist = 0.0;
        /*for (int i = -1; i < 2; i++) {
            for (int j = -1; j < 2; j++) {
                //if (i != j) {
                float oldZnew = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(oldDepth, oldPosInt + ivec2(i, j))))));
                vec3 oldNnew = imageLoad(oldNormal, oldPosInt + ivec2(i, j)).xyz * 2.0 - 1.0;
                float f1 = -dot((normal.xyz + oldN) / 2, camNormal);
                float f2 = -dot((normal.xyz + oldNnew) / 2, camNormal);
                if (abs(oldZnew - guessZ) < abs(oldZ - guessZ)) {
                //if (abs(oldZnew - guessZ) < 0.1) {
                    oldPosIntMoved = oldPosInt + ivec2(i, j);
                    oldZ = oldZnew;
                    oldN = oldNnew;
                    dist = (i * i + j * j) / 2.0;
                    //break;
                }
                //}
            }
        }*/
    //}
    // braucht es glaube ich nicht
    if (outOfBounds) {
        oldZ = guessZ + 100;
    }
    //oldColor = texture(oldColor0, vec2(gl_GlobalInvocationID.x / float(width), gl_GlobalInvocationID.y / float(height)));
    //vec4 newColor = vec4(fract(gl_GlobalInvocationID.x / 3000.0), fract(gl_GlobalInvocationID.y / 3000.0), 0.0, 1.0);
    //vec4 newColor = imageLoad(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
    //vec4 newColor = 0.9 * oldColor + 0.1 * imageLoad(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
    //vec4 newColor = vec4(1.0, 0.5, 1.0, 1.0);
    vec4 newColor = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
    vec4 newColorOutput = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
    //newColor = imageLoad(swapchain, ivec2(int(dp0 * mypc.toX), int(dp1 * mypc.toY)));

    /*if (dot(normal.xyz, oldN) < 0.90) {
        angleFactor = 1.0;
    }*/
    // man muss ausserdem testen ob die normalen gleich sind

    bool atBorderCurrent = false;
    bool atBorderOld = false;
    vec2 alt;
    int count;
    bool neighbourDistant = false;
    float neighbourZ = currentZ;
    ivec2 neighbour = ivec2(0, 0);
        for (int i = -1; i < 2; i++) {
            for (int j = -1; j < 2; j++) {
                if (abs(i) != abs(j)) {
                float zNew = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(i, j))))));
                vec3 nNew = imageLoad(currentNormal, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(i, j)).xyz * 2.0 - 1.0;
                if (abs(zNew - currentZ) * angleFactor >= 0.1 || dot(currentN, nNew) < 0.95) {
                    if (zNew < neighbourZ && zNew > 0.0)
                    {
                        neighbour = ivec2(i, j);
                        neighbourZ = zNew;
                    }
                    atBorderCurrent = true;
                    //break;
                }
                /*if (angleFactor > -dot(nNew, camNormal)) {
                    angleFactor = -dot(nNew, camNormal);
                }*/
                }
            }
        }

    float ndp0 = DecodeFloatRGBA(imageLoad(dPos0, neighbour + ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
    float ndp1 = DecodeFloatRGBA(imageLoad(dPos1, neighbour + ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));

    /*oldPos = vec2(
        round(width * ndp0 - neighbour.x) / float(width), 
        round(height * ndp1 - neighbour.y) / float(height)); 
    oldPosInt = ivec2(round(width * ndp0 - neighbour.x), round(height * ndp1 - neighbour.y));
    */
    //if (currentZ - neighbourZ > 0.11) {
    if (currentZ > 0.0/* && currentZ < 1000.0*/) {
        oldPosTexture = vec2(
            ndp0 - neighbour.x / float(width),
            ndp1 - neighbour.y / float(height)
        );
    }

    oldColor = texture(oldColor0, oldPosTexture);// + texture(oldColor1, oldPos) / 255.0;
    oldColor += texture(oldColor1, oldPosTexture) / 255.0;
        // glaube ich nicht mehr nötig
        /*
        float neighbourDistance = abs(oldZ - guessZ);
        for (int i = -1; i < 2; i++) {
            for (int j = -1; j < 2; j++) {
                // if darf hier nicht benutzt werden, wegen den pixeln untern rechts die rumspacken(was ist der grund?)
                //if (abs(i) != abs(j)) {
                float oldZnew = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(oldDepth, oldPosIntMoved + ivec2(i, j))))));
                vec3 oldNnew = imageLoad(oldNormal, oldPosIntMoved + ivec2(i, j)).xyz * 2.0 - 1.0;
                if (abs(oldZnew - guessZ) < neighbourDistance) {
                    neighbourDistance = abs(oldZnew - guessZ);
                }
            }
        }*/
    
    vec3 oldColorRemainder = vec3(0);//oldColor.rgb;
    // ganz komisch: aaTest muss initialisiert werden, sonst standardmässig blau, wtf?
    vec3 aaTest = vec3(0);
    //vec3 aaTest;
    bool closeEnough = false;
    //closeEnough = true;
        float d = 1.0;
    
    // evtl. für dreier intersection: aaDistance fixen und evtl. ecken mit einberechnen(sollte nicht komplizierter sein als aaDistance da immer noch 2 variablen)
    if (atBorderCurrent/* || true*/) {
        vec3 t = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(0, -1)).rgb;
        vec3 b = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(0, 1)).rgb;
        vec3 l = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(-1, 0)).rgb;
        vec3 r = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(1, 0)).rgb;
        vec3 m = newColor.rgb;
        /*
        vec3 tl = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(-2, 0)).rgb;
        vec3 tr = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(2, 0)).rgb;
        vec3 bl = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(0, -2)).rgb;
        vec3 br = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(0, 2)).rgb;
        */
        
        if (
            length(oldColor.rgb - m) < 0.05 ||
            length(oldColor.rgb - t) < 0.05 ||
            length(oldColor.rgb - b) < 0.05 ||
            length(oldColor.rgb - l) < 0.05 ||
            length(oldColor.rgb - r) < 0.05
        ) {
            d = 0.0;
        } else {
            float dn = aaDistance2(oldColor.rgb, l, m);
            aaTest.r = dn;
            if (dn < d) {
                d = dn;
            }
            dn = aaDistance2(oldColor.rgb, t, m);
            aaTest.g = dn;
            if (dn < d) {
                d = dn;
            }
            dn = aaDistance2(oldColor.rgb, r, m);
            aaTest.b = dn;
            if (dn < d) {
                d = dn;
            }
            dn = aaDistance2(oldColor.rgb, b, m);
            if (dn < d) {
                d = dn;
            }

            // oder:
            /*
            float dn = aaDistance2(oldColor.rgb, l, t);
            aaTest.r = dn;
            if (dn < d) {
                d = dn;
            }
            dn = aaDistance2(oldColor.rgb, t, r);
            aaTest.g = dn;
            if (dn < d) {
                d = dn;
            }
            dn = aaDistance2(oldColor.rgb, r, b);
            aaTest.b = dn;
            if (dn < d) {
                d = dn;
            }
            dn = aaDistance2(oldColor.rgb, b, l);
            if (dn < d) {
                d = dn;
            }
            */
        }
        if (d < 0.1) {
            closeEnough = true;
        }

        // scheint keins von denen zu nehmen
        /*
        float dn = aaDistance(oldColor.rgb, l, t, m);
        aaTest.r = dn;
        if (dn < d) {
            d = dn;
        }
        dn = aaDistance(oldColor.rgb, t, r, m);
        aaTest.g = dn;
        if (dn < d) {
            d = dn;
        }
        dn = aaDistance(oldColor.rgb, r, b, m);
        aaTest.b = dn;
        if (dn < d) {
            d = dn;
        }
        dn = aaDistance(oldColor.rgb, b, l, m);
        if (dn < d) {
            d = dn;
        }
        if (d < 0.1) {
            closeEnough = true;
        }
        */
        oldColorRemainder = vec3(d);
        if (d < -0.0001) {
            oldColorRemainder = vec3(1.0, 0.0, 0.0);
        }
        /*if (neighbourDistance * angleFactor < 0.1) {
            closeEnough = true;
        }*/
        /*if (abs(oldZ - guessZ) < 0.1) {
            closeEnough = true;
        }*/
    }
    // kann man das objekt im vordergrund nehmen, die alte position nehmen und den originalen pixel(ist ja ein nachbar) finden?
    // weissse ecke müsste auch noch verschwinden
    // auch noch zu tun: alpha wert für anzahl samples, testen ob alter pixel nicht ausserhalb vom frame war(sampler sollte auch clamp to edge/border sein)

    float r;
    if (atBorderCurrent) {
        r = 1.0;
    }
    float g;
    if (atBorderOld) {
        g = 1.0;
    }

    //closeEnough = abs(oldZ - guessZ) * angleFactor < 0.1;

    if (closeEnough) {
        //if (oldPos.x > 0.0 && oldPos.y > 0.0 && oldPos.x < 1.0 && oldPos.y < 1.0) {
            newColor.rgb = 253.0 / 256.0 * oldColor.rgb + 3.0 / 256.0 * newColor.rgb;// + texture(oldColor1, oldPos) / 255.0;
        //}
    } else {
        //newColor = vec4(1.0, 0.0, 0.0, 1.0);
    }

    //newColor = 220.0 / 256.0 * oldColor + 35.0 / 256.0 * newColor;// + texture(oldColor1, oldPos) / 255.0;
    /*if (oldPos == vec2(0, 0)) {
        newColor = vec4(1.0, 1.0, 1.0, 1.0);
        //oldZ = 100.0;
    }*/
    /*if (oldPos == vec2(0, 0)) {
        oldColor = newColor;
    }*/
    //newColor = vec4(oldPos, 0.0, 1.0);
    newColor = round(newColor * 256 * 256) / 256.0 / 256.0;
	imageStore(newColor0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), ivec4(newColor * 255) / 255.0);
    /*if (int(gl_GlobalInvocationID.x) < 100) {
	    imageStore(newColor0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), ivec4(0, 1, 0, 1));
    }*/
	//imageStore(newColor0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), ivec4(0, 1, 0, 1));
	imageStore(newColor1, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), /*round*/ivec4(fract(newColor * 255.0) * 255) / 255.0);
    // zum testen, darf keine rote/weisse linien geben
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(abs(oldZ - guessZ), 0.1 * oldZ, 0.1 * guessZ, 1.0));
    /*if (!closeEnough && atBorderCurrent) {
        //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(oldColorRemainder, 1.0));
	    imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(newColor.rgb + vec3(1.0, 0.0, 0.0), 1.0));
    } else if (atBorderCurrent) {
	    imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(0.0, 0.0, 1.0, 1.0));
    } else {
	    imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), fromLinear(newColor));
    }*/
        //vec3 save = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(0, 0)).rgb;
        //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(save, 1.0));
        //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(aaTest * 10.0, 1.0));
        // gut um zu testen ob kanten vom ball geglättet werden
        //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(oldColorRemainder * 1.0, 1.0));

	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(neighbourDistance * angleFactor * 10.0, 1.0, 1.0, 1.0));
	    imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), fromLinear(newColor));
    if (!closeEnough && atBorderCurrent) {
	    imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(1.0, 0.0, 0.0, 1.0));
    }
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(abs(oldZ - guessZ) * 10.0 * angleFactor, angleFactor, dist, 1.0));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), normal);
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), fromLinear(newColor));

        //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), fromLinear(newColorOutput));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(guessZ / 10.0, oldZ / 10.0, currentZ / 10.0, 1));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), fromLinear(texture(oldColor0, vec2(gl_GlobalInvocationID.x / float(width), gl_GlobalInvocationID.y / float(height)))));

	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), newColor));
    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(guessZ / 4.0, currentZ / 4.0, oldZ / 4.0, 1.0));
    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(1.0, 0.1 * oldZ, 0.0 * guessZ, 1.0));
	/*imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), 
        vec4(1 / 10.0 * tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))))))), 0.0, 0.0, 1.0)
    );*/
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(1.0, 1.0, 1.0, 2.0) - newColor);
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(oldPos, 0.0, 1.0));
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(fract(255 * dp0), fract(255 * dp1), 0.0, 1.0));
    //vec4 color2 = imageLoad(oldColor0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
    /*  
	imageStore(newColor0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(128.0 / 256.0, 0, 0, 1));
    vec4 testColor = texture(oldColor0, oldPos);
    if (testColor.r == 1.0 / 2.0) {
        testColor.b = 1.0;
    }
    if (testColor.r == 127.0 / 255.0) {
        testColor.g = 1.0;
    }
	imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), testColor);
    */
    
    
    //vec4 newColor = imageLoad(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(vec3(newColor), 1.0));
}