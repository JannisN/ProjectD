/*
glslangValidator -V ./views/assembler.comp -o ./views/assembler.spv
*/

/*
    Todo:
    - diese klumpen am rand wegbekommen, scheint bei der version vom pc unten kein problem zu sein
    - Aufräumen
    - dort wo nicht enough war im letzen frame bei nachbarn(auch mit ecken) sampleCount zurücksetzen
    - sample count richtig verringern während bewegung: nur bei sehr schnellen bewegungen ganz auf 1 zurücksetzen
        auch anders implementieren, so dass die geschwindigkeit eine obergrenze für anzahl samples bestimmt
    - rotationen
    - für ganz später mal: per frame aa mit der methode wo der rand vom dreieck gespeichert wird
*/

#version 460

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout (push_constant) uniform mypc_t {
    int fromX, fromY;
    int toX, toY;
    int borderX, borderY;
    int time;
    int secondaryTime;
} mypc;

layout (set = 0, binding = 0, rgba8) uniform image2D swapchain;
layout (set = 0, binding = 1, rgba8) uniform image2D dPos0;
layout (set = 0, binding = 2, rgba8) uniform image2D dPos1;

layout (set = 0, binding = 3) uniform sampler2D oldColor0;
layout (set = 0, binding = 4) uniform sampler2D oldColor1;
layout (set = 0, binding = 5, rgba8) uniform image2D newColor0;
layout (set = 0, binding = 6, rgba8) uniform image2D newColor1;
layout (set = 0, binding = 7, rgba8) uniform image2D currentDepth;
layout (set = 0, binding = 8, rgba8) uniform image2D oldDepth;
layout (set = 0, binding = 9, rgba8) uniform image2D guessDepth;
layout (set = 0, binding = 10, rgba8) uniform image2D renderImage;
layout (set = 0, binding = 11, rgba8) uniform image2D currentNormal;
layout (set = 0, binding = 12, rgba8) uniform image2D oldNormal;


ivec4 packFloatToVec4i(const float value) {
    const vec4 bitSh = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);
    const vec4 bitMsk = vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);
    vec4 res = fract(value * bitSh);
    res -= res.xxyz * bitMsk;
    return ivec4(res);
}
float unpackFloatFromVec4i(const ivec4 value) {
    const vec4 bitSh = vec4(1.0/(256.0*256.0*256.0), 1.0/(256.0*256.0), 1.0/256.0, 1.0);
    return float(dot(value, bitSh));
}

vec4 packFloat(float f) {
    uint i = floatBitsToUint(f);
    return vec4(
        1.0 / 255.0 * (i >> 24),
        1.0 / 255.0 * ((i >> 16) & 255),
        1.0 / 255.0 * ((i >> 8) & 255),
        1.0 / 255.0 * (i & 255)
    );
}
float unpackFloat(vec4 v) {
    return uintBitsToFloat(
        uint(v.x * 255) << 24 +
        uint(v.y * 255) << 16 +
        uint(v.z * 255) << 8 +
        uint(v.w * 255)
    );
}
vec4 EncodeFloatRGBA( float v )
{
    vec4 kEncodeMul = vec4(1.0, 255.0, 65025.0, 16581375.0);
    float kEncodeBit = 1.0/255.0;
    vec4 enc = kEncodeMul * v;
    enc = fract (enc);
    enc -= enc.yzww * kEncodeBit;
    return enc;
}

float DecodeFloatRGBA( vec4 enc )
{
    vec4 kDecodeDot = vec4(1.0, 1./255.0, 1./65025.0, 1./16581375.0);   
    return dot( enc, kDecodeDot );
}
// Converts a color from linear light gamma to sRGB gamma
vec4 fromLinear(vec4 linearRGB)
{
    bvec3 cutoff = lessThan(linearRGB.rgb, vec3(0.0031308));
    vec3 higher = vec3(1.055)*pow(linearRGB.rgb, vec3(1.0/2.4)) - vec3(0.055);
    vec3 lower = linearRGB.rgb * vec3(12.92);

    return vec4(mix(higher, lower, cutoff), linearRGB.a);
}

float aaDistance2(vec3 old, vec3 l, vec3 t) {
    if (length(l - t) < 0.001) {
        return length(old - l);
    }
    float x = -dot(-l + t, old - t) / dot(-l + t, -l + t);
    //return x;
    if (x >= 0 && 1 - x >= 0) {
        return length(old - x * l - (1 - x) * t);
    } else {
        return length(old - l);
    }
}

float aaDistance(vec3 old, vec3 l, vec3 t, vec3 m) {
    if (length(l - m) < 0.01) {
        return aaDistance2(old, t, m);
    }
    if (length(t - m) < 0.01) {
        return aaDistance2(old, l, m);
    }
    if (length(l - t) < 0.01) {
        return aaDistance2(old, t, m);
    }
    vec3 lm = l - m;
    vec3 tm = t - m;
    float lmtm = dot(lm, tm);
    float lm2 = dot(lm, lm);
    float tm2 = dot(tm, tm);
    float x = dot((-old + m) / lm2, -lm - tm * dot(lm, tm) / tm2)
        / (1 - lmtm * lmtm / lm2 / tm2);
    float y = -dot(tm, -old + l * x + (1 - x) * m) / tm2;
    /*if (length(-old + m) < 0.001) {
        x = 0.0;
    }
    if (length(tm) < 0.001) {
        y = 0.0;
    }*/
    /*if (
        length(lm) < 0.01 ||
        length(tm) < 0.01 ||
        lmtm < 0.01
    ) {
            return 0.0;
    }*/
    if (x >= 0 && y >= 0) {
        return length(-old + l * x + t * y + (1 - x - y) * m);
    } else {
        return length(-old + l);
    }
}

vec2 microCorrection(vec2 v, int width, int height) {
    return vec2(
        v.x - float(v.x - 1.0 / 2.0) / float(width),
        v.y - float(v.y - 1.0 / 2.0) / float(height)
        //gl_GlobalInvocationID.y / float(mypc.toY - 1) - 1 * float(gl_GlobalInvocationID.y - height / 2.0) / float(height) / float(height)
    );
}

void main() {
    int width = mypc.toX - 1;
    int height = mypc.toY - 1;

    float dp0 = DecodeFloatRGBA(imageLoad(dPos0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
    float dp1 = DecodeFloatRGBA(imageLoad(dPos1, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
    /*dp0 = min(dp0, 1.0);
    dp1 = min(dp1, 1.0);*/
    //dp0 = int(dp0 * width) / float(width);
    //dp1 = int(dp1 * height) / float(height);
    /*bool onScreen = true;
    if (dp0 < 0 || dp0 > 1 || dp1 < 0 || dp1 > 1) {
        onScreen = false;
    }*/
    vec2 oldPosTexture = vec2(dp0, dp1);
    //vec2 oldPosTexture = microCorrection(vec2(dp0, dp1), width, height);
    bool outOfBounds = false;
    if (dp0 == 1.0 / 255.0 || dp0 == 254.0 / 255.0 || dp1 == 1.0 / 255.0 || dp1 == 254.0 / 255.0) {
        //outOfBounds = true;
    }
    /*if (dp0 != 0 && dp1 != 0) {
        dp0 = (dp0 - 0.25) * 2;
        dp1 = (dp1 - 0.25) * 2;
    }*/
    vec2 oldPos = vec2(
        round(width * dp0) / float(width), 
        round(height * dp1) / float(height)); 
    ivec2 oldPosInt = ivec2(round(width * dp0), round(height * dp1));
        oldPosInt = ivec2(
            round(width * (-1.0 / 2.0 / width + dp0) / float(width - 1) * float(width)), 
            round(height * (-1.0 / 2.0 / height + dp1) / float(height - 1) * float(height)) 
            //round(height * ndp1 - neighbour.y)
        );


    //oldPos = vec2(gl_GlobalInvocationID.x / float(mypc.toX), gl_GlobalInvocationID.y / float(mypc.toY));
    //vec4 oldColor = texture(oldColor0, vec2(gl_GlobalInvocationID.x / 1000.0, gl_GlobalInvocationID.y / 1000.0));// + texture(oldColor1, oldPos) / 255.0;
    //vec4 oldColor = texture(oldColor0, oldPos);// + texture(oldColor1, oldPos) / 255.0;
    vec4 oldColor;
    vec4 normal = imageLoad(currentNormal, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))) * 2.0 - 1.0;
    vec4 newColor = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
    bool backgroundAtBorder = false;
    bool isBackground = (oldPosTexture == vec2(0, 0));
    float ctest = 0.0;
    ivec2 bgBorderFound = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    if (isBackground/* && newColor.a == 0.0*/) {
        for (int i = -1; i < 2; i++) {
            for (int j = -1; j < 2; j++) {
                // noch unsicher ob besser ohne oder mit if
                //if (abs(i) != abs(j)) {
                float dp0 = DecodeFloatRGBA(imageLoad(dPos0, ivec2(int(gl_GlobalInvocationID.x + i), int(gl_GlobalInvocationID.y + j))));
                float dp1 = DecodeFloatRGBA(imageLoad(dPos1, ivec2(int(gl_GlobalInvocationID.x + i), int(gl_GlobalInvocationID.y + j))));
                if (dp0 != 0.0 && dp1 != 0.0) {
                    bgBorderFound = ivec2(int(gl_GlobalInvocationID.x + i), int(gl_GlobalInvocationID.y + j));
                    oldPosTexture = vec2(dp0 - i / float(mypc.toX), dp1 - j / float(mypc.toY));
                    backgroundAtBorder = true;
                    break;
                }
                //}
            }
        }
        //oldPosTexture = vec2(gl_GlobalInvocationID.x / float(mypc.toX), gl_GlobalInvocationID.y / float(mypc.toY));
    }
    //newColor = imageLoad(renderImage, bgBorderFound);
    if (!backgroundAtBorder && isBackground) {
        /*oldPosTexture = vec2(
            gl_GlobalInvocationID.x / float(mypc.toX - 1) - 1 * float(gl_GlobalInvocationID.x - width / 2.0) / float(width) / float(width),
            gl_GlobalInvocationID.y / float(mypc.toY - 1) - 1 * float(gl_GlobalInvocationID.y - height / 2.0) / float(height) / float(height)
        );*/
        oldPosTexture = microCorrection(vec2(gl_GlobalInvocationID.x / float(width), gl_GlobalInvocationID.y / float(height)), width, height);
        //oldPosTexture = vec2(dp0, dp1);
        ctest = 1.0;
    }
    if (isBackground) {
    }
    //oldColor = vec4(ivec3(255 * texture(oldColor0, oldPos).rgb) / 255.0, 1.0);// + texture(oldColor1, oldPos) / 255.0;
    //oldColor += vec4(ivec3(255 * texture(oldColor1, oldPos).rgb) / 255.0 / 255.0, 0.0);
    oldColor = texture(oldColor0, oldPosTexture);// + texture(oldColor1, oldPos) / 255.0;
    oldColor += texture(oldColor1, oldPosTexture) / 255.0;
    //oldColor = vec4(oldPos, 0.0, 1.0);
    vec4 acurate = vec4(texture(oldColor1, oldPosTexture).rgb, 1.0);

    
    vec3 oldN = imageLoad(oldNormal, oldPosInt).xyz * 2.0 - 1.0;
    vec3 currentN = imageLoad(currentNormal, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))).xyz * 2.0 - 1.0;

    float oldZ = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(oldDepth, oldPosInt)))));
    /*if (oldPos == vec2(0, 0)) {
        oldZ = 1000;
    }*/
    float currentZ = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)))))));
    float guessZ = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(guessDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)))))));
    if (currentZ < 0.0001) {
        currentZ = 10000.0;
        guessZ = 10000.0;
    }

    vec2 screenCoords;
    screenCoords.x = gl_GlobalInvocationID.x / float(width) * 2.0 - 1.0;
    screenCoords.y = gl_GlobalInvocationID.y / float(height) * 2.0 - 1.0;
    vec3 camNormal = normalize(vec3(screenCoords.x * 0.5 * float(width) / float(height), screenCoords.y * -0.5, 1.0));
    // man müsste auch auf die distanz achten, da objekte weit weg viel grössere unterschiede haben im z wert
    float angleFactor = -dot(normal.xyz, camNormal);

    bool found = false;
    // noch normalen checken evtl?
    if (abs(oldZ - guessZ) * angleFactor <= 0.1) {
        found = true;
    }
    // noch nicht ganz perfekt
    if (dp0 <= 0 || dp0 > 1 || dp1 <= 0 || dp1 > 1) {
        found = false;
    }
    if (oldPosInt.x < 0 || oldPosInt.x >= width || oldPosInt.y < 0 || oldPosInt.y >= height) {
        found = false;
    }
    /*if (dot(currentN, oldN) < 0.95) {
        modDistance = 100;
    }*/
        //vec4(1 / 10.0 * tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))))))), 0.0, 0.0, 1.0)
    /*if (oldPos == vec2(0, 0)) {
        oldZ = 100.0;
    }*/
    //oldZ = currentZ;
    if (oldZ < 0.0001) {
        oldZ = 10000.0;
    }
    if (guessZ < 0.0001) {
        guessZ = 10000.0;
    }
    //if (abs(oldZ - guessZ) > 0.1) {
    ivec2 oldPosIntMoved = oldPosInt;
    float dist = 0.0;
        /*for (int i = -1; i < 2; i++) {
            for (int j = -1; j < 2; j++) {
                //if (i != j) {
                float oldZnew = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(oldDepth, oldPosInt + ivec2(i, j))))));
                vec3 oldNnew = imageLoad(oldNormal, oldPosInt + ivec2(i, j)).xyz * 2.0 - 1.0;
                float f1 = -dot((normal.xyz + oldN) / 2, camNormal);
                float f2 = -dot((normal.xyz + oldNnew) / 2, camNormal);
                if (abs(oldZnew - guessZ) < abs(oldZ - guessZ)) {
                //if (abs(oldZnew - guessZ) < 0.1) {
                    oldPosIntMoved = oldPosInt + ivec2(i, j);
                    oldZ = oldZnew;
                    oldN = oldNnew;
                    dist = (i * i + j * j) / 2.0;
                    //break;
                }
                //}
            }
        }*/
    //}
    // braucht es glaube ich nicht
    if (outOfBounds) {
        oldZ = guessZ + 100;
    }
    //oldColor = texture(oldColor0, vec2(gl_GlobalInvocationID.x / float(width), gl_GlobalInvocationID.y / float(height)));
    //vec4 newColor = vec4(fract(gl_GlobalInvocationID.x / 3000.0), fract(gl_GlobalInvocationID.y / 3000.0), 0.0, 1.0);
    //vec4 newColor = imageLoad(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
    //vec4 newColor = 0.9 * oldColor + 0.1 * imageLoad(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
    //vec4 newColor = vec4(1.0, 0.5, 1.0, 1.0);
    vec4 newColorOutput = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
    //newColor = imageLoad(swapchain, ivec2(int(dp0 * mypc.toX), int(dp1 * mypc.toY)));

    /*if (dot(normal.xyz, oldN) < 0.90) {
        angleFactor = 1.0;
    }*/
    // man muss ausserdem testen ob die normalen gleich sind


    bool atBorderCurrent = false;
    bool atBorderOld = false;
    vec2 alt;
    int count;
    bool neighbourDistant = false;
    float neighbourZ = currentZ;
    ivec2 neighbour = ivec2(0, 0);
    //bool nearBorder = false;
    bool oldFound = false;
    float secondary = 1.0;
    float primary = 1.0;

    if (abs(guessZ - oldZ) * angleFactor < 0.1) {
        oldFound = true;
    }
    bool close = false;
    bool nbFound = false;
    //if (false)
    float speed = abs(dp0 - (0.5 + gl_GlobalInvocationID.x) / float(width + 1)) + abs(dp1 - (0.5 + gl_GlobalInvocationID.y) / float(height + 1));
    if (isBackground) {
        speed = 0;
    }
        for (int i = -1; i < 2; i++) {
            for (int j = -1; j < 2; j++) {
                /*{
                    float ndp0 = DecodeFloatRGBA(imageLoad(dPos0, ivec2(i, j) + ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
                    float ndp1 = DecodeFloatRGBA(imageLoad(dPos1, ivec2(i, j) + ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
                    vec2 opt = vec2(
                        ndp0 - i / float(width),
                        ndp1 - j / float(height)
                    );
                    int sc = int(round(texture(oldColor0, opt).a * 255.0));
                    if (sc > sampleCount) {
                        sampleCount = sc;
                    }
                }*/
                if (/*true || */abs(i) != abs(j)) {
                float zNew = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(i, j))))));
                if (zNew < 0.0001) {
                    zNew = 10000.0;
                }
                vec3 nNew = imageLoad(currentNormal, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(i, j)).xyz * 2.0 - 1.0;
                if (abs(zNew - currentZ) * angleFactor >= 0.1 || dot(currentN, nNew) < 0.95) {
                    //found = true;
                    if (zNew + 0.1 < neighbourZ && zNew > 0.0 /*&& zNew + 0.1 < currentZ*/)
                    {
                        //secondary = 0.0;
                        primary = 0.0;
                        neighbour = ivec2(i, j);
                        neighbourZ = zNew;
                        nbFound = true;
                    }
                    atBorderCurrent = true;
                    close = true;
                    //break;
                }
                float dp0 = DecodeFloatRGBA(imageLoad(dPos0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(i, j)));
                float dp1 = DecodeFloatRGBA(imageLoad(dPos1, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(i, j)));
                float speedN = abs(dp0 - (0.5 + gl_GlobalInvocationID.x + i) / float(width + 1)) + abs(dp1 - (0.5 + gl_GlobalInvocationID.y + j) / float(height + 1));
                if (speedN > speed) {
                    //speed = speedN;
                }
                /*if (angleFactor > -dot(nNew, camNormal)) {
                    angleFactor = -dot(nNew, camNormal);
                }*/
                }
            }
        }
        // scheint nicht zu funktionieren, wieso nicht?
        // vlt immer noch ein problem mit aa detection? oder nicht lang genug?
        if (false && !nbFound) {

        for (int i = -3; i < 4; i++) {
            for (int j = -3; j < 4; j++) {
                if (i == 0 || j == 0) {
                float zNew = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(i, j))))));
                if (zNew < 0.0001) {
                    zNew = 10000.0;
                }
                vec3 nNew = imageLoad(currentNormal, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(i, j)).xyz * 2.0 - 1.0;
                if (abs(zNew - currentZ) * angleFactor >= 0.1 || dot(currentN, nNew) < 0.95) {
                    if (zNew < neighbourZ && zNew > 0.0 && zNew < currentZ)
                    {
                        secondary = 0.0;
                        neighbour = ivec2(i, j);
                        neighbourZ = zNew;
                    }
                    close = true;
                    //atBorderCurrent = true;
                }
                }
            }
        }
        }

    //neighbour = ivec2(0, 0);
    float ndp0 = DecodeFloatRGBA(imageLoad(dPos0, neighbour + ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
    float ndp1 = DecodeFloatRGBA(imageLoad(dPos1, neighbour + ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));

    /*oldPos = vec2(
        round(width * ndp0 - neighbour.x) / float(width), 
        round(height * ndp1 - neighbour.y) / float(height)); 
    oldPosInt = ivec2(round(width * ndp0 - neighbour.x), round(height * ndp1 - neighbour.y));
    */
    //if (currentZ - neighbourZ > 0.11) {
    // wenn nicht border
    //if (false) {
    // kann man glaube ich sehr reduzieren
    //if ((currentZ > 0.0 && currentZ < 1000.0) && neighbour != ivec2(0, 0) && !isBackground || atBorderCurrent) {
    if ((currentZ > 0.0 /*&& currentZ < 1000.0*/) && !isBackground) {
        // noch bewegung vom aktuellen pixel miteinberechnen
        oldPosTexture = vec2(
            ndp0 - neighbour.x / float(width),
            ndp1 - neighbour.y / float(height)
        );
        vec2 mc = microCorrection(vec2((gl_GlobalInvocationID.x + neighbour.x) / float(width), (gl_GlobalInvocationID.y + neighbour.y) / float(height)), width, height);
        vec2 mc2 = microCorrection(vec2((gl_GlobalInvocationID.x) / float(width), (gl_GlobalInvocationID.y) / float(height)), width, height);
        // irgendwas ist da noch falsch
        oldPosTexture = vec2(ndp0, ndp1) - (mc - mc2);
        oldPosInt = ivec2(
            round(width * (-1.0 / 2.0 / width + ndp0) / float(width - 1) * float(width) - neighbour.x), 
            round(height * (-1.0 / 2.0 / height + ndp1) / float(height - 1) * float(height) - neighbour.y) 
            //round(height * ndp1 - neighbour.y)
        );
    }

    //oldPosTexture = vec2(dp0, dp1);

    // wegen hintergrund: soll nur sample count aktualisieren, aber nicht die farbe
    oldColor = texture(oldColor0, oldPosTexture);// + texture(oldColor1, oldPos) / 255.0;
    int sampleCount = int(round(oldColor.a * 255.0));
    oldColor += texture(oldColor1, oldPosTexture) / 255.0;

    vec4 savedNormal = imageLoad(currentNormal, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
    // noch überprüfen ob die tiefen gleich sind
    vec4 savedOldNormal = imageLoad(oldNormal, oldPosInt);
    float colortest = savedOldNormal.a;
    /*for (int i = -1; i < 2; i++) {
        for (int j = -1; j < 2; j++) {
            //if (abs(i) != abs(j)) {
            vec4 savedOldNormal2 = imageLoad(oldNormal, oldPosInt + ivec2(i, j));
            if (int(round(savedOldNormal2.a * 255.0)) > sampleCount) {
                sampleCount = int(round(savedOldNormal2.a * 255.0));
            }
            //}
        }
    }*/

    float nOldZ = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(oldDepth, oldPosInt)))));
    float nGuessZ = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(guessDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)))))));
    float zDiff = 99.0;

    for (int i = -1; i < 2; i++) {
        for (int j = -1; j < 2; j++) {
            if (abs(i) != abs(j)) {
                float newOldZ = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(oldDepth, oldPosIntMoved + ivec2(i, j))))));
                if (abs(newOldZ - nGuessZ) < zDiff) {
                    zDiff = abs(newOldZ - nGuessZ);
                }
            }
        }
    }
    if (zDiff > 1.0) {
        //sampleCount = 0;
    }

    float alphaTest = imageLoad(renderImage, bgBorderFound).a;
    if (alphaTest == 0.0) {
        sampleCount = 0;
        found = false;
    }
        // glaube ich nicht mehr nötig
        
        //float neighbourDistance = abs(nOldZ - nGuessZ);
        for (int i = -1; i < 2; i++) {
            for (int j = -1; j < 2; j++) {
                // if darf hier nicht benutzt werden, wegen den pixeln untern rechts die rumspacken(was ist der grund?)
                if (abs(i) != abs(j)) {
                float oldZnew = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(oldDepth, oldPosInt + ivec2(i, j))))));
                vec3 oldNnew = imageLoad(oldNormal, oldPosInt + ivec2(i, j)).xyz * 2.0 - 1.0;
                if (abs((oldZnew - nGuessZ) * angleFactor) >= 0.1 || dot(currentN, oldNnew) < 0.95) {
                    atBorderOld = true;
                    break;
                }
                }
                /*if (abs(oldZnew - nGuessZ) < neighbourDistance) {
                    neighbourDistance = abs(oldZnew - nGuessZ);
                }*/
            }
        }
    
    vec3 oldColorRemainder = vec3(0);//oldColor.rgb;
    // ganz komisch: aaTest muss initialisiert werden, sonst standardmässig blau, wtf?
    vec3 aaTest = vec3(0);
    //vec3 aaTest;
    bool closeEnough = false;
    //closeEnough = true;
        float d = 1.0;
    
    // evtl. für dreier intersection: aaDistance fixen und evtl. ecken mit einberechnen(sollte nicht komplizierter sein als aaDistance da immer noch 2 variablen)
        vec3 t = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(0, -1)).rgb;
        vec3 b = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(0, 1)).rgb;
        vec3 l = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(-1, 0)).rgb;
        vec3 r = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(1, 0)).rgb;
    if (atBorderCurrent/* || true*/) {
        // funktioniert besser mit 2 als 1
        // oder l, t etc. statt l, m für 2?
        // aber trotzdem noch 1 testen!
        /*vec3 t = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(0, -1)).rgb;
        vec3 b = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(0, 1)).rgb;
        vec3 l = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(-1, 0)).rgb;
        vec3 r = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(1, 0)).rgb;*/
        vec3 m = newColor.rgb;
        
        /*vec3 tl = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(-1, -1)).rgb;
        vec3 tr = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(1, -1)).rgb;
        vec3 bl = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(-1, 1)).rgb;
        vec3 br = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(1, 1)).rgb;*/
        
        
        if (
            length(oldColor.rgb - m) < 0.05 ||
            length(oldColor.rgb - t) < 0.05 ||
            length(oldColor.rgb - b) < 0.05 ||
            length(oldColor.rgb - l) < 0.05 ||
            length(oldColor.rgb - r) < 0.05
        ) {
            d = 0.0;
        } else {
            float dn = aaDistance2(oldColor.rgb, l, m);
            aaTest.r = dn;
            if (dn < d) {
                d = dn;
            }
            dn = aaDistance2(oldColor.rgb, t, m);
            aaTest.g = dn;
            if (dn < d) {
                d = dn;
            }
            dn = aaDistance2(oldColor.rgb, r, m);
            aaTest.b = dn;
            if (dn < d) {
                d = dn;
            }
            dn = aaDistance2(oldColor.rgb, b, m);
            if (dn < d) {
                d = dn;
            }
            if (true || d >= 0.1) {
                /*vec3 t = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(0, -1)).rgb;
                vec3 b = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(0, 1)).rgb;
                vec3 l = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(-1, 0)).rgb;
                vec3 r = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(1, 0)).rgb;
                float dn = aaDistance2(oldColor.rgb, l, r);
                aaTest.r = dn;
                if (dn < d) {
                    d = dn;
                }
                dn = aaDistance2(oldColor.rgb, t, b);
                aaTest.g = dn;
                if (dn < d) {
                    d = dn;
                }*/
                /*vec3 tl = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(-1, -1)).rgb;
                vec3 tr = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(1, -1)).rgb;
                vec3 bl = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(-1, 1)).rgb;
                vec3 br = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(1, 1)).rgb;
                float dn = aaDistance2(oldColor.rgb, tl, m);
                if (dn < d) {
                    d = dn;
                }
                dn = aaDistance2(oldColor.rgb, tr, m);
                if (dn < d) {
                    d = dn;
                }
                dn = aaDistance2(oldColor.rgb, bl, m);
                if (dn < d) {
                    d = dn;
                }
                dn = aaDistance2(oldColor.rgb, br, m);
                if (dn < d) {
                    d = dn;
                }*/
                /*dn = aaDistance2(oldColor.rgb, tl, br);
                if (dn < d) {
                    d = dn;
                }
                dn = aaDistance2(oldColor.rgb, tr, bl);
                if (dn < d) {
                    d = dn;
                }*/
                /*
                vec3 t = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(0, -1)).rgb;
                vec3 b = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(0, 1)).rgb;
                vec3 l = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(-1, 0)).rgb;
                vec3 r = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(1, 0)).rgb;
                float dn = aaDistance2(oldColor.rgb, l, m);
                if (dn < d) {
                    d = dn;
                }
                dn = aaDistance2(oldColor.rgb, t, m);
                if (dn < d) {
                    d = dn;
                }
                dn = aaDistance2(oldColor.rgb, r, m);
                if (dn < d) {
                    d = dn;
                }
                dn = aaDistance2(oldColor.rgb, b, m);
                if (dn < d) {
                    d = dn;
                }
                */
            }
            /*
            float dn = aaDistance2(oldColor.rgb, l, r);
            aaTest.r = dn;
            if (dn < d) {
                d = dn;
            }
            dn = aaDistance2(oldColor.rgb, t, b);
            aaTest.g = dn;
            if (dn < d) {
                d = dn;
            }
            dn = aaDistance2(oldColor.rgb, tl, br);
            aaTest.b = dn;
            if (dn < d) {
                d = dn;
            }
            dn = aaDistance2(oldColor.rgb, tr, bl);
            if (dn < d) {
                d = dn;
            }
            */

            // oder:
            /*
            float dn = aaDistance2(oldColor.rgb, l, t);
            aaTest.r = dn;
            if (dn < d) {
                d = dn;
            }
            dn = aaDistance2(oldColor.rgb, t, r);
            aaTest.g = dn;
            if (dn < d) {
                d = dn;
            }
            dn = aaDistance2(oldColor.rgb, r, b);
            aaTest.b = dn;
            if (dn < d) {
                d = dn;
            }
            dn = aaDistance2(oldColor.rgb, b, l);
            if (dn < d) {
                d = dn;
            }
            */
        }
        // war vorher d < 0.1, behebt dass randproblem für nicht hintergrund
        // überprüfung sollte aber besser werden
        // kann man vlt auch auf 0.2 setzten
        if (d < 0.02) {
            closeEnough = true;
        }

        // scheint keins von denen zu nehmen
        /*
        float dn = aaDistance(oldColor.rgb, l, t, m);
        aaTest.r = dn;
        if (dn < d) {
            d = dn;
        }
        dn = aaDistance(oldColor.rgb, t, r, m);
        aaTest.g = dn;
        if (dn < d) {
            d = dn;
        }
        dn = aaDistance(oldColor.rgb, r, b, m);
        aaTest.b = dn;
        if (dn < d) {
            d = dn;
        }
        dn = aaDistance(oldColor.rgb, b, l, m);
        if (dn < d) {
            d = dn;
        }
        if (d < 0.1) {
            closeEnough = true;
        }
        */
        oldColorRemainder = vec3(d);
        if (d < -0.0001) {
            oldColorRemainder = vec3(1.0, 0.0, 0.0);
        }
        /*if (neighbourDistance * angleFactor < 0.1) {
            closeEnough = true;
        }*/
        /*if (abs(oldZ - guessZ) < 0.1) {
            closeEnough = true;
        }*/
    }
    if (isBackground && !backgroundAtBorder) {
        //closeEnough = true;
    }
    // kann man das objekt im vordergrund nehmen, die alte position nehmen und den originalen pixel(ist ja ein nachbar) finden?
    // weissse ecke müsste auch noch verschwinden
    // auch noch zu tun: alpha wert für anzahl samples, testen ob alter pixel nicht ausserhalb vom frame war(sampler sollte auch clamp to edge/border sein)

    /*float r;
    if (atBorderCurrent) {
        r = 1.0;
    }
    float g;
    if (atBorderOld) {
        g = 1.0;
    }*/

    //closeEnough = abs(oldZ - guessZ) * angleFactor < 0.1;

    // gibt noch probleme mit dem hintergrund
    // found funktioniert noch nicht so gut am rand, aber scheint egal zu sein?
    const bool adapted = true;//true;
    bool fresh = false;
    if (sampleCount == 0) {
        fresh = true;
        sampleCount++;
    }
    sampleCount++;
    float newCount;
    newCount = float(sampleCount) / 255.0;
    // ist closeEnough linie nicht dick genug?
    // scheint als müsste man den punkt mit höchsten alpha wert suchen
    float aaFound = 0.0;
    float red = 0.0;
    if (atBorderCurrent) {
        red = 1.0;
    }
    if (atBorderCurrent && !closeEnough) {
        aaFound = 1.0;
    }
    vec4 renderColor = newColor;
    // bei erscheinen von rand: wieso sampleCount so hoch?
    if (closeEnough/* || true*/) {
        //aaFound = 1.0;
        if (adapted) {
            /*if (!atBorderOld) {
                sampleCount = 255;
            }*/
            //newColor.rgb = 253.0 / 256.0 * oldColor.rgb + 3.0 / 256.0 * newColor.rgb;// + texture(oldColor1, oldPos) / 255.0;
            /*if (fresh) {
                sampleCount++;
            }*/

            // mit den werten kann man noch rumspielen
            // oldpostexture verwenden anstatt dp, wegen nachbarn
            // noch änderung von z miteinberechnen
            //float moveSamples = abs(dp0 - (0.5 + gl_GlobalInvocationID.x) / float(width + 1)) + abs(dp1 - (0.5 + gl_GlobalInvocationID.y) / float(height + 1));
            float moveSamples = speed;
            float reduced = sampleCount * max(0.0, 1.0 - moveSamples * 100);
            if (true || moveSamples > 0.0001) {
                //newColor.rgb = (r + l + t + b + newColor.rgb) / 5.0;
                /*
                vec4 oldColorAverage = texture(oldColor0, oldPosTexture + vec2(0.0, 0.5 / float(height)));
                oldColorAverage += texture(oldColor0, oldPosTexture + vec2(0.0, -0.5 / float(height)));
                oldColorAverage += texture(oldColor0, oldPosTexture + vec2(0.5 / float(width), 0.0));
                oldColorAverage += texture(oldColor0, oldPosTexture + vec2(-0.5 / float(width), 0.0));
                oldColor = (oldColor + oldColorAverage) / 5.0;
                */
                //oldColor += texture(oldColor1, oldPosTexture) / 255.0;

            }
            //if (!isBackground)
                //sampleCount = int(round(reduced + min(sampleCount - reduced, max(0, 8 - reduced))));
            if (true || atBorderCurrent) {
            if (sampleCount >= 256.0 / 3.0) {
                newColor.rgb = 253.0 / 256.0 * oldColor.rgb + 3.0 / 256.0 * newColor.rgb;// + texture(oldColor1, oldPos) / 255.0;
            } else {
                float f = 1.0 / float(sampleCount);
                newColor.rgb = (1.0 - f) * oldColor.rgb + f * newColor.rgb;// + texture(oldColor1, oldPos) / 255.0;
                //newCount = float(sampleCount) / 255.0;
            }
            } else {
                //newCount *= 1.1;
            }
            //renderColor.rgb = (r + l + t + b + 4.0 * newColor.rgb) / 8.0;
            //renderColor = oldColorAverage / 4.0;
            /*if (atBorderCurrent) {
                renderColor = newColor;
            }*/
            newCount = float(sampleCount) / 255.0;
            //newCount = 0.5;
        } else {
            // idee: mehr average speichern, aber nur am rand rendern!
            // andere idee: je mehr bewegung desto weniger samples
            newColor.rgb = 253.0 / 256.0 * oldColor.rgb + 3.0 / 256.0 * newColor.rgb;// + texture(oldColor1, oldPos) / 255.0;
            if (atBorderCurrent) {
                renderColor.rgb = newColor.rgb;
            }
        }
        //newCount = 1.0;
    } else {
        //newColor = vec4(1.0, 0.0, 0.0, 1.0);
        // und auch zurücksetzen falls alter pixel nicht gefunden, falls kein border
        if (!atBorderCurrent && !atBorderOld) {
            newCount = 1.0;

        } else {
            newCount = 0.0;
        }
        newCount = 0.0;
        /*if (atBorderCurrent && atBorderOld) {
            //newCount = 1.0 / 255.0;
            if (fresh) {
                sampleCount++;
            }
            newCount = float(sampleCount) / 255.0;
            //newCount = 1.0;
            //newCount = 0.0;
            aaFound = 0.0;
            newCount = 0.0;
        } else {
            newCount = 0.0;
            //aaFound = 1.0;
            if (!found) {
                newCount = 1.0 / 255.0;
            } else {
                newCount = 1.0;
            }
            //if (!oldFound)
                //newCount = 0.0;
            //newCount = 1.0;
            
        }*/
    }
    if (atBorderCurrent) {
        //newCount = 1.0;
    }

    if (!closeEnough && atBorderCurrent) {
        newColor.rgb = (r + l + t + b + newColor.rgb) / 5.0;
    }
    //newColor.rgb = 253.0 / 256.0 * oldColor.rgb + 3.0 / 256.0 * newColor.rgb;// + texture(oldColor1, oldPos) / 255.0;
	imageStore(currentNormal, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(savedNormal.rgb, newCount));

    //newColor = 220.0 / 256.0 * oldColor + 35.0 / 256.0 * newColor;// + texture(oldColor1, oldPos) / 255.0;
    /*if (oldPos == vec2(0, 0)) {
        newColor = vec4(1.0, 1.0, 1.0, 1.0);
        //oldZ = 100.0;
    }*/
    /*if (oldPos == vec2(0, 0)) {
        oldColor = newColor;
    }*/
    //newColor = vec4(oldPos, 0.0, 1.0);
    newColor = round(newColor * 256 * 256) / 256.0 / 256.0;
	imageStore(newColor0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(ivec3(newColor * 255) / 255.0, newCount));
    /*if (int(gl_GlobalInvocationID.x) < 100) {
	    imageStore(newColor0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), ivec4(0, 1, 0, 1));
    }*/
	//imageStore(newColor0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), ivec4(0, 1, 0, 1));
	imageStore(newColor1, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), /*round*/vec4(ivec3(fract(newColor * 255.0) * 255) / 255.0, 0.0));
    // zum testen, darf keine rote/weisse linien geben
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(abs(oldZ - guessZ), 0.1 * oldZ, 0.1 * guessZ, 1.0));
    /*if (!closeEnough && atBorderCurrent) {
        //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(oldColorRemainder, 1.0));
	    imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(newColor.rgb + vec3(1.0, 0.0, 0.0), 1.0));
    } else if (atBorderCurrent) {
	    imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(0.0, 0.0, 1.0, 1.0));
    } else {
	    imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), fromLinear(newColor));
    }*/
        //vec3 save = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)) + ivec2(0, 0)).rgb;
        //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(save, 1.0));
        //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(aaTest * 10.0, 1.0));
        // gut um zu testen ob kanten vom ball geglättet werden
        //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(oldColorRemainder * 1.0, 1.0));

	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(neighbourDistance * angleFactor * 10.0, 1.0, 1.0, 1.0));
	    imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), fromLinear(newColor));
    if (true || atBorderCurrent) {
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(0.0, 1.0, 0.0, 1.0));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(newCount * (1.0 - secondary), red, newCount, 1.0));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(speed * 10, red, newCount, 1.0));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(secondary, primary, 0, 1.0));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(red, aaFound, 1.0, 1.0));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(aaFound));
    }
    if (!closeEnough) {
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(0.0, 0.0, 1.0, 1.0));
    }
    if (!closeEnough && atBorderCurrent) {
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(1.0, 0.0, 0.0, 1.0));
    }
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(vec3(d * 10), 1.0));
        /*
        r = 0.0;
        if (atBorderCurrent) {
            r = 1.0;
        }
	    imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(abs(dp0 - gl_GlobalInvocationID.x / float(width)) * 50.0, abs(dp1 - gl_GlobalInvocationID.y / float(height)) * 50.0, 0.0, 1.0));
        */

	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(d, red, 0.0, 1.0));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(vec3(d - red), 1.0));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(alphaTest));
        // hintergrund sollte richtiges currentZ haben
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(currentZ / 10.0, 1.0, 1.0, 1.0));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(currentN, 1.0));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(abs(oldZ - guessZ) * 10.0 * angleFactor, angleFactor, dist, 1.0));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), normal);
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), fromLinear(newColor));

        //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), fromLinear(newColorOutput));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(guessZ / 10.0, oldZ / 10.0, currentZ / 10.0, 1));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), fromLinear(texture(oldColor0, vec2(gl_GlobalInvocationID.x / float(width), gl_GlobalInvocationID.y / float(height)))));

	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), newColor));
    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(guessZ / 4.0, currentZ / 4.0, oldZ / 4.0, 1.0));
    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(1.0, 0.1 * oldZ, 0.0 * guessZ, 1.0));
	/*imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), 
        vec4(1 / 10.0 * tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))))))), 0.0, 0.0, 1.0)
    );*/
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(1.0, 1.0, 1.0, 2.0) - newColor);
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(oldPos, 0.0, 1.0));
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(fract(255 * dp0), fract(255 * dp1), 0.0, 1.0));
    //vec4 color2 = imageLoad(oldColor0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
    /*  
	imageStore(newColor0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(128.0 / 256.0, 0, 0, 1));
    vec4 testColor = texture(oldColor0, oldPos);
    if (testColor.r == 1.0 / 2.0) {
        testColor.b = 1.0;
    }
    if (testColor.r == 127.0 / 255.0) {
        testColor.g = 1.0;
    }
	imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), testColor);
    */
    
    
    //vec4 newColor = imageLoad(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(vec3(newColor), 1.0));
}