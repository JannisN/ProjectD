/*
glslangValidator -V ./views/assembler.comp -o ./views/assembler.spv
*/
#version 460

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout (push_constant) uniform mypc_t {
    int fromX, fromY;
    int toX, toY;
    int borderX, borderY;
    int time;
    int secondaryTime;
} mypc;

layout (set = 0, binding = 0, rgba8) uniform image2D swapchain;
layout (set = 0, binding = 1, rgba8) uniform image2D dPos0;
layout (set = 0, binding = 2, rgba8) uniform image2D dPos1;

layout (set = 0, binding = 3) uniform sampler2D oldColor0;
layout (set = 0, binding = 4) uniform sampler2D oldColor1;
layout (set = 0, binding = 5, rgba8) uniform image2D newColor0;
layout (set = 0, binding = 6, rgba8) uniform image2D newColor1;
layout (set = 0, binding = 7, rgba8) uniform image2D currentDepth;
layout (set = 0, binding = 8, rgba8) uniform image2D oldDepth;
layout (set = 0, binding = 9, rgba8) uniform image2D guessDepth;
layout (set = 0, binding = 10, rgba8) uniform image2D renderImage;


ivec4 packFloatToVec4i(const float value) {
    const vec4 bitSh = vec4(256.0*256.0*256.0, 256.0*256.0, 256.0, 1.0);
    const vec4 bitMsk = vec4(0.0, 1.0/256.0, 1.0/256.0, 1.0/256.0);
    vec4 res = fract(value * bitSh);
    res -= res.xxyz * bitMsk;
    return ivec4(res);
}
float unpackFloatFromVec4i(const ivec4 value) {
    const vec4 bitSh = vec4(1.0/(256.0*256.0*256.0), 1.0/(256.0*256.0), 1.0/256.0, 1.0);
    return float(dot(value, bitSh));
}

vec4 packFloat(float f) {
    uint i = floatBitsToUint(f);
    return vec4(
        1.0 / 255.0 * (i >> 24),
        1.0 / 255.0 * ((i >> 16) & 255),
        1.0 / 255.0 * ((i >> 8) & 255),
        1.0 / 255.0 * (i & 255)
    );
}
float unpackFloat(vec4 v) {
    return uintBitsToFloat(
        uint(v.x * 255) << 24 +
        uint(v.y * 255) << 16 +
        uint(v.z * 255) << 8 +
        uint(v.w * 255)
    );
}
vec4 EncodeFloatRGBA( float v )
{
    vec4 kEncodeMul = vec4(1.0, 255.0, 65025.0, 16581375.0);
    float kEncodeBit = 1.0/255.0;
    vec4 enc = kEncodeMul * v;
    enc = fract (enc);
    enc -= enc.yzww * kEncodeBit;
    return enc;
}

float DecodeFloatRGBA( vec4 enc )
{
    vec4 kDecodeDot = vec4(1.0, 1./255.0, 1./65025.0, 1./16581375.0);   
    return dot( enc, kDecodeDot );
}
// Converts a color from linear light gamma to sRGB gamma
vec4 fromLinear(vec4 linearRGB)
{
    bvec3 cutoff = lessThan(linearRGB.rgb, vec3(0.0031308));
    vec3 higher = vec3(1.055)*pow(linearRGB.rgb, vec3(1.0/2.4)) - vec3(0.055);
    vec3 lower = linearRGB.rgb * vec3(12.92);

    return vec4(mix(higher, lower, cutoff), linearRGB.a);
}

void main() {
    float dp0 = DecodeFloatRGBA(imageLoad(dPos0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
    float dp1 = DecodeFloatRGBA(imageLoad(dPos1, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
    /*bool onScreen = true;
    if (dp0 < 0 || dp0 > 1 || dp1 < 0 || dp1 > 1) {
        onScreen = false;
    }*/
    vec2 oldPosTexture = vec2(dp0, dp1);
    bool outOfBounds = false;
    if (dp0 == 1.0 / 255.0 || dp0 == 254.0 / 255.0 || dp1 == 1.0 / 255.0 || dp1 == 254.0 / 255.0) {
        //outOfBounds = true;
    }
    /*if (dp0 != 0 && dp1 != 0) {
        dp0 = (dp0 - 0.25) * 2;
        dp1 = (dp1 - 0.25) * 2;
    }*/
    int width = mypc.toX - 1;
    int height = mypc.toY - 1;
    vec2 oldPos = vec2(
        round(width * dp0) / float(width), 
        round(height * dp1) / float(height)); 
    ivec2 oldPosInt = ivec2(round(width * dp0), round(height * dp1));

    //oldPos = vec2(gl_GlobalInvocationID.x / float(mypc.toX), gl_GlobalInvocationID.y / float(mypc.toY));
    //vec4 oldColor = texture(oldColor0, vec2(gl_GlobalInvocationID.x / 1000.0, gl_GlobalInvocationID.y / 1000.0));// + texture(oldColor1, oldPos) / 255.0;
    //vec4 oldColor = texture(oldColor0, oldPos);// + texture(oldColor1, oldPos) / 255.0;
    vec4 oldColor;
    if (oldPosTexture == vec2(0, 0)) {
        for (int i = -1; i < 2; i++) {
            for (int j = -1; j < 2; j++) {
                float dp0 = DecodeFloatRGBA(imageLoad(dPos0, ivec2(int(gl_GlobalInvocationID.x + i), int(gl_GlobalInvocationID.y + j))));
                float dp1 = DecodeFloatRGBA(imageLoad(dPos1, ivec2(int(gl_GlobalInvocationID.x + i), int(gl_GlobalInvocationID.y + j))));
                if (dp0 != 0.0 && dp1 != 0.0) {
                    oldPosTexture = vec2(dp0 - i / float(mypc.toX), dp1 - j / float(mypc.toY));
                    break;
                }
            }
        }
        //oldPosTexture = vec2(gl_GlobalInvocationID.x / float(mypc.toX), gl_GlobalInvocationID.y / float(mypc.toY));
    }
    //oldColor = vec4(ivec3(255 * texture(oldColor0, oldPos).rgb) / 255.0, 1.0);// + texture(oldColor1, oldPos) / 255.0;
    //oldColor += vec4(ivec3(255 * texture(oldColor1, oldPos).rgb) / 255.0 / 255.0, 0.0);
    oldColor = texture(oldColor0, oldPosTexture);// + texture(oldColor1, oldPos) / 255.0;
    oldColor += texture(oldColor1, oldPosTexture) / 255.0;
    //oldColor = vec4(oldPos, 0.0, 1.0);
    vec4 acurate = vec4(texture(oldColor1, oldPosTexture).rgb, 1.0);

    
    float oldZ = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(oldDepth, oldPosInt)))));
    /*if (oldPos == vec2(0, 0)) {
        oldZ = 1000;
    }*/
    float currentZ = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)))))));
    float guessZ = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(guessDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)))))));
        //vec4(1 / 10.0 * tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))))))), 0.0, 0.0, 1.0)
    /*if (oldPos == vec2(0, 0)) {
        oldZ = 100.0;
    }*/
    //oldZ = currentZ;
    if (oldZ < 0.0001) {
        oldZ = 10000.0;
    }
    if (guessZ < 0.0001) {
        guessZ = 10000.0;
    }
    //if (abs(oldZ - guessZ) > 0.1) {
        for (int i = -1; i < 2; i++) {
            for (int j = -1; j < 2; j++) {
                float oldZnew = tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(oldDepth, oldPosInt + ivec2(i, j))))));
                if (abs(oldZnew - guessZ) < abs(oldZ - guessZ)) {
                //if (abs(oldZnew - guessZ) < 0.1) {
                    oldZ = oldZnew;
                    //break;
                }
            }
        }
    //}
    // braucht es glaube ich nicht
    if (outOfBounds) {
        oldZ = guessZ + 100;
    }
    //oldColor = texture(oldColor0, vec2(gl_GlobalInvocationID.x / float(width), gl_GlobalInvocationID.y / float(height)));
    //vec4 newColor = vec4(fract(gl_GlobalInvocationID.x / 3000.0), fract(gl_GlobalInvocationID.y / 3000.0), 0.0, 1.0);
    //vec4 newColor = imageLoad(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
    //vec4 newColor = 0.9 * oldColor + 0.1 * imageLoad(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
    //vec4 newColor = vec4(1.0, 0.5, 1.0, 1.0);
    vec4 newColor = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
    vec4 newColorOutput = imageLoad(renderImage, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
    //newColor = imageLoad(swapchain, ivec2(int(dp0 * mypc.toX), int(dp1 * mypc.toY)));

    if (abs(oldZ - guessZ) < 0.1) {
        //if (oldPos.x > 0.0 && oldPos.y > 0.0 && oldPos.x < 1.0 && oldPos.y < 1.0) {
            newColor = 250.0 / 256.0 * oldColor + 6.0 / 256.0 * newColor;// + texture(oldColor1, oldPos) / 255.0;
        //}
    }

    //newColor = 220.0 / 256.0 * oldColor + 35.0 / 256.0 * newColor;// + texture(oldColor1, oldPos) / 255.0;
    /*if (oldPos == vec2(0, 0)) {
        newColor = vec4(1.0, 1.0, 1.0, 1.0);
        //oldZ = 100.0;
    }*/
    /*if (oldPos == vec2(0, 0)) {
        oldColor = newColor;
    }*/
    //newColor = vec4(oldPos, 0.0, 1.0);
    newColor = round(newColor * 256 * 256) / 256.0 / 256.0;
	imageStore(newColor0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), ivec4(newColor * 255) / 255.0);
    /*if (int(gl_GlobalInvocationID.x) < 100) {
	    imageStore(newColor0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), ivec4(0, 1, 0, 1));
    }*/
	//imageStore(newColor0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), ivec4(0, 1, 0, 1));
	imageStore(newColor1, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), /*round*/ivec4(fract(newColor * 255.0) * 255) / 255.0);
    // zum testen, darf keine rote/weisse linien geben
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(abs(oldZ - guessZ), 0.1 * oldZ, 0.1 * guessZ, 1.0));
    if (abs(oldZ - guessZ) > 0.1) {
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(1.0, 0, 0, 1.0));
        // abs ist kaputt???
	
        imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(abs(oldZ - guessZ) * 4, currentZ / 4.0, oldZ / 4.0, 1.0));
    

    } else {
	    imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), fromLinear(newColor));
    }
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), fromLinear(newColorOutput));
	    imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), ivec4(dp0, dp1, currentZ / 4.0, 1));
	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), fromLinear(texture(oldColor0, vec2(gl_GlobalInvocationID.x / float(width), gl_GlobalInvocationID.y / float(height)))));

	    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), newColor));
    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(guessZ / 4.0, currentZ / 4.0, oldZ / 4.0, 1.0));
    //imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(1.0, 0.1 * oldZ, 0.0 * guessZ, 1.0));
	/*imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), 
        vec4(1 / 10.0 * tan(3.14159 * (-0.5 + (DecodeFloatRGBA(imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))))))), 0.0, 0.0, 1.0)
    );*/
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), imageLoad(currentDepth, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y))));
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(1.0, 1.0, 1.0, 2.0) - newColor);
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(oldPos, 0.0, 1.0));
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(fract(255 * dp0), fract(255 * dp1), 0.0, 1.0));
    //vec4 color2 = imageLoad(oldColor0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
    /*  
	imageStore(newColor0, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(128.0 / 256.0, 0, 0, 1));
    vec4 testColor = texture(oldColor0, oldPos);
    if (testColor.r == 1.0 / 2.0) {
        testColor.b = 1.0;
    }
    if (testColor.r == 127.0 / 255.0) {
        testColor.g = 1.0;
    }
	imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), testColor);
    */
    
    
    //vec4 newColor = imageLoad(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)));
	//imageStore(swapchain, ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y)), vec4(vec3(newColor), 1.0));
}