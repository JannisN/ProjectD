#version 460

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout (push_constant) uniform mypc_t {
    int fromX, fromY;
    int toX, toY;
    int borderX, borderY;
} mypc;

layout (set = 0, binding = 0, rgba8) uniform image2D blurredImage;
layout (set = 0, binding = 1, rgba8) uniform image2D normalImage;
layout (set = 0, binding = 2, rgba8) uniform image2D depthImage;

void main() {
    const uint blurSize = 3;
    const uint sourceX = gl_GlobalInvocationID.x * blurSize + mypc.fromX;
    const uint sourceY = gl_GlobalInvocationID.y * blurSize + mypc.fromY;
    const uint destX = gl_GlobalInvocationID.x + mypc.toX;
    const uint destY = gl_GlobalInvocationID.y + mypc.toY;
    if (gl_GlobalInvocationID.x >= mypc.borderX)
        return;
    if (gl_GlobalInvocationID.y >= mypc.borderY)
        return;

    vec4 normal = vec4(imageLoad(normalImage, ivec2(sourceX + blurSize / 2, sourceY + blurSize / 2)));
	imageStore(normalImage, ivec2(destX, destY), normal);

    vec4 depth = vec4(imageLoad(depthImage, ivec2(sourceX + blurSize / 2, sourceY + blurSize / 2)));
	imageStore(depthImage, ivec2(destX, destY), depth);

	vec3 normalCenter = (normal.xyz - vec3(0.5)) * 2.0;
	float depthCenter = 100 * (depth.x + depth.y / 255.0 + depth.z / 255.0 / 255.0);

    int sampleCount = 0;
    float totalSampleCount = 0;
    vec4 blurredColour = vec4(0);
    for (int i = 0; i < blurSize; i++) {
        for (int j = 0; j < blurSize; j++) {
			vec4 normalIm2 = vec4(imageLoad(normalImage, ivec2(sourceX + i, sourceY + j)));
			vec3 normal2 = (normalIm2.xyz - vec3(0.5)) * 2.0;
			vec4 depthIm2 = vec4(imageLoad(depthImage, ivec2(sourceX + i, sourceY + j)));
			float depth2 = 100 * (depthIm2.x + depthIm2.y / 255.0 + depthIm2.z / 255.0 / 255.0);
			if (abs(depth2 - depthCenter) < 0.2 && dot(normalCenter, normal2) > 0.80) {
                sampleCount++;
                vec4 sampleColour = vec4(imageLoad(blurredImage, ivec2(sourceX + i, sourceY + j)));
                blurredColour += sampleColour;
                if (sampleColour.a > 0.0) {
                    totalSampleCount += sampleColour.a * 255.0;
                } else {
                    totalSampleCount++;
                }
			}
        }
    }
    blurredColour /= sampleCount;
    blurredColour.a = totalSampleCount / 255.0;
	imageStore(blurredImage, ivec2(destX, destY), blurredColour);
}