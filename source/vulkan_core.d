import core.stdc.config;

extern (C):

enum VULKAN_CORE_H_ = 1;

/*
** Copyright 2015-2022 The Khronos Group Inc.
**
** SPDX-License-Identifier: Apache-2.0
*/

/*
** This header is generated from the Khronos Vulkan XML API Registry.
**
*/

enum VK_VERSION_1_0 = 1;

enum VK_USE_64_BIT_PTR_DEFINES = 1;

enum VK_NULL_HANDLE = cast(void*) 0;

// DEPRECATED: This define is deprecated. VK_MAKE_API_VERSION should be used instead.
extern (D) auto VK_MAKE_VERSION(T0, T1, T2)(auto ref T0 major, auto ref T1 minor, auto ref T2 patch)
{
    return ((cast(uint) major) << 22) | ((cast(uint) minor) << 12) | (cast(uint) patch);
}

// DEPRECATED: This define has been removed. Specific version defines (e.g. VK_API_VERSION_1_0), or the VK_MAKE_VERSION macro, should be used instead.
//#define VK_API_VERSION VK_MAKE_VERSION(1, 0, 0) // Patch version should always be set to 0

extern (D) auto VK_MAKE_API_VERSION(T0, T1, T2, T3)(auto ref T0 variant, auto ref T1 major, auto ref T2 minor, auto ref T3 patch)
{
    return ((cast(uint) variant) << 29) | ((cast(uint) major) << 22) | ((cast(uint) minor) << 12) | (cast(uint) patch);
}

// Vulkan 1.0 version number
enum VK_API_VERSION_1_0 = VK_MAKE_API_VERSION(0, 1, 0, 0); // Patch version should always be set to 0

// Version of this file
enum VK_HEADER_VERSION = 204;

// Complete version of this file
enum VK_HEADER_VERSION_COMPLETE = VK_MAKE_API_VERSION(0, 1, 3, VK_HEADER_VERSION);

// DEPRECATED: This define is deprecated. VK_API_VERSION_MAJOR should be used instead.
extern (D) auto VK_VERSION_MAJOR(T)(auto ref T version0)
{
    return cast(uint) version0 >> 22;
}

// DEPRECATED: This define is deprecated. VK_API_VERSION_MINOR should be used instead.
extern (D) auto VK_VERSION_MINOR(T)(auto ref T version0)
{
    return (cast(uint) version0 >> 12) & 0x3FFU;
}

// DEPRECATED: This define is deprecated. VK_API_VERSION_PATCH should be used instead.
extern (D) auto VK_VERSION_PATCH(T)(auto ref T version0)
{
    return cast(uint) version0 & 0xFFFU;
}

extern (D) auto VK_API_VERSION_VARIANT(T)(auto ref T version0)
{
    return cast(uint) version0 >> 29;
}

extern (D) auto VK_API_VERSION_MAJOR(T)(auto ref T version0)
{
    return (cast(uint) version0 >> 22) & 0x7FU;
}

extern (D) auto VK_API_VERSION_MINOR(T)(auto ref T version0)
{
    return (cast(uint) version0 >> 12) & 0x3FFU;
}

extern (D) auto VK_API_VERSION_PATCH(T)(auto ref T version0)
{
    return cast(uint) version0 & 0xFFFU;
}

alias VkBool32 = uint;
alias VkDeviceAddress = ulong;
alias VkDeviceSize = ulong;
alias VkFlags = uint;
alias VkSampleMask = uint;
struct VkBuffer_T;
alias VkBuffer = VkBuffer_T*;
struct VkImage_T;
alias VkImage = VkImage_T*;
struct VkInstance_T;
alias VkInstance = VkInstance_T*;
struct VkPhysicalDevice_T;
alias VkPhysicalDevice = VkPhysicalDevice_T*;
struct VkDevice_T;
alias VkDevice = VkDevice_T*;
struct VkQueue_T;
alias VkQueue = VkQueue_T*;
struct VkSemaphore_T;
alias VkSemaphore = VkSemaphore_T*;
struct VkCommandBuffer_T;
alias VkCommandBuffer = VkCommandBuffer_T*;
struct VkFence_T;
alias VkFence = VkFence_T*;
struct VkDeviceMemory_T;
alias VkDeviceMemory = VkDeviceMemory_T*;
struct VkEvent_T;
alias VkEvent = VkEvent_T*;
struct VkQueryPool_T;
alias VkQueryPool = VkQueryPool_T*;
struct VkBufferView_T;
alias VkBufferView = VkBufferView_T*;
struct VkImageView_T;
alias VkImageView = VkImageView_T*;
struct VkShaderModule_T;
alias VkShaderModule = VkShaderModule_T*;
struct VkPipelineCache_T;
alias VkPipelineCache = VkPipelineCache_T*;
struct VkPipelineLayout_T;
alias VkPipelineLayout = VkPipelineLayout_T*;
struct VkPipeline_T;
alias VkPipeline = VkPipeline_T*;
struct VkRenderPass_T;
alias VkRenderPass = VkRenderPass_T*;
struct VkDescriptorSetLayout_T;
alias VkDescriptorSetLayout = VkDescriptorSetLayout_T*;
struct VkSampler_T;
alias VkSampler = VkSampler_T*;
struct VkDescriptorSet_T;
alias VkDescriptorSet = VkDescriptorSet_T*;
struct VkDescriptorPool_T;
alias VkDescriptorPool = VkDescriptorPool_T*;
struct VkFramebuffer_T;
alias VkFramebuffer = VkFramebuffer_T*;
struct VkCommandPool_T;
alias VkCommandPool = VkCommandPool_T*;
enum VK_UUID_SIZE = 16U;
enum VK_ATTACHMENT_UNUSED = ~0U;
enum VK_FALSE = 0U;
enum VK_LOD_CLAMP_NONE = 1000.0F;
enum VK_QUEUE_FAMILY_IGNORED = ~0U;
enum VK_REMAINING_ARRAY_LAYERS = ~0U;
enum VK_REMAINING_MIP_LEVELS = ~0U;
enum VK_SUBPASS_EXTERNAL = ~0U;
enum VK_TRUE = 1U;
enum VK_WHOLE_SIZE = ~0UL;
enum VK_MAX_MEMORY_TYPES = 32U;
enum VK_MAX_MEMORY_HEAPS = 16U;
enum VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = 256U;
enum VK_MAX_EXTENSION_NAME_SIZE = 256U;
enum VK_MAX_DESCRIPTION_SIZE = 256U;

enum VkResult
{
    VK_SUCCESS = 0,
    VK_NOT_READY = 1,
    VK_TIMEOUT = 2,
    VK_EVENT_SET = 3,
    VK_EVENT_RESET = 4,
    VK_INCOMPLETE = 5,
    VK_ERROR_OUT_OF_HOST_MEMORY = -1,
    VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
    VK_ERROR_INITIALIZATION_FAILED = -3,
    VK_ERROR_DEVICE_LOST = -4,
    VK_ERROR_MEMORY_MAP_FAILED = -5,
    VK_ERROR_LAYER_NOT_PRESENT = -6,
    VK_ERROR_EXTENSION_NOT_PRESENT = -7,
    VK_ERROR_FEATURE_NOT_PRESENT = -8,
    VK_ERROR_INCOMPATIBLE_DRIVER = -9,
    VK_ERROR_TOO_MANY_OBJECTS = -10,
    VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
    VK_ERROR_FRAGMENTED_POOL = -12,
    VK_ERROR_UNKNOWN = -13,
    VK_ERROR_OUT_OF_POOL_MEMORY = -1000069000,
    VK_ERROR_INVALID_EXTERNAL_HANDLE = -1000072003,
    VK_ERROR_FRAGMENTATION = -1000161000,
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS = -1000257000,
    VK_PIPELINE_COMPILE_REQUIRED = 1000297000,
    VK_ERROR_SURFACE_LOST_KHR = -1000000000,
    VK_ERROR_NATIVE_WINDOW_IN_USE_KHR = -1000000001,
    VK_SUBOPTIMAL_KHR = 1000001003,
    VK_ERROR_OUT_OF_DATE_KHR = -1000001004,
    VK_ERROR_INCOMPATIBLE_DISPLAY_KHR = -1000003001,
    VK_ERROR_VALIDATION_FAILED_EXT = -1000011001,
    VK_ERROR_INVALID_SHADER_NV = -1000012000,
    VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT = -1000158000,
    VK_ERROR_NOT_PERMITTED_KHR = -1000174001,
    VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT = -1000255000,
    VK_THREAD_IDLE_KHR = 1000268000,
    VK_THREAD_DONE_KHR = 1000268001,
    VK_OPERATION_DEFERRED_KHR = 1000268002,
    VK_OPERATION_NOT_DEFERRED_KHR = 1000268003,
    VK_ERROR_OUT_OF_POOL_MEMORY_KHR = VK_ERROR_OUT_OF_POOL_MEMORY,
    VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR = VK_ERROR_INVALID_EXTERNAL_HANDLE,
    VK_ERROR_FRAGMENTATION_EXT = VK_ERROR_FRAGMENTATION,
    VK_ERROR_NOT_PERMITTED_EXT = VK_ERROR_NOT_PERMITTED_KHR,
    VK_ERROR_INVALID_DEVICE_ADDRESS_EXT = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
    VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR = VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS,
    VK_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED,
    VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT = VK_PIPELINE_COMPILE_REQUIRED,
    VK_RESULT_MAX_ENUM = 0x7FFFFFFF
}

enum VkStructureType
{
    VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
    VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
    VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
    VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
    VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
    VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
    VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
    VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
    VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
    VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
    VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
    VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
    VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
    VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
    VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
    VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
    VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
    VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
    VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
    VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
    VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
    VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
    VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
    VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
    VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
    VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES = 1000094000,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO = 1000157000,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO = 1000157001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES = 1000083000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS = 1000127000,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO = 1000127001,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO = 1000060000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO = 1000060003,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO = 1000060004,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO = 1000060005,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO = 1000060006,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO = 1000060013,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO = 1000060014,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES = 1000070000,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO = 1000070001,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2 = 1000146000,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2 = 1000146001,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2 = 1000146002,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2 = 1000146003,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2 = 1000146004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2 = 1000059000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2 = 1000059001,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2 = 1000059002,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2 = 1000059003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2 = 1000059004,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2 = 1000059005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2 = 1000059006,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2 = 1000059007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2 = 1000059008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES = 1000117000,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO = 1000117001,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO = 1000117002,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO = 1000117003,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO = 1000053000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES = 1000053001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES = 1000053002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES = 1000120000,
    VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO = 1000145000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES = 1000145001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES = 1000145002,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2 = 1000145003,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO = 1000156000,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO = 1000156001,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO = 1000156002,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO = 1000156003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES = 1000156004,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES = 1000156005,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO = 1000085000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO = 1000071000,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES = 1000071001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO = 1000071002,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES = 1000071003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES = 1000071004,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO = 1000072000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO = 1000072001,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO = 1000072002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO = 1000112000,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES = 1000112001,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO = 1000113000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO = 1000077000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO = 1000076000,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES = 1000076001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES = 1000168000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT = 1000168001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES = 1000063000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO = 1000147000,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2 = 1000109000,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2 = 1000109001,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2 = 1000109002,
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2 = 1000109003,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2 = 1000109004,
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO = 1000109005,
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO = 1000109006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES = 1000177000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES = 1000196000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES = 1000180000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES = 1000082000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES = 1000197000,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO = 1000161000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES = 1000161001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES = 1000161002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO = 1000161003,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT = 1000161004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES = 1000199000,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE = 1000199001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES = 1000221000,
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO = 1000246000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES = 1000130000,
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO = 1000130001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES = 1000211000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES = 1000108000,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO = 1000108001,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO = 1000108002,
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO = 1000108003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES = 1000253000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES = 1000175000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES = 1000241000,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT = 1000241001,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT = 1000241002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES = 1000261000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES = 1000207000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES = 1000207001,
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO = 1000207002,
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO = 1000207003,
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO = 1000207004,
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO = 1000207005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES = 1000257000,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO = 1000244001,
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO = 1000257002,
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO = 1000257003,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO = 1000257004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES = 53,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES = 54,
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO = 1000192000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES = 1000215000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES = 1000245000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES = 1000276000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES = 1000295000,
    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO = 1000295001,
    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO = 1000295002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES = 1000297000,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER_2 = 1000314000,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2 = 1000314001,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2 = 1000314002,
    VK_STRUCTURE_TYPE_DEPENDENCY_INFO = 1000314003,
    VK_STRUCTURE_TYPE_SUBMIT_INFO_2 = 1000314004,
    VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO = 1000314005,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO = 1000314006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES = 1000314007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES = 1000325000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES = 1000335000,
    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2 = 1000337000,
    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2 = 1000337001,
    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2 = 1000337002,
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2 = 1000337003,
    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2 = 1000337004,
    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2 = 1000337005,
    VK_STRUCTURE_TYPE_BUFFER_COPY_2 = 1000337006,
    VK_STRUCTURE_TYPE_IMAGE_COPY_2 = 1000337007,
    VK_STRUCTURE_TYPE_IMAGE_BLIT_2 = 1000337008,
    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2 = 1000337009,
    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2 = 1000337010,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES = 1000225000,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO = 1000225001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES = 1000225002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES = 1000138000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES = 1000138001,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK = 1000138002,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO = 1000138003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES = 1000066000,
    VK_STRUCTURE_TYPE_RENDERING_INFO = 1000044000,
    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO = 1000044001,
    VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO = 1000044002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES = 1000044003,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO = 1000044004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES = 1000280000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES = 1000280001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES = 1000281001,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3 = 1000360000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES = 1000413000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES = 1000413001,
    VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS = 1000413002,
    VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS = 1000413003,
    VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR = 1000001000,
    VK_STRUCTURE_TYPE_PRESENT_INFO_KHR = 1000001001,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = 1000060007,
    VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR = 1000060008,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR = 1000060009,
    VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR = 1000060010,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR = 1000060011,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR = 1000060012,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR = 1000002000,
    VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR = 1000002001,
    VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR = 1000003000,
    VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR = 1000004000,
    VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR = 1000005000,
    VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR = 1000006000,
    VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR = 1000008000,
    VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR = 1000009000,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT = 1000011000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD = 1000018000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT = 1000022000,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT = 1000022001,
    VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT = 1000022002,

    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV = 1000026000,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV = 1000026001,
    VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV = 1000026002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT = 1000028000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT = 1000028001,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT = 1000028002,
    VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX = 1000029000,
    VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX = 1000029001,
    VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX = 1000029002,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX = 1000030000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX = 1000030001,

    VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD = 1000041000,
    VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000044006,
    VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT = 1000044007,
    VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD = 1000044008,
    VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX = 1000044009,
    VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP = 1000049000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV = 1000050000,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV = 1000056000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV = 1000056001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV = 1000057001,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV = 1000058000,
    VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT = 1000061000,
    VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN = 1000062000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT = 1000067000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT = 1000067001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073000,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR = 1000073001,
    VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR = 1000073002,
    VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR = 1000073003,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR = 1000074000,
    VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR = 1000074001,
    VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR = 1000074002,
    VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR = 1000075000,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078000,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR = 1000078001,
    VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR = 1000078002,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR = 1000078003,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR = 1000079000,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR = 1000079001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR = 1000080000,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT = 1000081000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT = 1000081001,
    VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT = 1000081002,
    VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR = 1000084000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV = 1000087000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT = 1000090000,
    VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT = 1000091000,
    VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT = 1000091001,
    VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT = 1000091002,
    VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT = 1000091003,
    VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE = 1000092000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX = 1000097000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV = 1000098000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT = 1000099000,
    VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT = 1000099001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT = 1000101000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT = 1000101001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT = 1000102000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT = 1000102001,
    VK_STRUCTURE_TYPE_HDR_METADATA_EXT = 1000105000,
    VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR = 1000111000,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114000,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR = 1000114001,
    VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR = 1000114002,
    VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR = 1000115000,
    VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR = 1000115001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR = 1000116000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR = 1000116001,
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR = 1000116002,
    VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR = 1000116003,
    VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR = 1000116004,
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR = 1000116005,
    VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR = 1000116006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR = 1000119000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR = 1000119001,
    VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR = 1000119002,
    VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR = 1000121000,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR = 1000121001,
    VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR = 1000121002,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR = 1000121003,
    VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR = 1000121004,
    VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK = 1000122000,
    VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK = 1000123000,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT = 1000128000,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT = 1000128001,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT = 1000128002,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT = 1000128003,
    VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT = 1000128004,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID = 1000129000,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID = 1000129001,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID = 1000129002,
    VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129003,
    VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID = 1000129004,
    VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID = 1000129005,
    VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID = 1000129006,
    VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT = 1000143000,
    VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT = 1000143001,
    VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT = 1000143002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT = 1000143003,
    VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT = 1000143004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT = 1000148000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT = 1000148001,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT = 1000148002,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV = 1000149000,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR = 1000150007,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR = 1000150000,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR = 1000150002,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR = 1000150003,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR = 1000150004,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR = 1000150005,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR = 1000150006,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR = 1000150009,
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR = 1000150010,
    VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR = 1000150011,
    VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR = 1000150012,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR = 1000150013,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR = 1000150014,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR = 1000150017,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR = 1000150020,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR = 1000347000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR = 1000347001,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR = 1000150015,
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR = 1000150016,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR = 1000150018,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR = 1000348013,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV = 1000152000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV = 1000154000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV = 1000154001,
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT = 1000158000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT = 1000158002,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT = 1000158003,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT = 1000158004,
    VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = 1000158005,
    VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT = 1000158006,
    VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160000,
    VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT = 1000160001,

    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV = 1000164000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV = 1000164001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV = 1000164002,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV = 1000164005,
    VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV = 1000165000,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV = 1000165001,
    VK_STRUCTURE_TYPE_GEOMETRY_NV = 1000165003,
    VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV = 1000165004,
    VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV = 1000165005,
    VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV = 1000165006,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV = 1000165007,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV = 1000165008,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV = 1000165009,
    VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV = 1000165011,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV = 1000165012,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV = 1000166000,
    VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV = 1000166001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT = 1000170000,
    VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT = 1000170001,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT = 1000178000,
    VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT = 1000178001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT = 1000178002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR = 1000181000,
    VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD = 1000183000,
    VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT = 1000184000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD = 1000185000,

    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR = 1000174000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR = 1000388000,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR = 1000388001,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD = 1000189000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT = 1000190000,
    VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT = 1000190001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT = 1000190002,
    VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP = 1000191000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV = 1000201000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV = 1000202000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV = 1000202001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV = 1000203000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV = 1000204000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV = 1000205000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV = 1000205002,
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV = 1000206000,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV = 1000206001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL = 1000209000,
    VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL = 1000210000,
    VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL = 1000210001,
    VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL = 1000210002,
    VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL = 1000210003,
    VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL = 1000210004,
    VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL = 1000210005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT = 1000212000,
    VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD = 1000213000,
    VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD = 1000213001,
    VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA = 1000214000,
    VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT = 1000217000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT = 1000218000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT = 1000218001,
    VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT = 1000218002,
    VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR = 1000226000,
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR = 1000226001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR = 1000226002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR = 1000226003,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR = 1000226004,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD = 1000227000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD = 1000229000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT = 1000234000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT = 1000237000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT = 1000238000,
    VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT = 1000238001,
    VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR = 1000239000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV = 1000240000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT = 1000244000,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT = 1000244002,
    VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT = 1000247000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR = 1000248000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV = 1000249000,
    VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = 1000249002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV = 1000250000,
    VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV = 1000250001,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV = 1000250002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT = 1000251000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT = 1000252000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT = 1000254000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT = 1000254001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT = 1000254002,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT = 1000255000,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT = 1000255002,
    VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT = 1000255001,
    VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT = 1000256000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT = 1000259000,
    VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT = 1000259001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT = 1000259002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT = 1000260000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT = 1000265000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT = 1000267000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR = 1000269000,
    VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR = 1000269001,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR = 1000269002,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR = 1000269003,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR = 1000269004,
    VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR = 1000269005,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT = 1000273000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV = 1000277000,
    VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV = 1000277001,
    VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV = 1000277002,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV = 1000277003,
    VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV = 1000277004,
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV = 1000277005,
    VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV = 1000277006,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV = 1000277007,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV = 1000278000,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV = 1000278001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT = 1000281000,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM = 1000282000,
    VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM = 1000282001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT = 1000284000,
    VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT = 1000284001,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT = 1000284002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT = 1000286000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT = 1000286001,
    VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT = 1000287000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT = 1000287001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT = 1000287002,
    VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR = 1000290000,
    VK_STRUCTURE_TYPE_PRESENT_ID_KHR = 1000294000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR = 1000294001,

    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV = 1000300000,
    VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV = 1000300001,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV = 1000314008,
    VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV = 1000314009,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR = 1000323000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV = 1000326000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV = 1000326001,
    VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV = 1000326002,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV = 1000327000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV = 1000327001,
    VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV = 1000327002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT = 1000330000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT = 1000332000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT = 1000332001,
    VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM = 1000333000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR = 1000336000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT = 1000340000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM = 1000342000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT = 1000344000,
    VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT = 1000346000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE = 1000351000,
    VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE = 1000351002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT = 1000352000,
    VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT = 1000352001,
    VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT = 1000352002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT = 1000353000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT = 1000355000,
    VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT = 1000355001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT = 1000356000,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364000,
    VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA = 1000364001,
    VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000364002,
    VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365000,
    VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA = 1000365001,
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA = 1000366000,
    VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA = 1000366001,
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA = 1000366002,
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA = 1000366003,
    VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA = 1000366004,
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA = 1000366005,
    VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA = 1000366006,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA = 1000366007,
    VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA = 1000366008,
    VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA = 1000366009,
    VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI = 1000369000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI = 1000369001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI = 1000369002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI = 1000370000,
    VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV = 1000371000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV = 1000371001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT = 1000377000,
    VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX = 1000378000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT = 1000381000,
    VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT = 1000381001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT = 1000391000,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT = 1000391001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT = 1000392000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT = 1000392001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT = 1000411000,
    VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT = 1000411001,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT = 1000412000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM = 1000425000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM = 1000425001,
    VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM = 1000425002,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV = 1000430000,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES,
    VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT,
    VK_STRUCTURE_TYPE_RENDERING_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_INFO,
    VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR = VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO,
    VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV = VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD,
    VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2,
    VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES,
    VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES,
    VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES,
    VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO,
    VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO,
    VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2,
    VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2,
    VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2,
    VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO,
    VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR = VK_STRUCTURE_TYPE_SUBPASS_END_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO,
    VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES,
    VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES,
    VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO,
    VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS,
    VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES,
    VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES,
    VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK,
    VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2,
    VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2,
    VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR = VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2,
    VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO,
    VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES,
    VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES,
    VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO,
    VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES,
    VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT,
    VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES,
    VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES,
    VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES,
    VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO,
    VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO,
    VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO,
    VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO,
    VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES,
    VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES,
    VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT,
    VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES,
    VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES,
    VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO,
    VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR = VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO,
    VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR = VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO,
    VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES,
    VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO,
    VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT = VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES,
    VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_MEMORY_BARRIER_2,
    VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2,
    VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2,
    VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR = VK_STRUCTURE_TYPE_DEPENDENCY_INFO,
    VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR = VK_STRUCTURE_TYPE_SUBMIT_INFO_2,
    VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO,
    VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR = VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES,
    VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2,
    VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2,
    VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2,
    VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR = VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2,
    VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2,
    VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR = VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2,
    VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR = VK_STRUCTURE_TYPE_BUFFER_COPY_2,
    VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR = VK_STRUCTURE_TYPE_IMAGE_COPY_2,
    VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR = VK_STRUCTURE_TYPE_IMAGE_BLIT_2,
    VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR = VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2,
    VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR = VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2,
    VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR = VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR,
    VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT = VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES,
    VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS,
    VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR = VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS,
    VK_STRUCTURE_TYPE_MAX_ENUM = 0x7FFFFFFF
}

enum VkImageLayout
{
    VK_IMAGE_LAYOUT_UNDEFINED = 0,
    VK_IMAGE_LAYOUT_GENERAL = 1,
    VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
    VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
    VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
    VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
    VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
    VK_IMAGE_LAYOUT_PREINITIALIZED = 8,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL = 1000117000,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL = 1000117001,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL = 1000241000,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL = 1000241001,
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL = 1000241002,
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL = 1000241003,
    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL = 1000314000,
    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL = 1000314001,
    VK_IMAGE_LAYOUT_PRESENT_SRC_KHR = 1000001002,

    VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR = 1000111000,
    VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT = 1000218000,
    VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR = 1000164003,

    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV = VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR,
    VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR = VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL,
    VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR = VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL,
    VK_IMAGE_LAYOUT_MAX_ENUM = 0x7FFFFFFF
}

enum VkObjectType
{
    VK_OBJECT_TYPE_UNKNOWN = 0,
    VK_OBJECT_TYPE_INSTANCE = 1,
    VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
    VK_OBJECT_TYPE_DEVICE = 3,
    VK_OBJECT_TYPE_QUEUE = 4,
    VK_OBJECT_TYPE_SEMAPHORE = 5,
    VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
    VK_OBJECT_TYPE_FENCE = 7,
    VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
    VK_OBJECT_TYPE_BUFFER = 9,
    VK_OBJECT_TYPE_IMAGE = 10,
    VK_OBJECT_TYPE_EVENT = 11,
    VK_OBJECT_TYPE_QUERY_POOL = 12,
    VK_OBJECT_TYPE_BUFFER_VIEW = 13,
    VK_OBJECT_TYPE_IMAGE_VIEW = 14,
    VK_OBJECT_TYPE_SHADER_MODULE = 15,
    VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
    VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
    VK_OBJECT_TYPE_RENDER_PASS = 18,
    VK_OBJECT_TYPE_PIPELINE = 19,
    VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
    VK_OBJECT_TYPE_SAMPLER = 21,
    VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
    VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
    VK_OBJECT_TYPE_FRAMEBUFFER = 24,
    VK_OBJECT_TYPE_COMMAND_POOL = 25,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION = 1000156000,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE = 1000085000,
    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT = 1000295000,
    VK_OBJECT_TYPE_SURFACE_KHR = 1000000000,
    VK_OBJECT_TYPE_SWAPCHAIN_KHR = 1000001000,
    VK_OBJECT_TYPE_DISPLAY_KHR = 1000002000,
    VK_OBJECT_TYPE_DISPLAY_MODE_KHR = 1000002001,
    VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT = 1000011000,

    VK_OBJECT_TYPE_CU_MODULE_NVX = 1000029000,
    VK_OBJECT_TYPE_CU_FUNCTION_NVX = 1000029001,
    VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT = 1000128000,
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
    VK_OBJECT_TYPE_VALIDATION_CACHE_EXT = 1000160000,
    VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
    VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL = 1000210000,
    VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR = 1000268000,
    VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV = 1000277000,
    VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA = 1000366000,
    VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE,
    VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR = VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION,
    VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT = VK_OBJECT_TYPE_PRIVATE_DATA_SLOT,
    VK_OBJECT_TYPE_MAX_ENUM = 0x7FFFFFFF
}

enum VkPipelineCacheHeaderVersion
{
    VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1,
    VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM = 0x7FFFFFFF
}

enum VkVendorId
{
    VK_VENDOR_ID_VIV = 0x10001,
    VK_VENDOR_ID_VSI = 0x10002,
    VK_VENDOR_ID_KAZAN = 0x10003,
    VK_VENDOR_ID_CODEPLAY = 0x10004,
    VK_VENDOR_ID_MESA = 0x10005,
    VK_VENDOR_ID_POCL = 0x10006,
    VK_VENDOR_ID_MAX_ENUM = 0x7FFFFFFF
}

enum VkSystemAllocationScope
{
    VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
    VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
    VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
    VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
    VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4,
    VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM = 0x7FFFFFFF
}

enum VkInternalAllocationType
{
    VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0,
    VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM = 0x7FFFFFFF
}

enum VkFormat
{
    VK_FORMAT_UNDEFINED = 0,
    VK_FORMAT_R4G4_UNORM_PACK8 = 1,
    VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
    VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
    VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
    VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
    VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
    VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
    VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
    VK_FORMAT_R8_UNORM = 9,
    VK_FORMAT_R8_SNORM = 10,
    VK_FORMAT_R8_USCALED = 11,
    VK_FORMAT_R8_SSCALED = 12,
    VK_FORMAT_R8_UINT = 13,
    VK_FORMAT_R8_SINT = 14,
    VK_FORMAT_R8_SRGB = 15,
    VK_FORMAT_R8G8_UNORM = 16,
    VK_FORMAT_R8G8_SNORM = 17,
    VK_FORMAT_R8G8_USCALED = 18,
    VK_FORMAT_R8G8_SSCALED = 19,
    VK_FORMAT_R8G8_UINT = 20,
    VK_FORMAT_R8G8_SINT = 21,
    VK_FORMAT_R8G8_SRGB = 22,
    VK_FORMAT_R8G8B8_UNORM = 23,
    VK_FORMAT_R8G8B8_SNORM = 24,
    VK_FORMAT_R8G8B8_USCALED = 25,
    VK_FORMAT_R8G8B8_SSCALED = 26,
    VK_FORMAT_R8G8B8_UINT = 27,
    VK_FORMAT_R8G8B8_SINT = 28,
    VK_FORMAT_R8G8B8_SRGB = 29,
    VK_FORMAT_B8G8R8_UNORM = 30,
    VK_FORMAT_B8G8R8_SNORM = 31,
    VK_FORMAT_B8G8R8_USCALED = 32,
    VK_FORMAT_B8G8R8_SSCALED = 33,
    VK_FORMAT_B8G8R8_UINT = 34,
    VK_FORMAT_B8G8R8_SINT = 35,
    VK_FORMAT_B8G8R8_SRGB = 36,
    VK_FORMAT_R8G8B8A8_UNORM = 37,
    VK_FORMAT_R8G8B8A8_SNORM = 38,
    VK_FORMAT_R8G8B8A8_USCALED = 39,
    VK_FORMAT_R8G8B8A8_SSCALED = 40,
    VK_FORMAT_R8G8B8A8_UINT = 41,
    VK_FORMAT_R8G8B8A8_SINT = 42,
    VK_FORMAT_R8G8B8A8_SRGB = 43,
    VK_FORMAT_B8G8R8A8_UNORM = 44,
    VK_FORMAT_B8G8R8A8_SNORM = 45,
    VK_FORMAT_B8G8R8A8_USCALED = 46,
    VK_FORMAT_B8G8R8A8_SSCALED = 47,
    VK_FORMAT_B8G8R8A8_UINT = 48,
    VK_FORMAT_B8G8R8A8_SINT = 49,
    VK_FORMAT_B8G8R8A8_SRGB = 50,
    VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
    VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
    VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
    VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
    VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
    VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
    VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
    VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
    VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
    VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
    VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
    VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
    VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
    VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
    VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
    VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
    VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
    VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
    VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
    VK_FORMAT_R16_UNORM = 70,
    VK_FORMAT_R16_SNORM = 71,
    VK_FORMAT_R16_USCALED = 72,
    VK_FORMAT_R16_SSCALED = 73,
    VK_FORMAT_R16_UINT = 74,
    VK_FORMAT_R16_SINT = 75,
    VK_FORMAT_R16_SFLOAT = 76,
    VK_FORMAT_R16G16_UNORM = 77,
    VK_FORMAT_R16G16_SNORM = 78,
    VK_FORMAT_R16G16_USCALED = 79,
    VK_FORMAT_R16G16_SSCALED = 80,
    VK_FORMAT_R16G16_UINT = 81,
    VK_FORMAT_R16G16_SINT = 82,
    VK_FORMAT_R16G16_SFLOAT = 83,
    VK_FORMAT_R16G16B16_UNORM = 84,
    VK_FORMAT_R16G16B16_SNORM = 85,
    VK_FORMAT_R16G16B16_USCALED = 86,
    VK_FORMAT_R16G16B16_SSCALED = 87,
    VK_FORMAT_R16G16B16_UINT = 88,
    VK_FORMAT_R16G16B16_SINT = 89,
    VK_FORMAT_R16G16B16_SFLOAT = 90,
    VK_FORMAT_R16G16B16A16_UNORM = 91,
    VK_FORMAT_R16G16B16A16_SNORM = 92,
    VK_FORMAT_R16G16B16A16_USCALED = 93,
    VK_FORMAT_R16G16B16A16_SSCALED = 94,
    VK_FORMAT_R16G16B16A16_UINT = 95,
    VK_FORMAT_R16G16B16A16_SINT = 96,
    VK_FORMAT_R16G16B16A16_SFLOAT = 97,
    VK_FORMAT_R32_UINT = 98,
    VK_FORMAT_R32_SINT = 99,
    VK_FORMAT_R32_SFLOAT = 100,
    VK_FORMAT_R32G32_UINT = 101,
    VK_FORMAT_R32G32_SINT = 102,
    VK_FORMAT_R32G32_SFLOAT = 103,
    VK_FORMAT_R32G32B32_UINT = 104,
    VK_FORMAT_R32G32B32_SINT = 105,
    VK_FORMAT_R32G32B32_SFLOAT = 106,
    VK_FORMAT_R32G32B32A32_UINT = 107,
    VK_FORMAT_R32G32B32A32_SINT = 108,
    VK_FORMAT_R32G32B32A32_SFLOAT = 109,
    VK_FORMAT_R64_UINT = 110,
    VK_FORMAT_R64_SINT = 111,
    VK_FORMAT_R64_SFLOAT = 112,
    VK_FORMAT_R64G64_UINT = 113,
    VK_FORMAT_R64G64_SINT = 114,
    VK_FORMAT_R64G64_SFLOAT = 115,
    VK_FORMAT_R64G64B64_UINT = 116,
    VK_FORMAT_R64G64B64_SINT = 117,
    VK_FORMAT_R64G64B64_SFLOAT = 118,
    VK_FORMAT_R64G64B64A64_UINT = 119,
    VK_FORMAT_R64G64B64A64_SINT = 120,
    VK_FORMAT_R64G64B64A64_SFLOAT = 121,
    VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
    VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
    VK_FORMAT_D16_UNORM = 124,
    VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
    VK_FORMAT_D32_SFLOAT = 126,
    VK_FORMAT_S8_UINT = 127,
    VK_FORMAT_D16_UNORM_S8_UINT = 128,
    VK_FORMAT_D24_UNORM_S8_UINT = 129,
    VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
    VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
    VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
    VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
    VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
    VK_FORMAT_BC2_UNORM_BLOCK = 135,
    VK_FORMAT_BC2_SRGB_BLOCK = 136,
    VK_FORMAT_BC3_UNORM_BLOCK = 137,
    VK_FORMAT_BC3_SRGB_BLOCK = 138,
    VK_FORMAT_BC4_UNORM_BLOCK = 139,
    VK_FORMAT_BC4_SNORM_BLOCK = 140,
    VK_FORMAT_BC5_UNORM_BLOCK = 141,
    VK_FORMAT_BC5_SNORM_BLOCK = 142,
    VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
    VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
    VK_FORMAT_BC7_UNORM_BLOCK = 145,
    VK_FORMAT_BC7_SRGB_BLOCK = 146,
    VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
    VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
    VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
    VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
    VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
    VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
    VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
    VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
    VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
    VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
    VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
    VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
    VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
    VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
    VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
    VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
    VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
    VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
    VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
    VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
    VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
    VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
    VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
    VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
    VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
    VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
    VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
    VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
    VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
    VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
    VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
    VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
    VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
    VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
    VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
    VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
    VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
    VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184,
    VK_FORMAT_G8B8G8R8_422_UNORM = 1000156000,
    VK_FORMAT_B8G8R8G8_422_UNORM = 1000156001,
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM = 1000156002,
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM = 1000156003,
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM = 1000156004,
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM = 1000156005,
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM = 1000156006,
    VK_FORMAT_R10X6_UNORM_PACK16 = 1000156007,
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16 = 1000156008,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 = 1000156009,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 = 1000156010,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 = 1000156011,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16 = 1000156012,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16 = 1000156013,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16 = 1000156014,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16 = 1000156015,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16 = 1000156016,
    VK_FORMAT_R12X4_UNORM_PACK16 = 1000156017,
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16 = 1000156018,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 = 1000156019,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 = 1000156020,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 = 1000156021,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16 = 1000156022,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16 = 1000156023,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16 = 1000156024,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16 = 1000156025,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16 = 1000156026,
    VK_FORMAT_G16B16G16R16_422_UNORM = 1000156027,
    VK_FORMAT_B16G16R16G16_422_UNORM = 1000156028,
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM = 1000156029,
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM = 1000156030,
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM = 1000156031,
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM = 1000156032,
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM = 1000156033,
    VK_FORMAT_G8_B8R8_2PLANE_444_UNORM = 1000330000,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16 = 1000330001,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16 = 1000330002,
    VK_FORMAT_G16_B16R16_2PLANE_444_UNORM = 1000330003,
    VK_FORMAT_A4R4G4B4_UNORM_PACK16 = 1000340000,
    VK_FORMAT_A4B4G4R4_UNORM_PACK16 = 1000340001,
    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK = 1000066000,
    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK = 1000066001,
    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK = 1000066002,
    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK = 1000066003,
    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK = 1000066004,
    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK = 1000066005,
    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK = 1000066006,
    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK = 1000066007,
    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK = 1000066008,
    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK = 1000066009,
    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK = 1000066010,
    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK = 1000066011,
    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK = 1000066012,
    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK = 1000066013,
    VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG = 1000054000,
    VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG = 1000054001,
    VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG = 1000054002,
    VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG = 1000054003,
    VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG = 1000054004,
    VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG = 1000054005,
    VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG = 1000054006,
    VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG = 1000054007,
    VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK,
    VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT = VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK,
    VK_FORMAT_G8B8G8R8_422_UNORM_KHR = VK_FORMAT_G8B8G8R8_422_UNORM,
    VK_FORMAT_B8G8R8G8_422_UNORM_KHR = VK_FORMAT_B8G8R8G8_422_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM,
    VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_420_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM,
    VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR = VK_FORMAT_G8_B8R8_2PLANE_422_UNORM,
    VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR = VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM,
    VK_FORMAT_R10X6_UNORM_PACK16_KHR = VK_FORMAT_R10X6_UNORM_PACK16,
    VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR = VK_FORMAT_R10X6G10X6_UNORM_2PACK16,
    VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR = VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16,
    VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
    VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR = VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
    VK_FORMAT_R12X4_UNORM_PACK16_KHR = VK_FORMAT_R12X4_UNORM_PACK16,
    VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR = VK_FORMAT_R12X4G12X4_UNORM_2PACK16,
    VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR = VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16,
    VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
    VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR = VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR = VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
    VK_FORMAT_G16B16G16R16_422_UNORM_KHR = VK_FORMAT_G16B16G16R16_422_UNORM,
    VK_FORMAT_B16G16R16G16_422_UNORM_KHR = VK_FORMAT_B16G16R16G16_422_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM,
    VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_420_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM,
    VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR = VK_FORMAT_G16_B16R16_2PLANE_422_UNORM,
    VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR = VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM,
    VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT = VK_FORMAT_G8_B8R8_2PLANE_444_UNORM,
    VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT = VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16,
    VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT = VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16,
    VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT = VK_FORMAT_G16_B16R16_2PLANE_444_UNORM,
    VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT = VK_FORMAT_A4R4G4B4_UNORM_PACK16,
    VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT = VK_FORMAT_A4B4G4R4_UNORM_PACK16,
    VK_FORMAT_MAX_ENUM = 0x7FFFFFFF
}

enum VkImageTiling
{
    VK_IMAGE_TILING_OPTIMAL = 0,
    VK_IMAGE_TILING_LINEAR = 1,
    VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT = 1000158000,
    VK_IMAGE_TILING_MAX_ENUM = 0x7FFFFFFF
}

enum VkImageType
{
    VK_IMAGE_TYPE_1D = 0,
    VK_IMAGE_TYPE_2D = 1,
    VK_IMAGE_TYPE_3D = 2,
    VK_IMAGE_TYPE_MAX_ENUM = 0x7FFFFFFF
}

enum VkPhysicalDeviceType
{
    VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
    VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
    VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
    VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
    VK_PHYSICAL_DEVICE_TYPE_CPU = 4,
    VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM = 0x7FFFFFFF
}

enum VkQueryType
{
    VK_QUERY_TYPE_OCCLUSION = 0,
    VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
    VK_QUERY_TYPE_TIMESTAMP = 2,

    VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT = 1000028004,
    VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR = 1000116000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR = 1000150000,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR = 1000150001,
    VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV = 1000165000,
    VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL = 1000210000,

    VK_QUERY_TYPE_MAX_ENUM = 0x7FFFFFFF
}

enum VkSharingMode
{
    VK_SHARING_MODE_EXCLUSIVE = 0,
    VK_SHARING_MODE_CONCURRENT = 1,
    VK_SHARING_MODE_MAX_ENUM = 0x7FFFFFFF
}

enum VkComponentSwizzle
{
    VK_COMPONENT_SWIZZLE_IDENTITY = 0,
    VK_COMPONENT_SWIZZLE_ZERO = 1,
    VK_COMPONENT_SWIZZLE_ONE = 2,
    VK_COMPONENT_SWIZZLE_R = 3,
    VK_COMPONENT_SWIZZLE_G = 4,
    VK_COMPONENT_SWIZZLE_B = 5,
    VK_COMPONENT_SWIZZLE_A = 6,
    VK_COMPONENT_SWIZZLE_MAX_ENUM = 0x7FFFFFFF
}

enum VkImageViewType
{
    VK_IMAGE_VIEW_TYPE_1D = 0,
    VK_IMAGE_VIEW_TYPE_2D = 1,
    VK_IMAGE_VIEW_TYPE_3D = 2,
    VK_IMAGE_VIEW_TYPE_CUBE = 3,
    VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
    VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
    VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6,
    VK_IMAGE_VIEW_TYPE_MAX_ENUM = 0x7FFFFFFF
}

enum VkBlendFactor
{
    VK_BLEND_FACTOR_ZERO = 0,
    VK_BLEND_FACTOR_ONE = 1,
    VK_BLEND_FACTOR_SRC_COLOR = 2,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
    VK_BLEND_FACTOR_DST_COLOR = 4,
    VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
    VK_BLEND_FACTOR_SRC_ALPHA = 6,
    VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
    VK_BLEND_FACTOR_DST_ALPHA = 8,
    VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
    VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
    VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
    VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
    VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
    VK_BLEND_FACTOR_SRC1_COLOR = 15,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
    VK_BLEND_FACTOR_SRC1_ALPHA = 17,
    VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18,
    VK_BLEND_FACTOR_MAX_ENUM = 0x7FFFFFFF
}

enum VkBlendOp
{
    VK_BLEND_OP_ADD = 0,
    VK_BLEND_OP_SUBTRACT = 1,
    VK_BLEND_OP_REVERSE_SUBTRACT = 2,
    VK_BLEND_OP_MIN = 3,
    VK_BLEND_OP_MAX = 4,
    VK_BLEND_OP_ZERO_EXT = 1000148000,
    VK_BLEND_OP_SRC_EXT = 1000148001,
    VK_BLEND_OP_DST_EXT = 1000148002,
    VK_BLEND_OP_SRC_OVER_EXT = 1000148003,
    VK_BLEND_OP_DST_OVER_EXT = 1000148004,
    VK_BLEND_OP_SRC_IN_EXT = 1000148005,
    VK_BLEND_OP_DST_IN_EXT = 1000148006,
    VK_BLEND_OP_SRC_OUT_EXT = 1000148007,
    VK_BLEND_OP_DST_OUT_EXT = 1000148008,
    VK_BLEND_OP_SRC_ATOP_EXT = 1000148009,
    VK_BLEND_OP_DST_ATOP_EXT = 1000148010,
    VK_BLEND_OP_XOR_EXT = 1000148011,
    VK_BLEND_OP_MULTIPLY_EXT = 1000148012,
    VK_BLEND_OP_SCREEN_EXT = 1000148013,
    VK_BLEND_OP_OVERLAY_EXT = 1000148014,
    VK_BLEND_OP_DARKEN_EXT = 1000148015,
    VK_BLEND_OP_LIGHTEN_EXT = 1000148016,
    VK_BLEND_OP_COLORDODGE_EXT = 1000148017,
    VK_BLEND_OP_COLORBURN_EXT = 1000148018,
    VK_BLEND_OP_HARDLIGHT_EXT = 1000148019,
    VK_BLEND_OP_SOFTLIGHT_EXT = 1000148020,
    VK_BLEND_OP_DIFFERENCE_EXT = 1000148021,
    VK_BLEND_OP_EXCLUSION_EXT = 1000148022,
    VK_BLEND_OP_INVERT_EXT = 1000148023,
    VK_BLEND_OP_INVERT_RGB_EXT = 1000148024,
    VK_BLEND_OP_LINEARDODGE_EXT = 1000148025,
    VK_BLEND_OP_LINEARBURN_EXT = 1000148026,
    VK_BLEND_OP_VIVIDLIGHT_EXT = 1000148027,
    VK_BLEND_OP_LINEARLIGHT_EXT = 1000148028,
    VK_BLEND_OP_PINLIGHT_EXT = 1000148029,
    VK_BLEND_OP_HARDMIX_EXT = 1000148030,
    VK_BLEND_OP_HSL_HUE_EXT = 1000148031,
    VK_BLEND_OP_HSL_SATURATION_EXT = 1000148032,
    VK_BLEND_OP_HSL_COLOR_EXT = 1000148033,
    VK_BLEND_OP_HSL_LUMINOSITY_EXT = 1000148034,
    VK_BLEND_OP_PLUS_EXT = 1000148035,
    VK_BLEND_OP_PLUS_CLAMPED_EXT = 1000148036,
    VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT = 1000148037,
    VK_BLEND_OP_PLUS_DARKER_EXT = 1000148038,
    VK_BLEND_OP_MINUS_EXT = 1000148039,
    VK_BLEND_OP_MINUS_CLAMPED_EXT = 1000148040,
    VK_BLEND_OP_CONTRAST_EXT = 1000148041,
    VK_BLEND_OP_INVERT_OVG_EXT = 1000148042,
    VK_BLEND_OP_RED_EXT = 1000148043,
    VK_BLEND_OP_GREEN_EXT = 1000148044,
    VK_BLEND_OP_BLUE_EXT = 1000148045,
    VK_BLEND_OP_MAX_ENUM = 0x7FFFFFFF
}

enum VkCompareOp
{
    VK_COMPARE_OP_NEVER = 0,
    VK_COMPARE_OP_LESS = 1,
    VK_COMPARE_OP_EQUAL = 2,
    VK_COMPARE_OP_LESS_OR_EQUAL = 3,
    VK_COMPARE_OP_GREATER = 4,
    VK_COMPARE_OP_NOT_EQUAL = 5,
    VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
    VK_COMPARE_OP_ALWAYS = 7,
    VK_COMPARE_OP_MAX_ENUM = 0x7FFFFFFF
}

enum VkDynamicState
{
    VK_DYNAMIC_STATE_VIEWPORT = 0,
    VK_DYNAMIC_STATE_SCISSOR = 1,
    VK_DYNAMIC_STATE_LINE_WIDTH = 2,
    VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
    VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
    VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
    VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
    VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8,
    VK_DYNAMIC_STATE_CULL_MODE = 1000267000,
    VK_DYNAMIC_STATE_FRONT_FACE = 1000267001,
    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY = 1000267002,
    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT = 1000267003,
    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT = 1000267004,
    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE = 1000267005,
    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE = 1000267006,
    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE = 1000267007,
    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP = 1000267008,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE = 1000267009,
    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE = 1000267010,
    VK_DYNAMIC_STATE_STENCIL_OP = 1000267011,
    VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE = 1000377001,
    VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE = 1000377002,
    VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE = 1000377004,
    VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV = 1000087000,
    VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT = 1000099000,
    VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT = 1000143000,
    VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = 1000347000,
    VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV = 1000164004,
    VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV = 1000164006,
    VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV = 1000205001,
    VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR = 1000226000,
    VK_DYNAMIC_STATE_LINE_STIPPLE_EXT = 1000259000,
    VK_DYNAMIC_STATE_VERTEX_INPUT_EXT = 1000352000,
    VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT = 1000377000,
    VK_DYNAMIC_STATE_LOGIC_OP_EXT = 1000377003,
    VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT = 1000381000,
    VK_DYNAMIC_STATE_CULL_MODE_EXT = VK_DYNAMIC_STATE_CULL_MODE,
    VK_DYNAMIC_STATE_FRONT_FACE_EXT = VK_DYNAMIC_STATE_FRONT_FACE,
    VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT = VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY,
    VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT = VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT,
    VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT = VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT,
    VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT = VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE,
    VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE,
    VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE,
    VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT = VK_DYNAMIC_STATE_DEPTH_COMPARE_OP,
    VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE,
    VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT = VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE,
    VK_DYNAMIC_STATE_STENCIL_OP_EXT = VK_DYNAMIC_STATE_STENCIL_OP,
    VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT = VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE,
    VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT = VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE,
    VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT = VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE,
    VK_DYNAMIC_STATE_MAX_ENUM = 0x7FFFFFFF
}

enum VkFrontFace
{
    VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
    VK_FRONT_FACE_CLOCKWISE = 1,
    VK_FRONT_FACE_MAX_ENUM = 0x7FFFFFFF
}

enum VkVertexInputRate
{
    VK_VERTEX_INPUT_RATE_VERTEX = 0,
    VK_VERTEX_INPUT_RATE_INSTANCE = 1,
    VK_VERTEX_INPUT_RATE_MAX_ENUM = 0x7FFFFFFF
}

enum VkPrimitiveTopology
{
    VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
    VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
    VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
    VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
    VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10,
    VK_PRIMITIVE_TOPOLOGY_MAX_ENUM = 0x7FFFFFFF
}

enum VkPolygonMode
{
    VK_POLYGON_MODE_FILL = 0,
    VK_POLYGON_MODE_LINE = 1,
    VK_POLYGON_MODE_POINT = 2,
    VK_POLYGON_MODE_FILL_RECTANGLE_NV = 1000153000,
    VK_POLYGON_MODE_MAX_ENUM = 0x7FFFFFFF
}

enum VkStencilOp
{
    VK_STENCIL_OP_KEEP = 0,
    VK_STENCIL_OP_ZERO = 1,
    VK_STENCIL_OP_REPLACE = 2,
    VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
    VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
    VK_STENCIL_OP_INVERT = 5,
    VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
    VK_STENCIL_OP_DECREMENT_AND_WRAP = 7,
    VK_STENCIL_OP_MAX_ENUM = 0x7FFFFFFF
}

enum VkLogicOp
{
    VK_LOGIC_OP_CLEAR = 0,
    VK_LOGIC_OP_AND = 1,
    VK_LOGIC_OP_AND_REVERSE = 2,
    VK_LOGIC_OP_COPY = 3,
    VK_LOGIC_OP_AND_INVERTED = 4,
    VK_LOGIC_OP_NO_OP = 5,
    VK_LOGIC_OP_XOR = 6,
    VK_LOGIC_OP_OR = 7,
    VK_LOGIC_OP_NOR = 8,
    VK_LOGIC_OP_EQUIVALENT = 9,
    VK_LOGIC_OP_INVERT = 10,
    VK_LOGIC_OP_OR_REVERSE = 11,
    VK_LOGIC_OP_COPY_INVERTED = 12,
    VK_LOGIC_OP_OR_INVERTED = 13,
    VK_LOGIC_OP_NAND = 14,
    VK_LOGIC_OP_SET = 15,
    VK_LOGIC_OP_MAX_ENUM = 0x7FFFFFFF
}

enum VkBorderColor
{
    VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
    VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
    VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
    VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
    VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
    VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5,
    VK_BORDER_COLOR_FLOAT_CUSTOM_EXT = 1000287003,
    VK_BORDER_COLOR_INT_CUSTOM_EXT = 1000287004,
    VK_BORDER_COLOR_MAX_ENUM = 0x7FFFFFFF
}

enum VkFilter
{
    VK_FILTER_NEAREST = 0,
    VK_FILTER_LINEAR = 1,
    VK_FILTER_CUBIC_IMG = 1000015000,
    VK_FILTER_CUBIC_EXT = VK_FILTER_CUBIC_IMG,
    VK_FILTER_MAX_ENUM = 0x7FFFFFFF
}

enum VkSamplerAddressMode
{
    VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
    VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
    VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3,
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE = 4,
    VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR = VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE,
    VK_SAMPLER_ADDRESS_MODE_MAX_ENUM = 0x7FFFFFFF
}

enum VkSamplerMipmapMode
{
    VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
    VK_SAMPLER_MIPMAP_MODE_LINEAR = 1,
    VK_SAMPLER_MIPMAP_MODE_MAX_ENUM = 0x7FFFFFFF
}

enum VkDescriptorType
{
    VK_DESCRIPTOR_TYPE_SAMPLER = 0,
    VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
    VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
    VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
    VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
    VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
    VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
    VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
    VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10,
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK = 1000138000,
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR = 1000150000,
    VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV = 1000165000,
    VK_DESCRIPTOR_TYPE_MUTABLE_VALVE = 1000351000,
    VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT = VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK,
    VK_DESCRIPTOR_TYPE_MAX_ENUM = 0x7FFFFFFF
}

enum VkAttachmentLoadOp
{
    VK_ATTACHMENT_LOAD_OP_LOAD = 0,
    VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
    VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2,
    VK_ATTACHMENT_LOAD_OP_NONE_EXT = 1000400000,
    VK_ATTACHMENT_LOAD_OP_MAX_ENUM = 0x7FFFFFFF
}

enum VkAttachmentStoreOp
{
    VK_ATTACHMENT_STORE_OP_STORE = 0,
    VK_ATTACHMENT_STORE_OP_DONT_CARE = 1,
    VK_ATTACHMENT_STORE_OP_NONE = 1000301000,
    VK_ATTACHMENT_STORE_OP_NONE_KHR = VK_ATTACHMENT_STORE_OP_NONE,
    VK_ATTACHMENT_STORE_OP_NONE_QCOM = VK_ATTACHMENT_STORE_OP_NONE,
    VK_ATTACHMENT_STORE_OP_NONE_EXT = VK_ATTACHMENT_STORE_OP_NONE,
    VK_ATTACHMENT_STORE_OP_MAX_ENUM = 0x7FFFFFFF
}

enum VkPipelineBindPoint
{
    VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
    VK_PIPELINE_BIND_POINT_COMPUTE = 1,
    VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR = 1000165000,
    VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI = 1000369003,
    VK_PIPELINE_BIND_POINT_RAY_TRACING_NV = VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR,
    VK_PIPELINE_BIND_POINT_MAX_ENUM = 0x7FFFFFFF
}

enum VkCommandBufferLevel
{
    VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
    VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1,
    VK_COMMAND_BUFFER_LEVEL_MAX_ENUM = 0x7FFFFFFF
}

enum VkIndexType
{
    VK_INDEX_TYPE_UINT16 = 0,
    VK_INDEX_TYPE_UINT32 = 1,
    VK_INDEX_TYPE_NONE_KHR = 1000165000,
    VK_INDEX_TYPE_UINT8_EXT = 1000265000,
    VK_INDEX_TYPE_NONE_NV = VK_INDEX_TYPE_NONE_KHR,
    VK_INDEX_TYPE_MAX_ENUM = 0x7FFFFFFF
}

enum VkSubpassContents
{
    VK_SUBPASS_CONTENTS_INLINE = 0,
    VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1,
    VK_SUBPASS_CONTENTS_MAX_ENUM = 0x7FFFFFFF
}

enum VkAccessFlagBits
{
    VK_ACCESS_INDIRECT_COMMAND_READ_BIT = 0x00000001,
    VK_ACCESS_INDEX_READ_BIT = 0x00000002,
    VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004,
    VK_ACCESS_UNIFORM_READ_BIT = 0x00000008,
    VK_ACCESS_INPUT_ATTACHMENT_READ_BIT = 0x00000010,
    VK_ACCESS_SHADER_READ_BIT = 0x00000020,
    VK_ACCESS_SHADER_WRITE_BIT = 0x00000040,
    VK_ACCESS_COLOR_ATTACHMENT_READ_BIT = 0x00000080,
    VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200,
    VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400,
    VK_ACCESS_TRANSFER_READ_BIT = 0x00000800,
    VK_ACCESS_TRANSFER_WRITE_BIT = 0x00001000,
    VK_ACCESS_HOST_READ_BIT = 0x00002000,
    VK_ACCESS_HOST_WRITE_BIT = 0x00004000,
    VK_ACCESS_MEMORY_READ_BIT = 0x00008000,
    VK_ACCESS_MEMORY_WRITE_BIT = 0x00010000,
    VK_ACCESS_NONE = 0,
    VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT = 0x02000000,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT = 0x04000000,
    VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT = 0x08000000,
    VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT = 0x00100000,
    VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000,
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR = 0x00200000,
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 0x00400000,
    VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 0x01000000,
    VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR = 0x00800000,
    VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV = 0x00020000,
    VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV = 0x00040000,
    VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV = VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR,
    VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR,
    VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV = VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR,
    VK_ACCESS_NONE_KHR = VK_ACCESS_NONE,
    VK_ACCESS_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkAccessFlags = uint;

enum VkImageAspectFlagBits
{
    VK_IMAGE_ASPECT_COLOR_BIT = 0x00000001,
    VK_IMAGE_ASPECT_DEPTH_BIT = 0x00000002,
    VK_IMAGE_ASPECT_STENCIL_BIT = 0x00000004,
    VK_IMAGE_ASPECT_METADATA_BIT = 0x00000008,
    VK_IMAGE_ASPECT_PLANE_0_BIT = 0x00000010,
    VK_IMAGE_ASPECT_PLANE_1_BIT = 0x00000020,
    VK_IMAGE_ASPECT_PLANE_2_BIT = 0x00000040,
    VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT = 0x00000080,
    VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT = 0x00000100,
    VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT = 0x00000200,
    VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT = 0x00000400,
    VK_IMAGE_ASPECT_NONE_KHR = 0,
    VK_IMAGE_ASPECT_PLANE_0_BIT_KHR = VK_IMAGE_ASPECT_PLANE_0_BIT,
    VK_IMAGE_ASPECT_PLANE_1_BIT_KHR = VK_IMAGE_ASPECT_PLANE_1_BIT,
    VK_IMAGE_ASPECT_PLANE_2_BIT_KHR = VK_IMAGE_ASPECT_PLANE_2_BIT,
    VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkImageAspectFlags = uint;

enum VkFormatFeatureFlagBits
{
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT = 0x00000001,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT = 0x00000002,
    VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT = 0x00000004,
    VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000008,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT = 0x00000010,
    VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT = 0x00000020,
    VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT = 0x00000040,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT = 0x00000080,
    VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT = 0x00000100,
    VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000200,
    VK_FORMAT_FEATURE_BLIT_SRC_BIT = 0x00000400,
    VK_FORMAT_FEATURE_BLIT_DST_BIT = 0x00000800,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT = 0x00001000,
    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT = 0x00004000,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT = 0x00008000,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT = 0x00020000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT = 0x00040000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT = 0x00080000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT = 0x00100000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT = 0x00200000,
    VK_FORMAT_FEATURE_DISJOINT_BIT = 0x00400000,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT = 0x00800000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT = 0x00010000,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG = 0x00002000,

    VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR = 0x20000000,
    VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x01000000,
    VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x40000000,

    VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_SRC_BIT,
    VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR = VK_FORMAT_FEATURE_TRANSFER_DST_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT,
    VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR = VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT,
    VK_FORMAT_FEATURE_DISJOINT_BIT_KHR = VK_FORMAT_FEATURE_DISJOINT_BIT,
    VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR = VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT,
    VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT = VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG,
    VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkFormatFeatureFlags = uint;

enum VkImageCreateFlagBits
{
    VK_IMAGE_CREATE_SPARSE_BINDING_BIT = 0x00000001,
    VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,
    VK_IMAGE_CREATE_SPARSE_ALIASED_BIT = 0x00000004,
    VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT = 0x00000008,
    VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT = 0x00000010,
    VK_IMAGE_CREATE_ALIAS_BIT = 0x00000400,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT = 0x00000040,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT = 0x00000020,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT = 0x00000080,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT = 0x00000100,
    VK_IMAGE_CREATE_PROTECTED_BIT = 0x00000800,
    VK_IMAGE_CREATE_DISJOINT_BIT = 0x00000200,
    VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV = 0x00002000,
    VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT = 0x00001000,
    VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT = 0x00004000,
    VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM = 0x00008000,
    VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT,
    VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT,
    VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR = VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT,
    VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR = VK_IMAGE_CREATE_EXTENDED_USAGE_BIT,
    VK_IMAGE_CREATE_DISJOINT_BIT_KHR = VK_IMAGE_CREATE_DISJOINT_BIT,
    VK_IMAGE_CREATE_ALIAS_BIT_KHR = VK_IMAGE_CREATE_ALIAS_BIT,
    VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkImageCreateFlags = uint;

enum VkSampleCountFlagBits
{
    VK_SAMPLE_COUNT_1_BIT = 0x00000001,
    VK_SAMPLE_COUNT_2_BIT = 0x00000002,
    VK_SAMPLE_COUNT_4_BIT = 0x00000004,
    VK_SAMPLE_COUNT_8_BIT = 0x00000008,
    VK_SAMPLE_COUNT_16_BIT = 0x00000010,
    VK_SAMPLE_COUNT_32_BIT = 0x00000020,
    VK_SAMPLE_COUNT_64_BIT = 0x00000040,
    VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkSampleCountFlags = uint;

enum VkImageUsageFlagBits
{
    VK_IMAGE_USAGE_TRANSFER_SRC_BIT = 0x00000001,
    VK_IMAGE_USAGE_TRANSFER_DST_BIT = 0x00000002,
    VK_IMAGE_USAGE_SAMPLED_BIT = 0x00000004,
    VK_IMAGE_USAGE_STORAGE_BIT = 0x00000008,
    VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT = 0x00000010,
    VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT = 0x00000020,
    VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT = 0x00000040,
    VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT = 0x00000080,

    VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT = 0x00000200,
    VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x00000100,

    VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI = 0x00040000,
    VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV = VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
    VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkImageUsageFlags = uint;
alias VkInstanceCreateFlags = uint;

enum VkMemoryHeapFlagBits
{
    VK_MEMORY_HEAP_DEVICE_LOCAL_BIT = 0x00000001,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT = 0x00000002,
    VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR = VK_MEMORY_HEAP_MULTI_INSTANCE_BIT,
    VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkMemoryHeapFlags = uint;

enum VkMemoryPropertyFlagBits
{
    VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT = 0x00000001,
    VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT = 0x00000002,
    VK_MEMORY_PROPERTY_HOST_COHERENT_BIT = 0x00000004,
    VK_MEMORY_PROPERTY_HOST_CACHED_BIT = 0x00000008,
    VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT = 0x00000010,
    VK_MEMORY_PROPERTY_PROTECTED_BIT = 0x00000020,
    VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD = 0x00000040,
    VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD = 0x00000080,
    VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV = 0x00000100,
    VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkMemoryPropertyFlags = uint;

enum VkQueueFlagBits
{
    VK_QUEUE_GRAPHICS_BIT = 0x00000001,
    VK_QUEUE_COMPUTE_BIT = 0x00000002,
    VK_QUEUE_TRANSFER_BIT = 0x00000004,
    VK_QUEUE_SPARSE_BINDING_BIT = 0x00000008,
    VK_QUEUE_PROTECTED_BIT = 0x00000010,

    VK_QUEUE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkQueueFlags = uint;
alias VkDeviceCreateFlags = uint;

enum VkDeviceQueueCreateFlagBits
{
    VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT = 0x00000001,
    VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkDeviceQueueCreateFlags = uint;

enum VkPipelineStageFlagBits
{
    VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT = 0x00000001,
    VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT = 0x00000002,
    VK_PIPELINE_STAGE_VERTEX_INPUT_BIT = 0x00000004,
    VK_PIPELINE_STAGE_VERTEX_SHADER_BIT = 0x00000008,
    VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT = 0x00000010,
    VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT = 0x00000020,
    VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT = 0x00000040,
    VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT = 0x00000080,
    VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT = 0x00000100,
    VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT = 0x00000200,
    VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT = 0x00000400,
    VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT = 0x00000800,
    VK_PIPELINE_STAGE_TRANSFER_BIT = 0x00001000,
    VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT = 0x00002000,
    VK_PIPELINE_STAGE_HOST_BIT = 0x00004000,
    VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT = 0x00008000,
    VK_PIPELINE_STAGE_ALL_COMMANDS_BIT = 0x00010000,
    VK_PIPELINE_STAGE_NONE = 0,
    VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT = 0x01000000,
    VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00040000,
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR = 0x02000000,
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR = 0x00200000,
    VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV = 0x00080000,
    VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV = 0x00100000,
    VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT = 0x00800000,
    VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x00400000,
    VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV = 0x00020000,
    VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV = VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
    VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV = VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR,
    VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV = VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR,
    VK_PIPELINE_STAGE_NONE_KHR = VK_PIPELINE_STAGE_NONE,
    VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkPipelineStageFlags = uint;
alias VkMemoryMapFlags = uint;

enum VkSparseMemoryBindFlagBits
{
    VK_SPARSE_MEMORY_BIND_METADATA_BIT = 0x00000001,
    VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkSparseMemoryBindFlags = uint;

enum VkSparseImageFormatFlagBits
{
    VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT = 0x00000001,
    VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT = 0x00000002,
    VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT = 0x00000004,
    VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkSparseImageFormatFlags = uint;

enum VkFenceCreateFlagBits
{
    VK_FENCE_CREATE_SIGNALED_BIT = 0x00000001,
    VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkFenceCreateFlags = uint;
alias VkSemaphoreCreateFlags = uint;

enum VkEventCreateFlagBits
{
    VK_EVENT_CREATE_DEVICE_ONLY_BIT = 0x00000001,
    VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR = VK_EVENT_CREATE_DEVICE_ONLY_BIT,
    VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkEventCreateFlags = uint;

enum VkQueryPipelineStatisticFlagBits
{
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT = 0x00000001,
    VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT = 0x00000002,
    VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT = 0x00000004,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT = 0x00000008,
    VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT = 0x00000010,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT = 0x00000020,
    VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT = 0x00000040,
    VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT = 0x00000080,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT = 0x00000100,
    VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT = 0x00000200,
    VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT = 0x00000400,
    VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkQueryPipelineStatisticFlags = uint;
alias VkQueryPoolCreateFlags = uint;

enum VkQueryResultFlagBits
{
    VK_QUERY_RESULT_64_BIT = 0x00000001,
    VK_QUERY_RESULT_WAIT_BIT = 0x00000002,
    VK_QUERY_RESULT_WITH_AVAILABILITY_BIT = 0x00000004,
    VK_QUERY_RESULT_PARTIAL_BIT = 0x00000008,

    VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkQueryResultFlags = uint;

enum VkBufferCreateFlagBits
{
    VK_BUFFER_CREATE_SPARSE_BINDING_BIT = 0x00000001,
    VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT = 0x00000002,
    VK_BUFFER_CREATE_SPARSE_ALIASED_BIT = 0x00000004,
    VK_BUFFER_CREATE_PROTECTED_BIT = 0x00000008,
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 0x00000010,
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
    VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
    VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkBufferCreateFlags = uint;

enum VkBufferUsageFlagBits
{
    VK_BUFFER_USAGE_TRANSFER_SRC_BIT = 0x00000001,
    VK_BUFFER_USAGE_TRANSFER_DST_BIT = 0x00000002,
    VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT = 0x00000004,
    VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT = 0x00000008,
    VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT = 0x00000010,
    VK_BUFFER_USAGE_STORAGE_BUFFER_BIT = 0x00000020,
    VK_BUFFER_USAGE_INDEX_BUFFER_BIT = 0x00000040,
    VK_BUFFER_USAGE_VERTEX_BUFFER_BIT = 0x00000080,
    VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT = 0x00000100,
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT = 0x00020000,

    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT = 0x00000800,
    VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT = 0x00001000,
    VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT = 0x00000200,
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR = 0x00080000,
    VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR = 0x00100000,
    VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR = 0x00000400,

    VK_BUFFER_USAGE_RAY_TRACING_BIT_NV = VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR,
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
    VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR = VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT,
    VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkBufferUsageFlags = uint;
alias VkBufferViewCreateFlags = uint;

enum VkImageViewCreateFlagBits
{
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT = 0x00000001,
    VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT = 0x00000002,
    VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkImageViewCreateFlags = uint;
alias VkShaderModuleCreateFlags = uint;

enum VkPipelineCacheCreateFlagBits
{
    VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT = 0x00000001,
    VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT = VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT,
    VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkPipelineCacheCreateFlags = uint;

enum VkColorComponentFlagBits
{
    VK_COLOR_COMPONENT_R_BIT = 0x00000001,
    VK_COLOR_COMPONENT_G_BIT = 0x00000002,
    VK_COLOR_COMPONENT_B_BIT = 0x00000004,
    VK_COLOR_COMPONENT_A_BIT = 0x00000008,
    VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkColorComponentFlags = uint;

enum VkPipelineCreateFlagBits
{
    VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT = 0x00000001,
    VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT = 0x00000002,
    VK_PIPELINE_CREATE_DERIVATIVE_BIT = 0x00000004,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT = 0x00000008,
    VK_PIPELINE_CREATE_DISPATCH_BASE_BIT = 0x00000010,
    VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT = 0x00000100,
    VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT = 0x00000200,
    VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = 0x00200000,
    VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = 0x00400000,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR = 0x00004000,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR = 0x00008000,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR = 0x00010000,
    VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR = 0x00020000,
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR = 0x00001000,
    VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR = 0x00002000,
    VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR = 0x00080000,
    VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV = 0x00000020,
    VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR = 0x00000040,
    VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR = 0x00000080,
    VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV = 0x00040000,
    VK_PIPELINE_CREATE_LIBRARY_BIT_KHR = 0x00000800,
    VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV = 0x00100000,
    VK_PIPELINE_CREATE_DISPATCH_BASE = VK_PIPELINE_CREATE_DISPATCH_BASE_BIT,
    VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR = VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR,
    VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT = VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT,
    VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR = VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT,
    VK_PIPELINE_CREATE_DISPATCH_BASE_KHR = VK_PIPELINE_CREATE_DISPATCH_BASE,
    VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT = VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT,
    VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT = VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT,
    VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkPipelineCreateFlags = uint;

enum VkPipelineShaderStageCreateFlagBits
{
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT = 0x00000001,
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT = 0x00000002,
    VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT = VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT,
    VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT = VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT,
    VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkPipelineShaderStageCreateFlags = uint;

enum VkShaderStageFlagBits
{
    VK_SHADER_STAGE_VERTEX_BIT = 0x00000001,
    VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT = 0x00000002,
    VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT = 0x00000004,
    VK_SHADER_STAGE_GEOMETRY_BIT = 0x00000008,
    VK_SHADER_STAGE_FRAGMENT_BIT = 0x00000010,
    VK_SHADER_STAGE_COMPUTE_BIT = 0x00000020,
    VK_SHADER_STAGE_ALL_GRAPHICS = 0x0000001F,
    VK_SHADER_STAGE_ALL = 0x7FFFFFFF,
    VK_SHADER_STAGE_RAYGEN_BIT_KHR = 0x00000100,
    VK_SHADER_STAGE_ANY_HIT_BIT_KHR = 0x00000200,
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR = 0x00000400,
    VK_SHADER_STAGE_MISS_BIT_KHR = 0x00000800,
    VK_SHADER_STAGE_INTERSECTION_BIT_KHR = 0x00001000,
    VK_SHADER_STAGE_CALLABLE_BIT_KHR = 0x00002000,
    VK_SHADER_STAGE_TASK_BIT_NV = 0x00000040,
    VK_SHADER_STAGE_MESH_BIT_NV = 0x00000080,
    VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI = 0x00004000,
    VK_SHADER_STAGE_RAYGEN_BIT_NV = VK_SHADER_STAGE_RAYGEN_BIT_KHR,
    VK_SHADER_STAGE_ANY_HIT_BIT_NV = VK_SHADER_STAGE_ANY_HIT_BIT_KHR,
    VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV = VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR,
    VK_SHADER_STAGE_MISS_BIT_NV = VK_SHADER_STAGE_MISS_BIT_KHR,
    VK_SHADER_STAGE_INTERSECTION_BIT_NV = VK_SHADER_STAGE_INTERSECTION_BIT_KHR,
    VK_SHADER_STAGE_CALLABLE_BIT_NV = VK_SHADER_STAGE_CALLABLE_BIT_KHR,
    VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

enum VkCullModeFlagBits
{
    VK_CULL_MODE_NONE = 0,
    VK_CULL_MODE_FRONT_BIT = 0x00000001,
    VK_CULL_MODE_BACK_BIT = 0x00000002,
    VK_CULL_MODE_FRONT_AND_BACK = 0x00000003,
    VK_CULL_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkCullModeFlags = uint;
alias VkPipelineVertexInputStateCreateFlags = uint;
alias VkPipelineInputAssemblyStateCreateFlags = uint;
alias VkPipelineTessellationStateCreateFlags = uint;
alias VkPipelineViewportStateCreateFlags = uint;
alias VkPipelineRasterizationStateCreateFlags = uint;
alias VkPipelineMultisampleStateCreateFlags = uint;

enum VkPipelineDepthStencilStateCreateFlagBits
{
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 0x00000001,
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 0x00000002,
    VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkPipelineDepthStencilStateCreateFlags = uint;

enum VkPipelineColorBlendStateCreateFlagBits
{
    VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM = 0x00000001,
    VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkPipelineColorBlendStateCreateFlags = uint;
alias VkPipelineDynamicStateCreateFlags = uint;
alias VkPipelineLayoutCreateFlags = uint;
alias VkShaderStageFlags = uint;

enum VkSamplerCreateFlagBits
{
    VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT = 0x00000001,
    VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT = 0x00000002,
    VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkSamplerCreateFlags = uint;

enum VkDescriptorPoolCreateFlagBits
{
    VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT = 0x00000001,
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT = 0x00000002,
    VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE = 0x00000004,
    VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT,
    VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkDescriptorPoolCreateFlags = uint;
alias VkDescriptorPoolResetFlags = uint;

enum VkDescriptorSetLayoutCreateFlagBits
{
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT = 0x00000002,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR = 0x00000001,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE = 0x00000004,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT = VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT,
    VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkDescriptorSetLayoutCreateFlags = uint;

enum VkAttachmentDescriptionFlagBits
{
    VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT = 0x00000001,
    VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkAttachmentDescriptionFlags = uint;

enum VkDependencyFlagBits
{
    VK_DEPENDENCY_BY_REGION_BIT = 0x00000001,
    VK_DEPENDENCY_DEVICE_GROUP_BIT = 0x00000004,
    VK_DEPENDENCY_VIEW_LOCAL_BIT = 0x00000002,
    VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR = VK_DEPENDENCY_VIEW_LOCAL_BIT,
    VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR = VK_DEPENDENCY_DEVICE_GROUP_BIT,
    VK_DEPENDENCY_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkDependencyFlags = uint;

enum VkFramebufferCreateFlagBits
{
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT = 0x00000001,
    VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR = VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT,
    VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkFramebufferCreateFlags = uint;

enum VkRenderPassCreateFlagBits
{
    VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM = 0x00000002,
    VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkRenderPassCreateFlags = uint;

enum VkSubpassDescriptionFlagBits
{
    VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX = 0x00000001,
    VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX = 0x00000002,
    VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM = 0x00000004,
    VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM = 0x00000008,
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM = 0x00000010,
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM = 0x00000020,
    VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM = 0x00000040,
    VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkSubpassDescriptionFlags = uint;

enum VkCommandPoolCreateFlagBits
{
    VK_COMMAND_POOL_CREATE_TRANSIENT_BIT = 0x00000001,
    VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT = 0x00000002,
    VK_COMMAND_POOL_CREATE_PROTECTED_BIT = 0x00000004,
    VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkCommandPoolCreateFlags = uint;

enum VkCommandPoolResetFlagBits
{
    VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
    VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkCommandPoolResetFlags = uint;

enum VkCommandBufferUsageFlagBits
{
    VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT = 0x00000001,
    VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT = 0x00000002,
    VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT = 0x00000004,
    VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkCommandBufferUsageFlags = uint;

enum VkQueryControlFlagBits
{
    VK_QUERY_CONTROL_PRECISE_BIT = 0x00000001,
    VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkQueryControlFlags = uint;

enum VkCommandBufferResetFlagBits
{
    VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT = 0x00000001,
    VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkCommandBufferResetFlags = uint;

enum VkStencilFaceFlagBits
{
    VK_STENCIL_FACE_FRONT_BIT = 0x00000001,
    VK_STENCIL_FACE_BACK_BIT = 0x00000002,
    VK_STENCIL_FACE_FRONT_AND_BACK = 0x00000003,
    VK_STENCIL_FRONT_AND_BACK = VK_STENCIL_FACE_FRONT_AND_BACK,
    VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkStencilFaceFlags = uint;

struct VkExtent2D
{
    uint width;
    uint height;
}

struct VkExtent3D
{
    uint width;
    uint height;
    uint depth;
}

struct VkOffset2D
{
    int x;
    int y;
}

struct VkOffset3D
{
    int x;
    int y;
    int z;
}

struct VkRect2D
{
    VkOffset2D offset;
    VkExtent2D extent;
}

struct VkBaseInStructure
{
    VkStructureType sType;
    const(VkBaseInStructure)* pNext;
}

struct VkBaseOutStructure
{
    VkStructureType sType;
    VkBaseOutStructure* pNext;
}

struct VkBufferMemoryBarrier
{
    VkStructureType sType;
    const(void)* pNext;
    VkAccessFlags srcAccessMask;
    VkAccessFlags dstAccessMask;
    uint srcQueueFamilyIndex;
    uint dstQueueFamilyIndex;
    VkBuffer buffer;
    VkDeviceSize offset;
    VkDeviceSize size;
}

struct VkDispatchIndirectCommand
{
    uint x;
    uint y;
    uint z;
}

struct VkDrawIndexedIndirectCommand
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
}

struct VkDrawIndirectCommand
{
    uint vertexCount;
    uint instanceCount;
    uint firstVertex;
    uint firstInstance;
}

struct VkImageSubresourceRange
{
    VkImageAspectFlags aspectMask;
    uint baseMipLevel;
    uint levelCount;
    uint baseArrayLayer;
    uint layerCount;
}

struct VkImageMemoryBarrier
{
    VkStructureType sType;
    const(void)* pNext;
    VkAccessFlags srcAccessMask;
    VkAccessFlags dstAccessMask;
    VkImageLayout oldLayout;
    VkImageLayout newLayout;
    uint srcQueueFamilyIndex;
    uint dstQueueFamilyIndex;
    VkImage image;
    VkImageSubresourceRange subresourceRange;
}

struct VkMemoryBarrier
{
    VkStructureType sType;
    const(void)* pNext;
    VkAccessFlags srcAccessMask;
    VkAccessFlags dstAccessMask;
}

struct VkPipelineCacheHeaderVersionOne
{
    uint headerSize;
    VkPipelineCacheHeaderVersion headerVersion;
    uint vendorID;
    uint deviceID;
    ubyte[VK_UUID_SIZE] pipelineCacheUUID;
}

alias PFN_vkAllocationFunction = void* function (
    void* pUserData,
    size_t size,
    size_t alignment,
    VkSystemAllocationScope allocationScope);

alias PFN_vkFreeFunction = void function (void* pUserData, void* pMemory);

alias PFN_vkInternalAllocationNotification = void function (
    void* pUserData,
    size_t size,
    VkInternalAllocationType allocationType,
    VkSystemAllocationScope allocationScope);

alias PFN_vkInternalFreeNotification = void function (
    void* pUserData,
    size_t size,
    VkInternalAllocationType allocationType,
    VkSystemAllocationScope allocationScope);

alias PFN_vkReallocationFunction = void* function (
    void* pUserData,
    void* pOriginal,
    size_t size,
    size_t alignment,
    VkSystemAllocationScope allocationScope);

alias PFN_vkVoidFunction = void function ();

struct VkAllocationCallbacks
{
    void* pUserData;
    PFN_vkAllocationFunction pfnAllocation;
    PFN_vkReallocationFunction pfnReallocation;
    PFN_vkFreeFunction pfnFree;
    PFN_vkInternalAllocationNotification pfnInternalAllocation;
    PFN_vkInternalFreeNotification pfnInternalFree;
}

struct VkApplicationInfo
{
    VkStructureType sType;
    const(void)* pNext;
    const(char)* pApplicationName;
    uint applicationVersion;
    const(char)* pEngineName;
    uint engineVersion;
    uint apiVersion;
}

struct VkFormatProperties
{
    VkFormatFeatureFlags linearTilingFeatures;
    VkFormatFeatureFlags optimalTilingFeatures;
    VkFormatFeatureFlags bufferFeatures;
}

struct VkImageFormatProperties
{
    VkExtent3D maxExtent;
    uint maxMipLevels;
    uint maxArrayLayers;
    VkSampleCountFlags sampleCounts;
    VkDeviceSize maxResourceSize;
}

struct VkInstanceCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkInstanceCreateFlags flags;
    const(VkApplicationInfo)* pApplicationInfo;
    uint enabledLayerCount;
    const(char*)* ppEnabledLayerNames;
    uint enabledExtensionCount;
    const(char*)* ppEnabledExtensionNames;
}

struct VkMemoryHeap
{
    VkDeviceSize size;
    VkMemoryHeapFlags flags;
}

struct VkMemoryType
{
    VkMemoryPropertyFlags propertyFlags;
    uint heapIndex;
}

struct VkPhysicalDeviceFeatures
{
    VkBool32 robustBufferAccess;
    VkBool32 fullDrawIndexUint32;
    VkBool32 imageCubeArray;
    VkBool32 independentBlend;
    VkBool32 geometryShader;
    VkBool32 tessellationShader;
    VkBool32 sampleRateShading;
    VkBool32 dualSrcBlend;
    VkBool32 logicOp;
    VkBool32 multiDrawIndirect;
    VkBool32 drawIndirectFirstInstance;
    VkBool32 depthClamp;
    VkBool32 depthBiasClamp;
    VkBool32 fillModeNonSolid;
    VkBool32 depthBounds;
    VkBool32 wideLines;
    VkBool32 largePoints;
    VkBool32 alphaToOne;
    VkBool32 multiViewport;
    VkBool32 samplerAnisotropy;
    VkBool32 textureCompressionETC2;
    VkBool32 textureCompressionASTC_LDR;
    VkBool32 textureCompressionBC;
    VkBool32 occlusionQueryPrecise;
    VkBool32 pipelineStatisticsQuery;
    VkBool32 vertexPipelineStoresAndAtomics;
    VkBool32 fragmentStoresAndAtomics;
    VkBool32 shaderTessellationAndGeometryPointSize;
    VkBool32 shaderImageGatherExtended;
    VkBool32 shaderStorageImageExtendedFormats;
    VkBool32 shaderStorageImageMultisample;
    VkBool32 shaderStorageImageReadWithoutFormat;
    VkBool32 shaderStorageImageWriteWithoutFormat;
    VkBool32 shaderUniformBufferArrayDynamicIndexing;
    VkBool32 shaderSampledImageArrayDynamicIndexing;
    VkBool32 shaderStorageBufferArrayDynamicIndexing;
    VkBool32 shaderStorageImageArrayDynamicIndexing;
    VkBool32 shaderClipDistance;
    VkBool32 shaderCullDistance;
    VkBool32 shaderFloat64;
    VkBool32 shaderInt64;
    VkBool32 shaderInt16;
    VkBool32 shaderResourceResidency;
    VkBool32 shaderResourceMinLod;
    VkBool32 sparseBinding;
    VkBool32 sparseResidencyBuffer;
    VkBool32 sparseResidencyImage2D;
    VkBool32 sparseResidencyImage3D;
    VkBool32 sparseResidency2Samples;
    VkBool32 sparseResidency4Samples;
    VkBool32 sparseResidency8Samples;
    VkBool32 sparseResidency16Samples;
    VkBool32 sparseResidencyAliased;
    VkBool32 variableMultisampleRate;
    VkBool32 inheritedQueries;
}

struct VkPhysicalDeviceLimits
{
    uint maxImageDimension1D;
    uint maxImageDimension2D;
    uint maxImageDimension3D;
    uint maxImageDimensionCube;
    uint maxImageArrayLayers;
    uint maxTexelBufferElements;
    uint maxUniformBufferRange;
    uint maxStorageBufferRange;
    uint maxPushConstantsSize;
    uint maxMemoryAllocationCount;
    uint maxSamplerAllocationCount;
    VkDeviceSize bufferImageGranularity;
    VkDeviceSize sparseAddressSpaceSize;
    uint maxBoundDescriptorSets;
    uint maxPerStageDescriptorSamplers;
    uint maxPerStageDescriptorUniformBuffers;
    uint maxPerStageDescriptorStorageBuffers;
    uint maxPerStageDescriptorSampledImages;
    uint maxPerStageDescriptorStorageImages;
    uint maxPerStageDescriptorInputAttachments;
    uint maxPerStageResources;
    uint maxDescriptorSetSamplers;
    uint maxDescriptorSetUniformBuffers;
    uint maxDescriptorSetUniformBuffersDynamic;
    uint maxDescriptorSetStorageBuffers;
    uint maxDescriptorSetStorageBuffersDynamic;
    uint maxDescriptorSetSampledImages;
    uint maxDescriptorSetStorageImages;
    uint maxDescriptorSetInputAttachments;
    uint maxVertexInputAttributes;
    uint maxVertexInputBindings;
    uint maxVertexInputAttributeOffset;
    uint maxVertexInputBindingStride;
    uint maxVertexOutputComponents;
    uint maxTessellationGenerationLevel;
    uint maxTessellationPatchSize;
    uint maxTessellationControlPerVertexInputComponents;
    uint maxTessellationControlPerVertexOutputComponents;
    uint maxTessellationControlPerPatchOutputComponents;
    uint maxTessellationControlTotalOutputComponents;
    uint maxTessellationEvaluationInputComponents;
    uint maxTessellationEvaluationOutputComponents;
    uint maxGeometryShaderInvocations;
    uint maxGeometryInputComponents;
    uint maxGeometryOutputComponents;
    uint maxGeometryOutputVertices;
    uint maxGeometryTotalOutputComponents;
    uint maxFragmentInputComponents;
    uint maxFragmentOutputAttachments;
    uint maxFragmentDualSrcAttachments;
    uint maxFragmentCombinedOutputResources;
    uint maxComputeSharedMemorySize;
    uint[3] maxComputeWorkGroupCount;
    uint maxComputeWorkGroupInvocations;
    uint[3] maxComputeWorkGroupSize;
    uint subPixelPrecisionBits;
    uint subTexelPrecisionBits;
    uint mipmapPrecisionBits;
    uint maxDrawIndexedIndexValue;
    uint maxDrawIndirectCount;
    float maxSamplerLodBias;
    float maxSamplerAnisotropy;
    uint maxViewports;
    uint[2] maxViewportDimensions;
    float[2] viewportBoundsRange;
    uint viewportSubPixelBits;
    size_t minMemoryMapAlignment;
    VkDeviceSize minTexelBufferOffsetAlignment;
    VkDeviceSize minUniformBufferOffsetAlignment;
    VkDeviceSize minStorageBufferOffsetAlignment;
    int minTexelOffset;
    uint maxTexelOffset;
    int minTexelGatherOffset;
    uint maxTexelGatherOffset;
    float minInterpolationOffset;
    float maxInterpolationOffset;
    uint subPixelInterpolationOffsetBits;
    uint maxFramebufferWidth;
    uint maxFramebufferHeight;
    uint maxFramebufferLayers;
    VkSampleCountFlags framebufferColorSampleCounts;
    VkSampleCountFlags framebufferDepthSampleCounts;
    VkSampleCountFlags framebufferStencilSampleCounts;
    VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
    uint maxColorAttachments;
    VkSampleCountFlags sampledImageColorSampleCounts;
    VkSampleCountFlags sampledImageIntegerSampleCounts;
    VkSampleCountFlags sampledImageDepthSampleCounts;
    VkSampleCountFlags sampledImageStencilSampleCounts;
    VkSampleCountFlags storageImageSampleCounts;
    uint maxSampleMaskWords;
    VkBool32 timestampComputeAndGraphics;
    float timestampPeriod;
    uint maxClipDistances;
    uint maxCullDistances;
    uint maxCombinedClipAndCullDistances;
    uint discreteQueuePriorities;
    float[2] pointSizeRange;
    float[2] lineWidthRange;
    float pointSizeGranularity;
    float lineWidthGranularity;
    VkBool32 strictLines;
    VkBool32 standardSampleLocations;
    VkDeviceSize optimalBufferCopyOffsetAlignment;
    VkDeviceSize optimalBufferCopyRowPitchAlignment;
    VkDeviceSize nonCoherentAtomSize;
}

struct VkPhysicalDeviceMemoryProperties
{
    uint memoryTypeCount;
    VkMemoryType[VK_MAX_MEMORY_TYPES] memoryTypes;
    uint memoryHeapCount;
    VkMemoryHeap[VK_MAX_MEMORY_HEAPS] memoryHeaps;
}

struct VkPhysicalDeviceSparseProperties
{
    VkBool32 residencyStandard2DBlockShape;
    VkBool32 residencyStandard2DMultisampleBlockShape;
    VkBool32 residencyStandard3DBlockShape;
    VkBool32 residencyAlignedMipSize;
    VkBool32 residencyNonResidentStrict;
}

struct VkPhysicalDeviceProperties
{
    uint apiVersion;
    uint driverVersion;
    uint vendorID;
    uint deviceID;
    VkPhysicalDeviceType deviceType;
    char[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE] deviceName;
    ubyte[VK_UUID_SIZE] pipelineCacheUUID;
    VkPhysicalDeviceLimits limits;
    VkPhysicalDeviceSparseProperties sparseProperties;
}

struct VkQueueFamilyProperties
{
    VkQueueFlags queueFlags;
    uint queueCount;
    uint timestampValidBits;
    VkExtent3D minImageTransferGranularity;
}

struct VkDeviceQueueCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceQueueCreateFlags flags;
    uint queueFamilyIndex;
    uint queueCount;
    const(float)* pQueuePriorities;
}

struct VkDeviceCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceCreateFlags flags;
    uint queueCreateInfoCount;
    const(VkDeviceQueueCreateInfo)* pQueueCreateInfos;
    uint enabledLayerCount;
    const(char*)* ppEnabledLayerNames;
    uint enabledExtensionCount;
    const(char*)* ppEnabledExtensionNames;
    const(VkPhysicalDeviceFeatures)* pEnabledFeatures;
}

struct VkExtensionProperties
{
    char[VK_MAX_EXTENSION_NAME_SIZE] extensionName;
    uint specVersion;
}

struct VkLayerProperties
{
    char[VK_MAX_EXTENSION_NAME_SIZE] layerName;
    uint specVersion;
    uint implementationVersion;
    char[VK_MAX_DESCRIPTION_SIZE] description;
}

struct VkSubmitInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint waitSemaphoreCount;
    const(VkSemaphore)* pWaitSemaphores;
    const(VkPipelineStageFlags)* pWaitDstStageMask;
    uint commandBufferCount;
    const(VkCommandBuffer)* pCommandBuffers;
    uint signalSemaphoreCount;
    const(VkSemaphore)* pSignalSemaphores;
}

struct VkMappedMemoryRange
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceMemory memory;
    VkDeviceSize offset;
    VkDeviceSize size;
}

struct VkMemoryAllocateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceSize allocationSize;
    uint memoryTypeIndex;
}

struct VkMemoryRequirements
{
    VkDeviceSize size;
    VkDeviceSize alignment;
    uint memoryTypeBits;
}

struct VkSparseMemoryBind
{
    VkDeviceSize resourceOffset;
    VkDeviceSize size;
    VkDeviceMemory memory;
    VkDeviceSize memoryOffset;
    VkSparseMemoryBindFlags flags;
}

struct VkSparseBufferMemoryBindInfo
{
    VkBuffer buffer;
    uint bindCount;
    const(VkSparseMemoryBind)* pBinds;
}

struct VkSparseImageOpaqueMemoryBindInfo
{
    VkImage image;
    uint bindCount;
    const(VkSparseMemoryBind)* pBinds;
}

struct VkImageSubresource
{
    VkImageAspectFlags aspectMask;
    uint mipLevel;
    uint arrayLayer;
}

struct VkSparseImageMemoryBind
{
    VkImageSubresource subresource;
    VkOffset3D offset;
    VkExtent3D extent;
    VkDeviceMemory memory;
    VkDeviceSize memoryOffset;
    VkSparseMemoryBindFlags flags;
}

struct VkSparseImageMemoryBindInfo
{
    VkImage image;
    uint bindCount;
    const(VkSparseImageMemoryBind)* pBinds;
}

struct VkBindSparseInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint waitSemaphoreCount;
    const(VkSemaphore)* pWaitSemaphores;
    uint bufferBindCount;
    const(VkSparseBufferMemoryBindInfo)* pBufferBinds;
    uint imageOpaqueBindCount;
    const(VkSparseImageOpaqueMemoryBindInfo)* pImageOpaqueBinds;
    uint imageBindCount;
    const(VkSparseImageMemoryBindInfo)* pImageBinds;
    uint signalSemaphoreCount;
    const(VkSemaphore)* pSignalSemaphores;
}

struct VkSparseImageFormatProperties
{
    VkImageAspectFlags aspectMask;
    VkExtent3D imageGranularity;
    VkSparseImageFormatFlags flags;
}

struct VkSparseImageMemoryRequirements
{
    VkSparseImageFormatProperties formatProperties;
    uint imageMipTailFirstLod;
    VkDeviceSize imageMipTailSize;
    VkDeviceSize imageMipTailOffset;
    VkDeviceSize imageMipTailStride;
}

struct VkFenceCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkFenceCreateFlags flags;
}

struct VkSemaphoreCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkSemaphoreCreateFlags flags;
}

struct VkEventCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkEventCreateFlags flags;
}

struct VkQueryPoolCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkQueryPoolCreateFlags flags;
    VkQueryType queryType;
    uint queryCount;
    VkQueryPipelineStatisticFlags pipelineStatistics;
}

struct VkBufferCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkBufferCreateFlags flags;
    VkDeviceSize size;
    VkBufferUsageFlags usage;
    VkSharingMode sharingMode;
    uint queueFamilyIndexCount;
    const(uint)* pQueueFamilyIndices;
}

struct VkBufferViewCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkBufferViewCreateFlags flags;
    VkBuffer buffer;
    VkFormat format;
    VkDeviceSize offset;
    VkDeviceSize range;
}

struct VkImageCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkImageCreateFlags flags;
    VkImageType imageType;
    VkFormat format;
    VkExtent3D extent;
    uint mipLevels;
    uint arrayLayers;
    VkSampleCountFlagBits samples;
    VkImageTiling tiling;
    VkImageUsageFlags usage;
    VkSharingMode sharingMode;
    uint queueFamilyIndexCount;
    const(uint)* pQueueFamilyIndices;
    VkImageLayout initialLayout;
}

struct VkSubresourceLayout
{
    VkDeviceSize offset;
    VkDeviceSize size;
    VkDeviceSize rowPitch;
    VkDeviceSize arrayPitch;
    VkDeviceSize depthPitch;
}

struct VkComponentMapping
{
    VkComponentSwizzle r;
    VkComponentSwizzle g;
    VkComponentSwizzle b;
    VkComponentSwizzle a;
}

struct VkImageViewCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkImageViewCreateFlags flags;
    VkImage image;
    VkImageViewType viewType;
    VkFormat format;
    VkComponentMapping components;
    VkImageSubresourceRange subresourceRange;
}

struct VkShaderModuleCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkShaderModuleCreateFlags flags;
    size_t codeSize;
    const(uint)* pCode;
}

struct VkPipelineCacheCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineCacheCreateFlags flags;
    size_t initialDataSize;
    const(void)* pInitialData;
}

struct VkSpecializationMapEntry
{
    uint constantID;
    uint offset;
    size_t size;
}

struct VkSpecializationInfo
{
    uint mapEntryCount;
    const(VkSpecializationMapEntry)* pMapEntries;
    size_t dataSize;
    const(void)* pData;
}

struct VkPipelineShaderStageCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineShaderStageCreateFlags flags;
    VkShaderStageFlagBits stage;
    VkShaderModule module_;
    const(char)* pName;
    const(VkSpecializationInfo)* pSpecializationInfo;
}

struct VkComputePipelineCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineCreateFlags flags;
    VkPipelineShaderStageCreateInfo stage;
    VkPipelineLayout layout;
    VkPipeline basePipelineHandle;
    int basePipelineIndex;
}

struct VkVertexInputBindingDescription
{
    uint binding;
    uint stride;
    VkVertexInputRate inputRate;
}

struct VkVertexInputAttributeDescription
{
    uint location;
    uint binding;
    VkFormat format;
    uint offset;
}

struct VkPipelineVertexInputStateCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineVertexInputStateCreateFlags flags;
    uint vertexBindingDescriptionCount;
    const(VkVertexInputBindingDescription)* pVertexBindingDescriptions;
    uint vertexAttributeDescriptionCount;
    const(VkVertexInputAttributeDescription)* pVertexAttributeDescriptions;
}

struct VkPipelineInputAssemblyStateCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineInputAssemblyStateCreateFlags flags;
    VkPrimitiveTopology topology;
    VkBool32 primitiveRestartEnable;
}

struct VkPipelineTessellationStateCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineTessellationStateCreateFlags flags;
    uint patchControlPoints;
}

struct VkViewport
{
    float x;
    float y;
    float width;
    float height;
    float minDepth;
    float maxDepth;
}

struct VkPipelineViewportStateCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineViewportStateCreateFlags flags;
    uint viewportCount;
    const(VkViewport)* pViewports;
    uint scissorCount;
    const(VkRect2D)* pScissors;
}

struct VkPipelineRasterizationStateCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineRasterizationStateCreateFlags flags;
    VkBool32 depthClampEnable;
    VkBool32 rasterizerDiscardEnable;
    VkPolygonMode polygonMode;
    VkCullModeFlags cullMode;
    VkFrontFace frontFace;
    VkBool32 depthBiasEnable;
    float depthBiasConstantFactor;
    float depthBiasClamp;
    float depthBiasSlopeFactor;
    float lineWidth;
}

struct VkPipelineMultisampleStateCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineMultisampleStateCreateFlags flags;
    VkSampleCountFlagBits rasterizationSamples;
    VkBool32 sampleShadingEnable;
    float minSampleShading;
    const(VkSampleMask)* pSampleMask;
    VkBool32 alphaToCoverageEnable;
    VkBool32 alphaToOneEnable;
}

struct VkStencilOpState
{
    VkStencilOp failOp;
    VkStencilOp passOp;
    VkStencilOp depthFailOp;
    VkCompareOp compareOp;
    uint compareMask;
    uint writeMask;
    uint reference;
}

struct VkPipelineDepthStencilStateCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineDepthStencilStateCreateFlags flags;
    VkBool32 depthTestEnable;
    VkBool32 depthWriteEnable;
    VkCompareOp depthCompareOp;
    VkBool32 depthBoundsTestEnable;
    VkBool32 stencilTestEnable;
    VkStencilOpState front;
    VkStencilOpState back;
    float minDepthBounds;
    float maxDepthBounds;
}

struct VkPipelineColorBlendAttachmentState
{
    VkBool32 blendEnable;
    VkBlendFactor srcColorBlendFactor;
    VkBlendFactor dstColorBlendFactor;
    VkBlendOp colorBlendOp;
    VkBlendFactor srcAlphaBlendFactor;
    VkBlendFactor dstAlphaBlendFactor;
    VkBlendOp alphaBlendOp;
    VkColorComponentFlags colorWriteMask;
}

struct VkPipelineColorBlendStateCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineColorBlendStateCreateFlags flags;
    VkBool32 logicOpEnable;
    VkLogicOp logicOp;
    uint attachmentCount;
    const(VkPipelineColorBlendAttachmentState)* pAttachments;
    float[4] blendConstants;
}

struct VkPipelineDynamicStateCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineDynamicStateCreateFlags flags;
    uint dynamicStateCount;
    const(VkDynamicState)* pDynamicStates;
}

struct VkGraphicsPipelineCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineCreateFlags flags;
    uint stageCount;
    const(VkPipelineShaderStageCreateInfo)* pStages;
    const(VkPipelineVertexInputStateCreateInfo)* pVertexInputState;
    const(VkPipelineInputAssemblyStateCreateInfo)* pInputAssemblyState;
    const(VkPipelineTessellationStateCreateInfo)* pTessellationState;
    const(VkPipelineViewportStateCreateInfo)* pViewportState;
    const(VkPipelineRasterizationStateCreateInfo)* pRasterizationState;
    const(VkPipelineMultisampleStateCreateInfo)* pMultisampleState;
    const(VkPipelineDepthStencilStateCreateInfo)* pDepthStencilState;
    const(VkPipelineColorBlendStateCreateInfo)* pColorBlendState;
    const(VkPipelineDynamicStateCreateInfo)* pDynamicState;
    VkPipelineLayout layout;
    VkRenderPass renderPass;
    uint subpass;
    VkPipeline basePipelineHandle;
    int basePipelineIndex;
}

struct VkPushConstantRange
{
    VkShaderStageFlags stageFlags;
    uint offset;
    uint size;
}

struct VkPipelineLayoutCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineLayoutCreateFlags flags;
    uint setLayoutCount;
    const(VkDescriptorSetLayout)* pSetLayouts;
    uint pushConstantRangeCount;
    const(VkPushConstantRange)* pPushConstantRanges;
}

struct VkSamplerCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkSamplerCreateFlags flags;
    VkFilter magFilter;
    VkFilter minFilter;
    VkSamplerMipmapMode mipmapMode;
    VkSamplerAddressMode addressModeU;
    VkSamplerAddressMode addressModeV;
    VkSamplerAddressMode addressModeW;
    float mipLodBias;
    VkBool32 anisotropyEnable;
    float maxAnisotropy;
    VkBool32 compareEnable;
    VkCompareOp compareOp;
    float minLod;
    float maxLod;
    VkBorderColor borderColor;
    VkBool32 unnormalizedCoordinates;
}

struct VkCopyDescriptorSet
{
    VkStructureType sType;
    const(void)* pNext;
    VkDescriptorSet srcSet;
    uint srcBinding;
    uint srcArrayElement;
    VkDescriptorSet dstSet;
    uint dstBinding;
    uint dstArrayElement;
    uint descriptorCount;
}

struct VkDescriptorBufferInfo
{
    VkBuffer buffer;
    VkDeviceSize offset;
    VkDeviceSize range;
}

struct VkDescriptorImageInfo
{
    VkSampler sampler;
    VkImageView imageView;
    VkImageLayout imageLayout;
}

struct VkDescriptorPoolSize
{
    VkDescriptorType type;
    uint descriptorCount;
}

struct VkDescriptorPoolCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkDescriptorPoolCreateFlags flags;
    uint maxSets;
    uint poolSizeCount;
    const(VkDescriptorPoolSize)* pPoolSizes;
}

struct VkDescriptorSetAllocateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkDescriptorPool descriptorPool;
    uint descriptorSetCount;
    const(VkDescriptorSetLayout)* pSetLayouts;
}

struct VkDescriptorSetLayoutBinding
{
    uint binding;
    VkDescriptorType descriptorType;
    uint descriptorCount;
    VkShaderStageFlags stageFlags;
    const(VkSampler)* pImmutableSamplers;
}

struct VkDescriptorSetLayoutCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkDescriptorSetLayoutCreateFlags flags;
    uint bindingCount;
    const(VkDescriptorSetLayoutBinding)* pBindings;
}

struct VkWriteDescriptorSet
{
    VkStructureType sType;
    const(void)* pNext;
    VkDescriptorSet dstSet;
    uint dstBinding;
    uint dstArrayElement;
    uint descriptorCount;
    VkDescriptorType descriptorType;
    const(VkDescriptorImageInfo)* pImageInfo;
    const(VkDescriptorBufferInfo)* pBufferInfo;
    const(VkBufferView)* pTexelBufferView;
}

struct VkAttachmentDescription
{
    VkAttachmentDescriptionFlags flags;
    VkFormat format;
    VkSampleCountFlagBits samples;
    VkAttachmentLoadOp loadOp;
    VkAttachmentStoreOp storeOp;
    VkAttachmentLoadOp stencilLoadOp;
    VkAttachmentStoreOp stencilStoreOp;
    VkImageLayout initialLayout;
    VkImageLayout finalLayout;
}

struct VkAttachmentReference
{
    uint attachment;
    VkImageLayout layout;
}

struct VkFramebufferCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkFramebufferCreateFlags flags;
    VkRenderPass renderPass;
    uint attachmentCount;
    const(VkImageView)* pAttachments;
    uint width;
    uint height;
    uint layers;
}

struct VkSubpassDescription
{
    VkSubpassDescriptionFlags flags;
    VkPipelineBindPoint pipelineBindPoint;
    uint inputAttachmentCount;
    const(VkAttachmentReference)* pInputAttachments;
    uint colorAttachmentCount;
    const(VkAttachmentReference)* pColorAttachments;
    const(VkAttachmentReference)* pResolveAttachments;
    const(VkAttachmentReference)* pDepthStencilAttachment;
    uint preserveAttachmentCount;
    const(uint)* pPreserveAttachments;
}

struct VkSubpassDependency
{
    uint srcSubpass;
    uint dstSubpass;
    VkPipelineStageFlags srcStageMask;
    VkPipelineStageFlags dstStageMask;
    VkAccessFlags srcAccessMask;
    VkAccessFlags dstAccessMask;
    VkDependencyFlags dependencyFlags;
}

struct VkRenderPassCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkRenderPassCreateFlags flags;
    uint attachmentCount;
    const(VkAttachmentDescription)* pAttachments;
    uint subpassCount;
    const(VkSubpassDescription)* pSubpasses;
    uint dependencyCount;
    const(VkSubpassDependency)* pDependencies;
}

struct VkCommandPoolCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkCommandPoolCreateFlags flags;
    uint queueFamilyIndex;
}

struct VkCommandBufferAllocateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkCommandPool commandPool;
    VkCommandBufferLevel level;
    uint commandBufferCount;
}

struct VkCommandBufferInheritanceInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkRenderPass renderPass;
    uint subpass;
    VkFramebuffer framebuffer;
    VkBool32 occlusionQueryEnable;
    VkQueryControlFlags queryFlags;
    VkQueryPipelineStatisticFlags pipelineStatistics;
}

struct VkCommandBufferBeginInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkCommandBufferUsageFlags flags;
    const(VkCommandBufferInheritanceInfo)* pInheritanceInfo;
}

struct VkBufferCopy
{
    VkDeviceSize srcOffset;
    VkDeviceSize dstOffset;
    VkDeviceSize size;
}

struct VkImageSubresourceLayers
{
    VkImageAspectFlags aspectMask;
    uint mipLevel;
    uint baseArrayLayer;
    uint layerCount;
}

struct VkBufferImageCopy
{
    VkDeviceSize bufferOffset;
    uint bufferRowLength;
    uint bufferImageHeight;
    VkImageSubresourceLayers imageSubresource;
    VkOffset3D imageOffset;
    VkExtent3D imageExtent;
}

union VkClearColorValue
{
    float[4] float32;
    int[4] int32;
    uint[4] uint32;
}

struct VkClearDepthStencilValue
{
    float depth;
    uint stencil;
}

union VkClearValue
{
    VkClearColorValue color;
    VkClearDepthStencilValue depthStencil;
}

struct VkClearAttachment
{
    VkImageAspectFlags aspectMask;
    uint colorAttachment;
    VkClearValue clearValue;
}

struct VkClearRect
{
    VkRect2D rect;
    uint baseArrayLayer;
    uint layerCount;
}

struct VkImageBlit
{
    VkImageSubresourceLayers srcSubresource;
    VkOffset3D[2] srcOffsets;
    VkImageSubresourceLayers dstSubresource;
    VkOffset3D[2] dstOffsets;
}

struct VkImageCopy
{
    VkImageSubresourceLayers srcSubresource;
    VkOffset3D srcOffset;
    VkImageSubresourceLayers dstSubresource;
    VkOffset3D dstOffset;
    VkExtent3D extent;
}

struct VkImageResolve
{
    VkImageSubresourceLayers srcSubresource;
    VkOffset3D srcOffset;
    VkImageSubresourceLayers dstSubresource;
    VkOffset3D dstOffset;
    VkExtent3D extent;
}

struct VkRenderPassBeginInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkRenderPass renderPass;
    VkFramebuffer framebuffer;
    VkRect2D renderArea;
    uint clearValueCount;
    const(VkClearValue)* pClearValues;
}

alias PFN_vkCreateInstance = VkResult function (const(VkInstanceCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkInstance* pInstance);
alias PFN_vkDestroyInstance = void function (VkInstance instance, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkEnumeratePhysicalDevices = VkResult function (VkInstance instance, uint* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices);
alias PFN_vkGetPhysicalDeviceFeatures = void function (VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures);
alias PFN_vkGetPhysicalDeviceFormatProperties = void function (VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties);
alias PFN_vkGetPhysicalDeviceImageFormatProperties = VkResult function (VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties);
alias PFN_vkGetPhysicalDeviceProperties = void function (VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties);
alias PFN_vkGetPhysicalDeviceQueueFamilyProperties = void function (VkPhysicalDevice physicalDevice, uint* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties);
alias PFN_vkGetPhysicalDeviceMemoryProperties = void function (VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties);
alias PFN_vkGetInstanceProcAddr = void function (VkInstance instance, const(char)* pName) function (VkInstance instance, const(char)* pName);
alias PFN_vkGetDeviceProcAddr = void function (VkDevice device, const(char)* pName) function (VkDevice device, const(char)* pName);
alias PFN_vkCreateDevice = VkResult function (VkPhysicalDevice physicalDevice, const(VkDeviceCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkDevice* pDevice);
alias PFN_vkDestroyDevice = void function (VkDevice device, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkEnumerateInstanceExtensionProperties = VkResult function (const(char)* pLayerName, uint* pPropertyCount, VkExtensionProperties* pProperties);
alias PFN_vkEnumerateDeviceExtensionProperties = VkResult function (VkPhysicalDevice physicalDevice, const(char)* pLayerName, uint* pPropertyCount, VkExtensionProperties* pProperties);
alias PFN_vkEnumerateInstanceLayerProperties = VkResult function (uint* pPropertyCount, VkLayerProperties* pProperties);
alias PFN_vkEnumerateDeviceLayerProperties = VkResult function (VkPhysicalDevice physicalDevice, uint* pPropertyCount, VkLayerProperties* pProperties);
alias PFN_vkGetDeviceQueue = void function (VkDevice device, uint queueFamilyIndex, uint queueIndex, VkQueue* pQueue);
alias PFN_vkQueueSubmit = VkResult function (VkQueue queue, uint submitCount, const(VkSubmitInfo)* pSubmits, VkFence fence);
alias PFN_vkQueueWaitIdle = VkResult function (VkQueue queue);
alias PFN_vkDeviceWaitIdle = VkResult function (VkDevice device);
alias PFN_vkAllocateMemory = VkResult function (VkDevice device, const(VkMemoryAllocateInfo)* pAllocateInfo, const(VkAllocationCallbacks)* pAllocator, VkDeviceMemory* pMemory);
alias PFN_vkFreeMemory = void function (VkDevice device, VkDeviceMemory memory, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkMapMemory = VkResult function (VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData);
alias PFN_vkUnmapMemory = void function (VkDevice device, VkDeviceMemory memory);
alias PFN_vkFlushMappedMemoryRanges = VkResult function (VkDevice device, uint memoryRangeCount, const(VkMappedMemoryRange)* pMemoryRanges);
alias PFN_vkInvalidateMappedMemoryRanges = VkResult function (VkDevice device, uint memoryRangeCount, const(VkMappedMemoryRange)* pMemoryRanges);
alias PFN_vkGetDeviceMemoryCommitment = void function (VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes);
alias PFN_vkBindBufferMemory = VkResult function (VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset);
alias PFN_vkBindImageMemory = VkResult function (VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset);
alias PFN_vkGetBufferMemoryRequirements = void function (VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements);
alias PFN_vkGetImageMemoryRequirements = void function (VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements);
alias PFN_vkGetImageSparseMemoryRequirements = void function (VkDevice device, VkImage image, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements);
alias PFN_vkGetPhysicalDeviceSparseImageFormatProperties = void function (VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint* pPropertyCount, VkSparseImageFormatProperties* pProperties);
alias PFN_vkQueueBindSparse = VkResult function (VkQueue queue, uint bindInfoCount, const(VkBindSparseInfo)* pBindInfo, VkFence fence);
alias PFN_vkCreateFence = VkResult function (VkDevice device, const(VkFenceCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkFence* pFence);
alias PFN_vkDestroyFence = void function (VkDevice device, VkFence fence, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkResetFences = VkResult function (VkDevice device, uint fenceCount, const(VkFence)* pFences);
alias PFN_vkGetFenceStatus = VkResult function (VkDevice device, VkFence fence);
alias PFN_vkWaitForFences = VkResult function (VkDevice device, uint fenceCount, const(VkFence)* pFences, VkBool32 waitAll, ulong timeout);
alias PFN_vkCreateSemaphore = VkResult function (VkDevice device, const(VkSemaphoreCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkSemaphore* pSemaphore);
alias PFN_vkDestroySemaphore = void function (VkDevice device, VkSemaphore semaphore, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkCreateEvent = VkResult function (VkDevice device, const(VkEventCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkEvent* pEvent);
alias PFN_vkDestroyEvent = void function (VkDevice device, VkEvent event, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkGetEventStatus = VkResult function (VkDevice device, VkEvent event);
alias PFN_vkSetEvent = VkResult function (VkDevice device, VkEvent event);
alias PFN_vkResetEvent = VkResult function (VkDevice device, VkEvent event);
alias PFN_vkCreateQueryPool = VkResult function (VkDevice device, const(VkQueryPoolCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkQueryPool* pQueryPool);
alias PFN_vkDestroyQueryPool = void function (VkDevice device, VkQueryPool queryPool, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkGetQueryPoolResults = VkResult function (VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags);
alias PFN_vkCreateBuffer = VkResult function (VkDevice device, const(VkBufferCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkBuffer* pBuffer);
alias PFN_vkDestroyBuffer = void function (VkDevice device, VkBuffer buffer, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkCreateBufferView = VkResult function (VkDevice device, const(VkBufferViewCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkBufferView* pView);
alias PFN_vkDestroyBufferView = void function (VkDevice device, VkBufferView bufferView, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkCreateImage = VkResult function (VkDevice device, const(VkImageCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkImage* pImage);
alias PFN_vkDestroyImage = void function (VkDevice device, VkImage image, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkGetImageSubresourceLayout = void function (VkDevice device, VkImage image, const(VkImageSubresource)* pSubresource, VkSubresourceLayout* pLayout);
alias PFN_vkCreateImageView = VkResult function (VkDevice device, const(VkImageViewCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkImageView* pView);
alias PFN_vkDestroyImageView = void function (VkDevice device, VkImageView imageView, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkCreateShaderModule = VkResult function (VkDevice device, const(VkShaderModuleCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkShaderModule* pShaderModule);
alias PFN_vkDestroyShaderModule = void function (VkDevice device, VkShaderModule shaderModule, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkCreatePipelineCache = VkResult function (VkDevice device, const(VkPipelineCacheCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkPipelineCache* pPipelineCache);
alias PFN_vkDestroyPipelineCache = void function (VkDevice device, VkPipelineCache pipelineCache, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkGetPipelineCacheData = VkResult function (VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData);
alias PFN_vkMergePipelineCaches = VkResult function (VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, const(VkPipelineCache)* pSrcCaches);
alias PFN_vkCreateGraphicsPipelines = VkResult function (VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, const(VkGraphicsPipelineCreateInfo)* pCreateInfos, const(VkAllocationCallbacks)* pAllocator, VkPipeline* pPipelines);
alias PFN_vkCreateComputePipelines = VkResult function (VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, const(VkComputePipelineCreateInfo)* pCreateInfos, const(VkAllocationCallbacks)* pAllocator, VkPipeline* pPipelines);
alias PFN_vkDestroyPipeline = void function (VkDevice device, VkPipeline pipeline, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkCreatePipelineLayout = VkResult function (VkDevice device, const(VkPipelineLayoutCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkPipelineLayout* pPipelineLayout);
alias PFN_vkDestroyPipelineLayout = void function (VkDevice device, VkPipelineLayout pipelineLayout, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkCreateSampler = VkResult function (VkDevice device, const(VkSamplerCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkSampler* pSampler);
alias PFN_vkDestroySampler = void function (VkDevice device, VkSampler sampler, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkCreateDescriptorSetLayout = VkResult function (VkDevice device, const(VkDescriptorSetLayoutCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkDescriptorSetLayout* pSetLayout);
alias PFN_vkDestroyDescriptorSetLayout = void function (VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkCreateDescriptorPool = VkResult function (VkDevice device, const(VkDescriptorPoolCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkDescriptorPool* pDescriptorPool);
alias PFN_vkDestroyDescriptorPool = void function (VkDevice device, VkDescriptorPool descriptorPool, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkResetDescriptorPool = VkResult function (VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags);
alias PFN_vkAllocateDescriptorSets = VkResult function (VkDevice device, const(VkDescriptorSetAllocateInfo)* pAllocateInfo, VkDescriptorSet* pDescriptorSets);
alias PFN_vkFreeDescriptorSets = VkResult function (VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, const(VkDescriptorSet)* pDescriptorSets);
alias PFN_vkUpdateDescriptorSets = void function (VkDevice device, uint descriptorWriteCount, const(VkWriteDescriptorSet)* pDescriptorWrites, uint descriptorCopyCount, const(VkCopyDescriptorSet)* pDescriptorCopies);
alias PFN_vkCreateFramebuffer = VkResult function (VkDevice device, const(VkFramebufferCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkFramebuffer* pFramebuffer);
alias PFN_vkDestroyFramebuffer = void function (VkDevice device, VkFramebuffer framebuffer, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkCreateRenderPass = VkResult function (VkDevice device, const(VkRenderPassCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkRenderPass* pRenderPass);
alias PFN_vkDestroyRenderPass = void function (VkDevice device, VkRenderPass renderPass, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkGetRenderAreaGranularity = void function (VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity);
alias PFN_vkCreateCommandPool = VkResult function (VkDevice device, const(VkCommandPoolCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkCommandPool* pCommandPool);
alias PFN_vkDestroyCommandPool = void function (VkDevice device, VkCommandPool commandPool, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkResetCommandPool = VkResult function (VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags);
alias PFN_vkAllocateCommandBuffers = VkResult function (VkDevice device, const(VkCommandBufferAllocateInfo)* pAllocateInfo, VkCommandBuffer* pCommandBuffers);
alias PFN_vkFreeCommandBuffers = void function (VkDevice device, VkCommandPool commandPool, uint commandBufferCount, const(VkCommandBuffer)* pCommandBuffers);
alias PFN_vkBeginCommandBuffer = VkResult function (VkCommandBuffer commandBuffer, const(VkCommandBufferBeginInfo)* pBeginInfo);
alias PFN_vkEndCommandBuffer = VkResult function (VkCommandBuffer commandBuffer);
alias PFN_vkResetCommandBuffer = VkResult function (VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags);
alias PFN_vkCmdBindPipeline = void function (VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline);
alias PFN_vkCmdSetViewport = void function (VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, const(VkViewport)* pViewports);
alias PFN_vkCmdSetScissor = void function (VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, const(VkRect2D)* pScissors);
alias PFN_vkCmdSetLineWidth = void function (VkCommandBuffer commandBuffer, float lineWidth);
alias PFN_vkCmdSetDepthBias = void function (VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor);
alias PFN_vkCmdSetBlendConstants = void function (VkCommandBuffer commandBuffer, const(float)[4] blendConstants);
alias PFN_vkCmdSetDepthBounds = void function (VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds);
alias PFN_vkCmdSetStencilCompareMask = void function (VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint compareMask);
alias PFN_vkCmdSetStencilWriteMask = void function (VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint writeMask);
alias PFN_vkCmdSetStencilReference = void function (VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint reference);
alias PFN_vkCmdBindDescriptorSets = void function (VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, const(VkDescriptorSet)* pDescriptorSets, uint dynamicOffsetCount, const(uint)* pDynamicOffsets);
alias PFN_vkCmdBindIndexBuffer = void function (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType);
alias PFN_vkCmdBindVertexBuffers = void function (VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, const(VkBuffer)* pBuffers, const(VkDeviceSize)* pOffsets);
alias PFN_vkCmdDraw = void function (VkCommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance);
alias PFN_vkCmdDrawIndexed = void function (VkCommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance);
alias PFN_vkCmdDrawIndirect = void function (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride);
alias PFN_vkCmdDrawIndexedIndirect = void function (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride);
alias PFN_vkCmdDispatch = void function (VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ);
alias PFN_vkCmdDispatchIndirect = void function (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset);
alias PFN_vkCmdCopyBuffer = void function (VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, const(VkBufferCopy)* pRegions);
alias PFN_vkCmdCopyImage = void function (VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, const(VkImageCopy)* pRegions);
alias PFN_vkCmdBlitImage = void function (VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, const(VkImageBlit)* pRegions, VkFilter filter);
alias PFN_vkCmdCopyBufferToImage = void function (VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, const(VkBufferImageCopy)* pRegions);
alias PFN_vkCmdCopyImageToBuffer = void function (VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, const(VkBufferImageCopy)* pRegions);
alias PFN_vkCmdUpdateBuffer = void function (VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const(void)* pData);
alias PFN_vkCmdFillBuffer = void function (VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint data);
alias PFN_vkCmdClearColorImage = void function (VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const(VkClearColorValue)* pColor, uint rangeCount, const(VkImageSubresourceRange)* pRanges);
alias PFN_vkCmdClearDepthStencilImage = void function (VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const(VkClearDepthStencilValue)* pDepthStencil, uint rangeCount, const(VkImageSubresourceRange)* pRanges);
alias PFN_vkCmdClearAttachments = void function (VkCommandBuffer commandBuffer, uint attachmentCount, const(VkClearAttachment)* pAttachments, uint rectCount, const(VkClearRect)* pRects);
alias PFN_vkCmdResolveImage = void function (VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, const(VkImageResolve)* pRegions);
alias PFN_vkCmdSetEvent = void function (VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
alias PFN_vkCmdResetEvent = void function (VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask);
alias PFN_vkCmdWaitEvents = void function (VkCommandBuffer commandBuffer, uint eventCount, const(VkEvent)* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, const(VkMemoryBarrier)* pMemoryBarriers, uint bufferMemoryBarrierCount, const(VkBufferMemoryBarrier)* pBufferMemoryBarriers, uint imageMemoryBarrierCount, const(VkImageMemoryBarrier)* pImageMemoryBarriers);
alias PFN_vkCmdPipelineBarrier = void function (VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, const(VkMemoryBarrier)* pMemoryBarriers, uint bufferMemoryBarrierCount, const(VkBufferMemoryBarrier)* pBufferMemoryBarriers, uint imageMemoryBarrierCount, const(VkImageMemoryBarrier)* pImageMemoryBarriers);
alias PFN_vkCmdBeginQuery = void function (VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags);
alias PFN_vkCmdEndQuery = void function (VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query);
alias PFN_vkCmdResetQueryPool = void function (VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount);
alias PFN_vkCmdWriteTimestamp = void function (VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint query);
alias PFN_vkCmdCopyQueryPoolResults = void function (VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags);
alias PFN_vkCmdPushConstants = void function (VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint offset, uint size, const(void)* pValues);
alias PFN_vkCmdBeginRenderPass = void function (VkCommandBuffer commandBuffer, const(VkRenderPassBeginInfo)* pRenderPassBegin, VkSubpassContents contents);
alias PFN_vkCmdNextSubpass = void function (VkCommandBuffer commandBuffer, VkSubpassContents contents);
alias PFN_vkCmdEndRenderPass = void function (VkCommandBuffer commandBuffer);
alias PFN_vkCmdExecuteCommands = void function (VkCommandBuffer commandBuffer, uint commandBufferCount, const(VkCommandBuffer)* pCommandBuffers);

VkResult vkCreateInstance (
    const(VkInstanceCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkInstance* pInstance);

void vkDestroyInstance (
    VkInstance instance,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkEnumeratePhysicalDevices (
    VkInstance instance,
    uint* pPhysicalDeviceCount,
    VkPhysicalDevice* pPhysicalDevices);

void vkGetPhysicalDeviceFeatures (
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures* pFeatures);

void vkGetPhysicalDeviceFormatProperties (
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties* pFormatProperties);

VkResult vkGetPhysicalDeviceImageFormatProperties (
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkImageTiling tiling,
    VkImageUsageFlags usage,
    VkImageCreateFlags flags,
    VkImageFormatProperties* pImageFormatProperties);

void vkGetPhysicalDeviceProperties (
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties* pProperties);

void vkGetPhysicalDeviceQueueFamilyProperties (
    VkPhysicalDevice physicalDevice,
    uint* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties* pQueueFamilyProperties);

void vkGetPhysicalDeviceMemoryProperties (
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties* pMemoryProperties);

PFN_vkVoidFunction vkGetInstanceProcAddr (
    VkInstance instance,
    const(char)* pName);

PFN_vkVoidFunction vkGetDeviceProcAddr (VkDevice device, const(char)* pName);

VkResult vkCreateDevice (
    VkPhysicalDevice physicalDevice,
    const(VkDeviceCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkDevice* pDevice);

void vkDestroyDevice (
    VkDevice device,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkEnumerateInstanceExtensionProperties (
    const(char)* pLayerName,
    uint* pPropertyCount,
    VkExtensionProperties* pProperties);

VkResult vkEnumerateDeviceExtensionProperties (
    VkPhysicalDevice physicalDevice,
    const(char)* pLayerName,
    uint* pPropertyCount,
    VkExtensionProperties* pProperties);

VkResult vkEnumerateInstanceLayerProperties (
    uint* pPropertyCount,
    VkLayerProperties* pProperties);

VkResult vkEnumerateDeviceLayerProperties (
    VkPhysicalDevice physicalDevice,
    uint* pPropertyCount,
    VkLayerProperties* pProperties);

void vkGetDeviceQueue (
    VkDevice device,
    uint queueFamilyIndex,
    uint queueIndex,
    VkQueue* pQueue);

VkResult vkQueueSubmit (
    VkQueue queue,
    uint submitCount,
    const(VkSubmitInfo)* pSubmits,
    VkFence fence);

VkResult vkQueueWaitIdle (VkQueue queue);

VkResult vkDeviceWaitIdle (VkDevice device);

VkResult vkAllocateMemory (
    VkDevice device,
    const(VkMemoryAllocateInfo)* pAllocateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkDeviceMemory* pMemory);

void vkFreeMemory (
    VkDevice device,
    VkDeviceMemory memory,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkMapMemory (
    VkDevice device,
    VkDeviceMemory memory,
    VkDeviceSize offset,
    VkDeviceSize size,
    VkMemoryMapFlags flags,
    void** ppData);

void vkUnmapMemory (VkDevice device, VkDeviceMemory memory);

VkResult vkFlushMappedMemoryRanges (
    VkDevice device,
    uint memoryRangeCount,
    const(VkMappedMemoryRange)* pMemoryRanges);

VkResult vkInvalidateMappedMemoryRanges (
    VkDevice device,
    uint memoryRangeCount,
    const(VkMappedMemoryRange)* pMemoryRanges);

void vkGetDeviceMemoryCommitment (
    VkDevice device,
    VkDeviceMemory memory,
    VkDeviceSize* pCommittedMemoryInBytes);

VkResult vkBindBufferMemory (
    VkDevice device,
    VkBuffer buffer,
    VkDeviceMemory memory,
    VkDeviceSize memoryOffset);

VkResult vkBindImageMemory (
    VkDevice device,
    VkImage image,
    VkDeviceMemory memory,
    VkDeviceSize memoryOffset);

void vkGetBufferMemoryRequirements (
    VkDevice device,
    VkBuffer buffer,
    VkMemoryRequirements* pMemoryRequirements);

void vkGetImageMemoryRequirements (
    VkDevice device,
    VkImage image,
    VkMemoryRequirements* pMemoryRequirements);

void vkGetImageSparseMemoryRequirements (
    VkDevice device,
    VkImage image,
    uint* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements* pSparseMemoryRequirements);

void vkGetPhysicalDeviceSparseImageFormatProperties (
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkSampleCountFlagBits samples,
    VkImageUsageFlags usage,
    VkImageTiling tiling,
    uint* pPropertyCount,
    VkSparseImageFormatProperties* pProperties);

VkResult vkQueueBindSparse (
    VkQueue queue,
    uint bindInfoCount,
    const(VkBindSparseInfo)* pBindInfo,
    VkFence fence);

VkResult vkCreateFence (
    VkDevice device,
    const(VkFenceCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkFence* pFence);

void vkDestroyFence (
    VkDevice device,
    VkFence fence,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkResetFences (
    VkDevice device,
    uint fenceCount,
    const(VkFence)* pFences);

VkResult vkGetFenceStatus (VkDevice device, VkFence fence);

VkResult vkWaitForFences (
    VkDevice device,
    uint fenceCount,
    const(VkFence)* pFences,
    VkBool32 waitAll,
    ulong timeout);

VkResult vkCreateSemaphore (
    VkDevice device,
    const(VkSemaphoreCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkSemaphore* pSemaphore);

void vkDestroySemaphore (
    VkDevice device,
    VkSemaphore semaphore,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkCreateEvent (
    VkDevice device,
    const(VkEventCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkEvent* pEvent);

void vkDestroyEvent (
    VkDevice device,
    VkEvent event,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkGetEventStatus (VkDevice device, VkEvent event);

VkResult vkSetEvent (VkDevice device, VkEvent event);

VkResult vkResetEvent (VkDevice device, VkEvent event);

VkResult vkCreateQueryPool (
    VkDevice device,
    const(VkQueryPoolCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkQueryPool* pQueryPool);

void vkDestroyQueryPool (
    VkDevice device,
    VkQueryPool queryPool,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkGetQueryPoolResults (
    VkDevice device,
    VkQueryPool queryPool,
    uint firstQuery,
    uint queryCount,
    size_t dataSize,
    void* pData,
    VkDeviceSize stride,
    VkQueryResultFlags flags);

VkResult vkCreateBuffer (
    VkDevice device,
    const(VkBufferCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkBuffer* pBuffer);

void vkDestroyBuffer (
    VkDevice device,
    VkBuffer buffer,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkCreateBufferView (
    VkDevice device,
    const(VkBufferViewCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkBufferView* pView);

void vkDestroyBufferView (
    VkDevice device,
    VkBufferView bufferView,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkCreateImage (
    VkDevice device,
    const(VkImageCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkImage* pImage);

void vkDestroyImage (
    VkDevice device,
    VkImage image,
    const(VkAllocationCallbacks)* pAllocator);

void vkGetImageSubresourceLayout (
    VkDevice device,
    VkImage image,
    const(VkImageSubresource)* pSubresource,
    VkSubresourceLayout* pLayout);

VkResult vkCreateImageView (
    VkDevice device,
    const(VkImageViewCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkImageView* pView);

void vkDestroyImageView (
    VkDevice device,
    VkImageView imageView,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkCreateShaderModule (
    VkDevice device,
    const(VkShaderModuleCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkShaderModule* pShaderModule);

void vkDestroyShaderModule (
    VkDevice device,
    VkShaderModule shaderModule,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkCreatePipelineCache (
    VkDevice device,
    const(VkPipelineCacheCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkPipelineCache* pPipelineCache);

void vkDestroyPipelineCache (
    VkDevice device,
    VkPipelineCache pipelineCache,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkGetPipelineCacheData (
    VkDevice device,
    VkPipelineCache pipelineCache,
    size_t* pDataSize,
    void* pData);

VkResult vkMergePipelineCaches (
    VkDevice device,
    VkPipelineCache dstCache,
    uint srcCacheCount,
    const(VkPipelineCache)* pSrcCaches);

VkResult vkCreateGraphicsPipelines (
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint createInfoCount,
    const(VkGraphicsPipelineCreateInfo)* pCreateInfos,
    const(VkAllocationCallbacks)* pAllocator,
    VkPipeline* pPipelines);

VkResult vkCreateComputePipelines (
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint createInfoCount,
    const(VkComputePipelineCreateInfo)* pCreateInfos,
    const(VkAllocationCallbacks)* pAllocator,
    VkPipeline* pPipelines);

void vkDestroyPipeline (
    VkDevice device,
    VkPipeline pipeline,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkCreatePipelineLayout (
    VkDevice device,
    const(VkPipelineLayoutCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkPipelineLayout* pPipelineLayout);

void vkDestroyPipelineLayout (
    VkDevice device,
    VkPipelineLayout pipelineLayout,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkCreateSampler (
    VkDevice device,
    const(VkSamplerCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkSampler* pSampler);

void vkDestroySampler (
    VkDevice device,
    VkSampler sampler,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkCreateDescriptorSetLayout (
    VkDevice device,
    const(VkDescriptorSetLayoutCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkDescriptorSetLayout* pSetLayout);

void vkDestroyDescriptorSetLayout (
    VkDevice device,
    VkDescriptorSetLayout descriptorSetLayout,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkCreateDescriptorPool (
    VkDevice device,
    const(VkDescriptorPoolCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkDescriptorPool* pDescriptorPool);

void vkDestroyDescriptorPool (
    VkDevice device,
    VkDescriptorPool descriptorPool,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkResetDescriptorPool (
    VkDevice device,
    VkDescriptorPool descriptorPool,
    VkDescriptorPoolResetFlags flags);

VkResult vkAllocateDescriptorSets (
    VkDevice device,
    const(VkDescriptorSetAllocateInfo)* pAllocateInfo,
    VkDescriptorSet* pDescriptorSets);

VkResult vkFreeDescriptorSets (
    VkDevice device,
    VkDescriptorPool descriptorPool,
    uint descriptorSetCount,
    const(VkDescriptorSet)* pDescriptorSets);

void vkUpdateDescriptorSets (
    VkDevice device,
    uint descriptorWriteCount,
    const(VkWriteDescriptorSet)* pDescriptorWrites,
    uint descriptorCopyCount,
    const(VkCopyDescriptorSet)* pDescriptorCopies);

VkResult vkCreateFramebuffer (
    VkDevice device,
    const(VkFramebufferCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkFramebuffer* pFramebuffer);

void vkDestroyFramebuffer (
    VkDevice device,
    VkFramebuffer framebuffer,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkCreateRenderPass (
    VkDevice device,
    const(VkRenderPassCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkRenderPass* pRenderPass);

void vkDestroyRenderPass (
    VkDevice device,
    VkRenderPass renderPass,
    const(VkAllocationCallbacks)* pAllocator);

void vkGetRenderAreaGranularity (
    VkDevice device,
    VkRenderPass renderPass,
    VkExtent2D* pGranularity);

VkResult vkCreateCommandPool (
    VkDevice device,
    const(VkCommandPoolCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkCommandPool* pCommandPool);

void vkDestroyCommandPool (
    VkDevice device,
    VkCommandPool commandPool,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkResetCommandPool (
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolResetFlags flags);

VkResult vkAllocateCommandBuffers (
    VkDevice device,
    const(VkCommandBufferAllocateInfo)* pAllocateInfo,
    VkCommandBuffer* pCommandBuffers);

void vkFreeCommandBuffers (
    VkDevice device,
    VkCommandPool commandPool,
    uint commandBufferCount,
    const(VkCommandBuffer)* pCommandBuffers);

VkResult vkBeginCommandBuffer (
    VkCommandBuffer commandBuffer,
    const(VkCommandBufferBeginInfo)* pBeginInfo);

VkResult vkEndCommandBuffer (VkCommandBuffer commandBuffer);

VkResult vkResetCommandBuffer (
    VkCommandBuffer commandBuffer,
    VkCommandBufferResetFlags flags);

void vkCmdBindPipeline (
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipeline pipeline);

void vkCmdSetViewport (
    VkCommandBuffer commandBuffer,
    uint firstViewport,
    uint viewportCount,
    const(VkViewport)* pViewports);

void vkCmdSetScissor (
    VkCommandBuffer commandBuffer,
    uint firstScissor,
    uint scissorCount,
    const(VkRect2D)* pScissors);

void vkCmdSetLineWidth (VkCommandBuffer commandBuffer, float lineWidth);

void vkCmdSetDepthBias (
    VkCommandBuffer commandBuffer,
    float depthBiasConstantFactor,
    float depthBiasClamp,
    float depthBiasSlopeFactor);

void vkCmdSetBlendConstants (
    VkCommandBuffer commandBuffer,
    ref const(float)[4] blendConstants);

void vkCmdSetDepthBounds (
    VkCommandBuffer commandBuffer,
    float minDepthBounds,
    float maxDepthBounds);

void vkCmdSetStencilCompareMask (
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint compareMask);

void vkCmdSetStencilWriteMask (
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint writeMask);

void vkCmdSetStencilReference (
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint reference);

void vkCmdBindDescriptorSets (
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipelineLayout layout,
    uint firstSet,
    uint descriptorSetCount,
    const(VkDescriptorSet)* pDescriptorSets,
    uint dynamicOffsetCount,
    const(uint)* pDynamicOffsets);

void vkCmdBindIndexBuffer (
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkIndexType indexType);

void vkCmdBindVertexBuffers (
    VkCommandBuffer commandBuffer,
    uint firstBinding,
    uint bindingCount,
    const(VkBuffer)* pBuffers,
    const(VkDeviceSize)* pOffsets);

void vkCmdDraw (
    VkCommandBuffer commandBuffer,
    uint vertexCount,
    uint instanceCount,
    uint firstVertex,
    uint firstInstance);

void vkCmdDrawIndexed (
    VkCommandBuffer commandBuffer,
    uint indexCount,
    uint instanceCount,
    uint firstIndex,
    int vertexOffset,
    uint firstInstance);

void vkCmdDrawIndirect (
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint drawCount,
    uint stride);

void vkCmdDrawIndexedIndirect (
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint drawCount,
    uint stride);

void vkCmdDispatch (
    VkCommandBuffer commandBuffer,
    uint groupCountX,
    uint groupCountY,
    uint groupCountZ);

void vkCmdDispatchIndirect (
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset);

void vkCmdCopyBuffer (
    VkCommandBuffer commandBuffer,
    VkBuffer srcBuffer,
    VkBuffer dstBuffer,
    uint regionCount,
    const(VkBufferCopy)* pRegions);

void vkCmdCopyImage (
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint regionCount,
    const(VkImageCopy)* pRegions);

void vkCmdBlitImage (
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint regionCount,
    const(VkImageBlit)* pRegions,
    VkFilter filter);

void vkCmdCopyBufferToImage (
    VkCommandBuffer commandBuffer,
    VkBuffer srcBuffer,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint regionCount,
    const(VkBufferImageCopy)* pRegions);

void vkCmdCopyImageToBuffer (
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkBuffer dstBuffer,
    uint regionCount,
    const(VkBufferImageCopy)* pRegions);

void vkCmdUpdateBuffer (
    VkCommandBuffer commandBuffer,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize dataSize,
    const(void)* pData);

void vkCmdFillBuffer (
    VkCommandBuffer commandBuffer,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize size,
    uint data);

void vkCmdClearColorImage (
    VkCommandBuffer commandBuffer,
    VkImage image,
    VkImageLayout imageLayout,
    const(VkClearColorValue)* pColor,
    uint rangeCount,
    const(VkImageSubresourceRange)* pRanges);

void vkCmdClearDepthStencilImage (
    VkCommandBuffer commandBuffer,
    VkImage image,
    VkImageLayout imageLayout,
    const(VkClearDepthStencilValue)* pDepthStencil,
    uint rangeCount,
    const(VkImageSubresourceRange)* pRanges);

void vkCmdClearAttachments (
    VkCommandBuffer commandBuffer,
    uint attachmentCount,
    const(VkClearAttachment)* pAttachments,
    uint rectCount,
    const(VkClearRect)* pRects);

void vkCmdResolveImage (
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint regionCount,
    const(VkImageResolve)* pRegions);

void vkCmdSetEvent (
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags stageMask);

void vkCmdResetEvent (
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags stageMask);

void vkCmdWaitEvents (
    VkCommandBuffer commandBuffer,
    uint eventCount,
    const(VkEvent)* pEvents,
    VkPipelineStageFlags srcStageMask,
    VkPipelineStageFlags dstStageMask,
    uint memoryBarrierCount,
    const(VkMemoryBarrier)* pMemoryBarriers,
    uint bufferMemoryBarrierCount,
    const(VkBufferMemoryBarrier)* pBufferMemoryBarriers,
    uint imageMemoryBarrierCount,
    const(VkImageMemoryBarrier)* pImageMemoryBarriers);

void vkCmdPipelineBarrier (
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlags srcStageMask,
    VkPipelineStageFlags dstStageMask,
    VkDependencyFlags dependencyFlags,
    uint memoryBarrierCount,
    const(VkMemoryBarrier)* pMemoryBarriers,
    uint bufferMemoryBarrierCount,
    const(VkBufferMemoryBarrier)* pBufferMemoryBarriers,
    uint imageMemoryBarrierCount,
    const(VkImageMemoryBarrier)* pImageMemoryBarriers);

void vkCmdBeginQuery (
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint query,
    VkQueryControlFlags flags);

void vkCmdEndQuery (
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint query);

void vkCmdResetQueryPool (
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint firstQuery,
    uint queryCount);

void vkCmdWriteTimestamp (
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlagBits pipelineStage,
    VkQueryPool queryPool,
    uint query);

void vkCmdCopyQueryPoolResults (
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint firstQuery,
    uint queryCount,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize stride,
    VkQueryResultFlags flags);

void vkCmdPushConstants (
    VkCommandBuffer commandBuffer,
    VkPipelineLayout layout,
    VkShaderStageFlags stageFlags,
    uint offset,
    uint size,
    const(void)* pValues);

void vkCmdBeginRenderPass (
    VkCommandBuffer commandBuffer,
    const(VkRenderPassBeginInfo)* pRenderPassBegin,
    VkSubpassContents contents);

void vkCmdNextSubpass (
    VkCommandBuffer commandBuffer,
    VkSubpassContents contents);

void vkCmdEndRenderPass (VkCommandBuffer commandBuffer);

void vkCmdExecuteCommands (
    VkCommandBuffer commandBuffer,
    uint commandBufferCount,
    const(VkCommandBuffer)* pCommandBuffers);

enum VK_VERSION_1_1 = 1;
// Vulkan 1.1 version number
enum VK_API_VERSION_1_1 = VK_MAKE_API_VERSION(0, 1, 1, 0); // Patch version should always be set to 0

struct VkSamplerYcbcrConversion_T;
alias VkSamplerYcbcrConversion = VkSamplerYcbcrConversion_T*;
struct VkDescriptorUpdateTemplate_T;
alias VkDescriptorUpdateTemplate = VkDescriptorUpdateTemplate_T*;
enum VK_MAX_DEVICE_GROUP_SIZE = 32U;
enum VK_LUID_SIZE = 8U;
enum VK_QUEUE_FAMILY_EXTERNAL = ~1U;

enum VkPointClippingBehavior
{
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1,
    VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR = VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES,
    VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR = VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY,
    VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM = 0x7FFFFFFF
}

enum VkTessellationDomainOrigin
{
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1,
    VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT,
    VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR = VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT,
    VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM = 0x7FFFFFFF
}

enum VkSamplerYcbcrModelConversion
{
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR = VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020,
    VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM = 0x7FFFFFFF
}

enum VkSamplerYcbcrRange
{
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1,
    VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_FULL,
    VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR = VK_SAMPLER_YCBCR_RANGE_ITU_NARROW,
    VK_SAMPLER_YCBCR_RANGE_MAX_ENUM = 0x7FFFFFFF
}

enum VkChromaLocation
{
    VK_CHROMA_LOCATION_COSITED_EVEN = 0,
    VK_CHROMA_LOCATION_MIDPOINT = 1,
    VK_CHROMA_LOCATION_COSITED_EVEN_KHR = VK_CHROMA_LOCATION_COSITED_EVEN,
    VK_CHROMA_LOCATION_MIDPOINT_KHR = VK_CHROMA_LOCATION_MIDPOINT,
    VK_CHROMA_LOCATION_MAX_ENUM = 0x7FFFFFFF
}

enum VkDescriptorUpdateTemplateType
{
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR = 1,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR = VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET,
    VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM = 0x7FFFFFFF
}

enum VkSubgroupFeatureFlagBits
{
    VK_SUBGROUP_FEATURE_BASIC_BIT = 0x00000001,
    VK_SUBGROUP_FEATURE_VOTE_BIT = 0x00000002,
    VK_SUBGROUP_FEATURE_ARITHMETIC_BIT = 0x00000004,
    VK_SUBGROUP_FEATURE_BALLOT_BIT = 0x00000008,
    VK_SUBGROUP_FEATURE_SHUFFLE_BIT = 0x00000010,
    VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT = 0x00000020,
    VK_SUBGROUP_FEATURE_CLUSTERED_BIT = 0x00000040,
    VK_SUBGROUP_FEATURE_QUAD_BIT = 0x00000080,
    VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100,
    VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkSubgroupFeatureFlags = uint;

enum VkPeerMemoryFeatureFlagBits
{
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT = 0x00000001,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT = 0x00000002,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT = 0x00000004,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT = 0x00000008,
    VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT,
    VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_COPY_DST_BIT,
    VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT,
    VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR = VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT,
    VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkPeerMemoryFeatureFlags = uint;

enum VkMemoryAllocateFlagBits
{
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT = 0x00000001,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT = 0x00000002,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT = 0x00000004,
    VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT,
    VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT,
    VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkMemoryAllocateFlags = uint;
alias VkCommandPoolTrimFlags = uint;
alias VkDescriptorUpdateTemplateCreateFlags = uint;

enum VkExternalMemoryHandleTypeFlagBits
{
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT = 0x00000008,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT = 0x00000010,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT = 0x00000020,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT = 0x00000040,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT = 0x00000200,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID = 0x00000400,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT = 0x00000080,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT = 0x00000100,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA = 0x00000800,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV = 0x00001000,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR = VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkExternalMemoryHandleTypeFlags = uint;

enum VkExternalMemoryFeatureFlagBits
{
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT = 0x00000001,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT = 0x00000002,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT = 0x00000004,
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkExternalMemoryFeatureFlags = uint;

enum VkExternalFenceHandleTypeFlagBits
{
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000008,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT,
    VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkExternalFenceHandleTypeFlags = uint;

enum VkExternalFenceFeatureFlagBits
{
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT = 0x00000001,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT = 0x00000002,
    VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkExternalFenceFeatureFlags = uint;

enum VkFenceImportFlagBits
{
    VK_FENCE_IMPORT_TEMPORARY_BIT = 0x00000001,
    VK_FENCE_IMPORT_TEMPORARY_BIT_KHR = VK_FENCE_IMPORT_TEMPORARY_BIT,
    VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkFenceImportFlags = uint;

enum VkSemaphoreImportFlagBits
{
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT = 0x00000001,
    VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR = VK_SEMAPHORE_IMPORT_TEMPORARY_BIT,
    VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkSemaphoreImportFlags = uint;

enum VkExternalSemaphoreHandleTypeFlagBits
{
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT = 0x00000001,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT = 0x00000002,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT = 0x00000004,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT = 0x00000008,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT = 0x00000010,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA = 0x00000080,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR = VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT,
    VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkExternalSemaphoreHandleTypeFlags = uint;

enum VkExternalSemaphoreFeatureFlagBits
{
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT = 0x00000001,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT = 0x00000002,
    VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT,
    VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR = VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT,
    VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkExternalSemaphoreFeatureFlags = uint;

struct VkPhysicalDeviceSubgroupProperties
{
    VkStructureType sType;
    void* pNext;
    uint subgroupSize;
    VkShaderStageFlags supportedStages;
    VkSubgroupFeatureFlags supportedOperations;
    VkBool32 quadOperationsInAllStages;
}

struct VkBindBufferMemoryInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkBuffer buffer;
    VkDeviceMemory memory;
    VkDeviceSize memoryOffset;
}

struct VkBindImageMemoryInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkImage image;
    VkDeviceMemory memory;
    VkDeviceSize memoryOffset;
}

struct VkPhysicalDevice16BitStorageFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 storageBuffer16BitAccess;
    VkBool32 uniformAndStorageBuffer16BitAccess;
    VkBool32 storagePushConstant16;
    VkBool32 storageInputOutput16;
}

struct VkMemoryDedicatedRequirements
{
    VkStructureType sType;
    void* pNext;
    VkBool32 prefersDedicatedAllocation;
    VkBool32 requiresDedicatedAllocation;
}

struct VkMemoryDedicatedAllocateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkImage image;
    VkBuffer buffer;
}

struct VkMemoryAllocateFlagsInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkMemoryAllocateFlags flags;
    uint deviceMask;
}

struct VkDeviceGroupRenderPassBeginInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint deviceMask;
    uint deviceRenderAreaCount;
    const(VkRect2D)* pDeviceRenderAreas;
}

struct VkDeviceGroupCommandBufferBeginInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint deviceMask;
}

struct VkDeviceGroupSubmitInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint waitSemaphoreCount;
    const(uint)* pWaitSemaphoreDeviceIndices;
    uint commandBufferCount;
    const(uint)* pCommandBufferDeviceMasks;
    uint signalSemaphoreCount;
    const(uint)* pSignalSemaphoreDeviceIndices;
}

struct VkDeviceGroupBindSparseInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint resourceDeviceIndex;
    uint memoryDeviceIndex;
}

struct VkBindBufferMemoryDeviceGroupInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint deviceIndexCount;
    const(uint)* pDeviceIndices;
}

struct VkBindImageMemoryDeviceGroupInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint deviceIndexCount;
    const(uint)* pDeviceIndices;
    uint splitInstanceBindRegionCount;
    const(VkRect2D)* pSplitInstanceBindRegions;
}

struct VkPhysicalDeviceGroupProperties
{
    VkStructureType sType;
    void* pNext;
    uint physicalDeviceCount;
    VkPhysicalDevice[VK_MAX_DEVICE_GROUP_SIZE] physicalDevices;
    VkBool32 subsetAllocation;
}

struct VkDeviceGroupDeviceCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint physicalDeviceCount;
    const(VkPhysicalDevice)* pPhysicalDevices;
}

struct VkBufferMemoryRequirementsInfo2
{
    VkStructureType sType;
    const(void)* pNext;
    VkBuffer buffer;
}

struct VkImageMemoryRequirementsInfo2
{
    VkStructureType sType;
    const(void)* pNext;
    VkImage image;
}

struct VkImageSparseMemoryRequirementsInfo2
{
    VkStructureType sType;
    const(void)* pNext;
    VkImage image;
}

struct VkMemoryRequirements2
{
    VkStructureType sType;
    void* pNext;
    VkMemoryRequirements memoryRequirements;
}

struct VkSparseImageMemoryRequirements2
{
    VkStructureType sType;
    void* pNext;
    VkSparseImageMemoryRequirements memoryRequirements;
}

struct VkPhysicalDeviceFeatures2
{
    VkStructureType sType;
    void* pNext;
    VkPhysicalDeviceFeatures features;
}

struct VkPhysicalDeviceProperties2
{
    VkStructureType sType;
    void* pNext;
    VkPhysicalDeviceProperties properties;
}

struct VkFormatProperties2
{
    VkStructureType sType;
    void* pNext;
    VkFormatProperties formatProperties;
}

struct VkImageFormatProperties2
{
    VkStructureType sType;
    void* pNext;
    VkImageFormatProperties imageFormatProperties;
}

struct VkPhysicalDeviceImageFormatInfo2
{
    VkStructureType sType;
    const(void)* pNext;
    VkFormat format;
    VkImageType type;
    VkImageTiling tiling;
    VkImageUsageFlags usage;
    VkImageCreateFlags flags;
}

struct VkQueueFamilyProperties2
{
    VkStructureType sType;
    void* pNext;
    VkQueueFamilyProperties queueFamilyProperties;
}

struct VkPhysicalDeviceMemoryProperties2
{
    VkStructureType sType;
    void* pNext;
    VkPhysicalDeviceMemoryProperties memoryProperties;
}

struct VkSparseImageFormatProperties2
{
    VkStructureType sType;
    void* pNext;
    VkSparseImageFormatProperties properties;
}

struct VkPhysicalDeviceSparseImageFormatInfo2
{
    VkStructureType sType;
    const(void)* pNext;
    VkFormat format;
    VkImageType type;
    VkSampleCountFlagBits samples;
    VkImageUsageFlags usage;
    VkImageTiling tiling;
}

struct VkPhysicalDevicePointClippingProperties
{
    VkStructureType sType;
    void* pNext;
    VkPointClippingBehavior pointClippingBehavior;
}

struct VkInputAttachmentAspectReference
{
    uint subpass;
    uint inputAttachmentIndex;
    VkImageAspectFlags aspectMask;
}

struct VkRenderPassInputAttachmentAspectCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint aspectReferenceCount;
    const(VkInputAttachmentAspectReference)* pAspectReferences;
}

struct VkImageViewUsageCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkImageUsageFlags usage;
}

struct VkPipelineTessellationDomainOriginStateCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkTessellationDomainOrigin domainOrigin;
}

struct VkRenderPassMultiviewCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint subpassCount;
    const(uint)* pViewMasks;
    uint dependencyCount;
    const(int)* pViewOffsets;
    uint correlationMaskCount;
    const(uint)* pCorrelationMasks;
}

struct VkPhysicalDeviceMultiviewFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 multiview;
    VkBool32 multiviewGeometryShader;
    VkBool32 multiviewTessellationShader;
}

struct VkPhysicalDeviceMultiviewProperties
{
    VkStructureType sType;
    void* pNext;
    uint maxMultiviewViewCount;
    uint maxMultiviewInstanceIndex;
}

struct VkPhysicalDeviceVariablePointersFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 variablePointersStorageBuffer;
    VkBool32 variablePointers;
}

alias VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures;

struct VkPhysicalDeviceProtectedMemoryFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 protectedMemory;
}

struct VkPhysicalDeviceProtectedMemoryProperties
{
    VkStructureType sType;
    void* pNext;
    VkBool32 protectedNoFault;
}

struct VkDeviceQueueInfo2
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceQueueCreateFlags flags;
    uint queueFamilyIndex;
    uint queueIndex;
}

struct VkProtectedSubmitInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkBool32 protectedSubmit;
}

struct VkSamplerYcbcrConversionCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkFormat format;
    VkSamplerYcbcrModelConversion ycbcrModel;
    VkSamplerYcbcrRange ycbcrRange;
    VkComponentMapping components;
    VkChromaLocation xChromaOffset;
    VkChromaLocation yChromaOffset;
    VkFilter chromaFilter;
    VkBool32 forceExplicitReconstruction;
}

struct VkSamplerYcbcrConversionInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkSamplerYcbcrConversion conversion;
}

struct VkBindImagePlaneMemoryInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkImageAspectFlagBits planeAspect;
}

struct VkImagePlaneMemoryRequirementsInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkImageAspectFlagBits planeAspect;
}

struct VkPhysicalDeviceSamplerYcbcrConversionFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 samplerYcbcrConversion;
}

struct VkSamplerYcbcrConversionImageFormatProperties
{
    VkStructureType sType;
    void* pNext;
    uint combinedImageSamplerDescriptorCount;
}

struct VkDescriptorUpdateTemplateEntry
{
    uint dstBinding;
    uint dstArrayElement;
    uint descriptorCount;
    VkDescriptorType descriptorType;
    size_t offset;
    size_t stride;
}

struct VkDescriptorUpdateTemplateCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkDescriptorUpdateTemplateCreateFlags flags;
    uint descriptorUpdateEntryCount;
    const(VkDescriptorUpdateTemplateEntry)* pDescriptorUpdateEntries;
    VkDescriptorUpdateTemplateType templateType;
    VkDescriptorSetLayout descriptorSetLayout;
    VkPipelineBindPoint pipelineBindPoint;
    VkPipelineLayout pipelineLayout;
    uint set;
}

struct VkExternalMemoryProperties
{
    VkExternalMemoryFeatureFlags externalMemoryFeatures;
    VkExternalMemoryHandleTypeFlags exportFromImportedHandleTypes;
    VkExternalMemoryHandleTypeFlags compatibleHandleTypes;
}

struct VkPhysicalDeviceExternalImageFormatInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkExternalMemoryHandleTypeFlagBits handleType;
}

struct VkExternalImageFormatProperties
{
    VkStructureType sType;
    void* pNext;
    VkExternalMemoryProperties externalMemoryProperties;
}

struct VkPhysicalDeviceExternalBufferInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkBufferCreateFlags flags;
    VkBufferUsageFlags usage;
    VkExternalMemoryHandleTypeFlagBits handleType;
}

struct VkExternalBufferProperties
{
    VkStructureType sType;
    void* pNext;
    VkExternalMemoryProperties externalMemoryProperties;
}

struct VkPhysicalDeviceIDProperties
{
    VkStructureType sType;
    void* pNext;
    ubyte[VK_UUID_SIZE] deviceUUID;
    ubyte[VK_UUID_SIZE] driverUUID;
    ubyte[VK_LUID_SIZE] deviceLUID;
    uint deviceNodeMask;
    VkBool32 deviceLUIDValid;
}

struct VkExternalMemoryImageCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkExternalMemoryHandleTypeFlags handleTypes;
}

struct VkExternalMemoryBufferCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkExternalMemoryHandleTypeFlags handleTypes;
}

struct VkExportMemoryAllocateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkExternalMemoryHandleTypeFlags handleTypes;
}

struct VkPhysicalDeviceExternalFenceInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkExternalFenceHandleTypeFlagBits handleType;
}

struct VkExternalFenceProperties
{
    VkStructureType sType;
    void* pNext;
    VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes;
    VkExternalFenceHandleTypeFlags compatibleHandleTypes;
    VkExternalFenceFeatureFlags externalFenceFeatures;
}

struct VkExportFenceCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkExternalFenceHandleTypeFlags handleTypes;
}

struct VkExportSemaphoreCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkExternalSemaphoreHandleTypeFlags handleTypes;
}

struct VkPhysicalDeviceExternalSemaphoreInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkExternalSemaphoreHandleTypeFlagBits handleType;
}

struct VkExternalSemaphoreProperties
{
    VkStructureType sType;
    void* pNext;
    VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes;
    VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes;
    VkExternalSemaphoreFeatureFlags externalSemaphoreFeatures;
}

struct VkPhysicalDeviceMaintenance3Properties
{
    VkStructureType sType;
    void* pNext;
    uint maxPerSetDescriptors;
    VkDeviceSize maxMemoryAllocationSize;
}

struct VkDescriptorSetLayoutSupport
{
    VkStructureType sType;
    void* pNext;
    VkBool32 supported;
}

struct VkPhysicalDeviceShaderDrawParametersFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 shaderDrawParameters;
}

alias VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures;

alias PFN_vkEnumerateInstanceVersion = VkResult function (uint* pApiVersion);
alias PFN_vkBindBufferMemory2 = VkResult function (VkDevice device, uint bindInfoCount, const(VkBindBufferMemoryInfo)* pBindInfos);
alias PFN_vkBindImageMemory2 = VkResult function (VkDevice device, uint bindInfoCount, const(VkBindImageMemoryInfo)* pBindInfos);
alias PFN_vkGetDeviceGroupPeerMemoryFeatures = void function (VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures);
alias PFN_vkCmdSetDeviceMask = void function (VkCommandBuffer commandBuffer, uint deviceMask);
alias PFN_vkCmdDispatchBase = void function (VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ);
alias PFN_vkEnumeratePhysicalDeviceGroups = VkResult function (VkInstance instance, uint* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);
alias PFN_vkGetImageMemoryRequirements2 = void function (VkDevice device, const(VkImageMemoryRequirementsInfo2)* pInfo, VkMemoryRequirements2* pMemoryRequirements);
alias PFN_vkGetBufferMemoryRequirements2 = void function (VkDevice device, const(VkBufferMemoryRequirementsInfo2)* pInfo, VkMemoryRequirements2* pMemoryRequirements);
alias PFN_vkGetImageSparseMemoryRequirements2 = void function (VkDevice device, const(VkImageSparseMemoryRequirementsInfo2)* pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);
alias PFN_vkGetPhysicalDeviceFeatures2 = void function (VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures);
alias PFN_vkGetPhysicalDeviceProperties2 = void function (VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties);
alias PFN_vkGetPhysicalDeviceFormatProperties2 = void function (VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties);
alias PFN_vkGetPhysicalDeviceImageFormatProperties2 = VkResult function (VkPhysicalDevice physicalDevice, const(VkPhysicalDeviceImageFormatInfo2)* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties);
alias PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = void function (VkPhysicalDevice physicalDevice, uint* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties);
alias PFN_vkGetPhysicalDeviceMemoryProperties2 = void function (VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties);
alias PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = void function (VkPhysicalDevice physicalDevice, const(VkPhysicalDeviceSparseImageFormatInfo2)* pFormatInfo, uint* pPropertyCount, VkSparseImageFormatProperties2* pProperties);
alias PFN_vkTrimCommandPool = void function (VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);
alias PFN_vkGetDeviceQueue2 = void function (VkDevice device, const(VkDeviceQueueInfo2)* pQueueInfo, VkQueue* pQueue);
alias PFN_vkCreateSamplerYcbcrConversion = VkResult function (VkDevice device, const(VkSamplerYcbcrConversionCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion);
alias PFN_vkDestroySamplerYcbcrConversion = void function (VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkCreateDescriptorUpdateTemplate = VkResult function (VkDevice device, const(VkDescriptorUpdateTemplateCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate);
alias PFN_vkDestroyDescriptorUpdateTemplate = void function (VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkUpdateDescriptorSetWithTemplate = void function (VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const(void)* pData);
alias PFN_vkGetPhysicalDeviceExternalBufferProperties = void function (VkPhysicalDevice physicalDevice, const(VkPhysicalDeviceExternalBufferInfo)* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties);
alias PFN_vkGetPhysicalDeviceExternalFenceProperties = void function (VkPhysicalDevice physicalDevice, const(VkPhysicalDeviceExternalFenceInfo)* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties);
alias PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = void function (VkPhysicalDevice physicalDevice, const(VkPhysicalDeviceExternalSemaphoreInfo)* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties);
alias PFN_vkGetDescriptorSetLayoutSupport = void function (VkDevice device, const(VkDescriptorSetLayoutCreateInfo)* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport);

VkResult vkEnumerateInstanceVersion (uint* pApiVersion);

VkResult vkBindBufferMemory2 (
    VkDevice device,
    uint bindInfoCount,
    const(VkBindBufferMemoryInfo)* pBindInfos);

VkResult vkBindImageMemory2 (
    VkDevice device,
    uint bindInfoCount,
    const(VkBindImageMemoryInfo)* pBindInfos);

void vkGetDeviceGroupPeerMemoryFeatures (
    VkDevice device,
    uint heapIndex,
    uint localDeviceIndex,
    uint remoteDeviceIndex,
    VkPeerMemoryFeatureFlags* pPeerMemoryFeatures);

void vkCmdSetDeviceMask (VkCommandBuffer commandBuffer, uint deviceMask);

void vkCmdDispatchBase (
    VkCommandBuffer commandBuffer,
    uint baseGroupX,
    uint baseGroupY,
    uint baseGroupZ,
    uint groupCountX,
    uint groupCountY,
    uint groupCountZ);

VkResult vkEnumeratePhysicalDeviceGroups (
    VkInstance instance,
    uint* pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);

void vkGetImageMemoryRequirements2 (
    VkDevice device,
    const(VkImageMemoryRequirementsInfo2)* pInfo,
    VkMemoryRequirements2* pMemoryRequirements);

void vkGetBufferMemoryRequirements2 (
    VkDevice device,
    const(VkBufferMemoryRequirementsInfo2)* pInfo,
    VkMemoryRequirements2* pMemoryRequirements);

void vkGetImageSparseMemoryRequirements2 (
    VkDevice device,
    const(VkImageSparseMemoryRequirementsInfo2)* pInfo,
    uint* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

void vkGetPhysicalDeviceFeatures2 (
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures);

void vkGetPhysicalDeviceProperties2 (
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties2* pProperties);

void vkGetPhysicalDeviceFormatProperties2 (
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties2* pFormatProperties);

VkResult vkGetPhysicalDeviceImageFormatProperties2 (
    VkPhysicalDevice physicalDevice,
    const(VkPhysicalDeviceImageFormatInfo2)* pImageFormatInfo,
    VkImageFormatProperties2* pImageFormatProperties);

void vkGetPhysicalDeviceQueueFamilyProperties2 (
    VkPhysicalDevice physicalDevice,
    uint* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties);

void vkGetPhysicalDeviceMemoryProperties2 (
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties);

void vkGetPhysicalDeviceSparseImageFormatProperties2 (
    VkPhysicalDevice physicalDevice,
    const(VkPhysicalDeviceSparseImageFormatInfo2)* pFormatInfo,
    uint* pPropertyCount,
    VkSparseImageFormatProperties2* pProperties);

void vkTrimCommandPool (
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolTrimFlags flags);

void vkGetDeviceQueue2 (
    VkDevice device,
    const(VkDeviceQueueInfo2)* pQueueInfo,
    VkQueue* pQueue);

VkResult vkCreateSamplerYcbcrConversion (
    VkDevice device,
    const(VkSamplerYcbcrConversionCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkSamplerYcbcrConversion* pYcbcrConversion);

void vkDestroySamplerYcbcrConversion (
    VkDevice device,
    VkSamplerYcbcrConversion ycbcrConversion,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkCreateDescriptorUpdateTemplate (
    VkDevice device,
    const(VkDescriptorUpdateTemplateCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate);

void vkDestroyDescriptorUpdateTemplate (
    VkDevice device,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const(VkAllocationCallbacks)* pAllocator);

void vkUpdateDescriptorSetWithTemplate (
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const(void)* pData);

void vkGetPhysicalDeviceExternalBufferProperties (
    VkPhysicalDevice physicalDevice,
    const(VkPhysicalDeviceExternalBufferInfo)* pExternalBufferInfo,
    VkExternalBufferProperties* pExternalBufferProperties);

void vkGetPhysicalDeviceExternalFenceProperties (
    VkPhysicalDevice physicalDevice,
    const(VkPhysicalDeviceExternalFenceInfo)* pExternalFenceInfo,
    VkExternalFenceProperties* pExternalFenceProperties);

void vkGetPhysicalDeviceExternalSemaphoreProperties (
    VkPhysicalDevice physicalDevice,
    const(VkPhysicalDeviceExternalSemaphoreInfo)* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties* pExternalSemaphoreProperties);

void vkGetDescriptorSetLayoutSupport (
    VkDevice device,
    const(VkDescriptorSetLayoutCreateInfo)* pCreateInfo,
    VkDescriptorSetLayoutSupport* pSupport);

enum VK_VERSION_1_2 = 1;
// Vulkan 1.2 version number
enum VK_API_VERSION_1_2 = VK_MAKE_API_VERSION(0, 1, 2, 0); // Patch version should always be set to 0

enum VK_MAX_DRIVER_NAME_SIZE = 256U;
enum VK_MAX_DRIVER_INFO_SIZE = 256U;

enum VkDriverId
{
    VK_DRIVER_ID_AMD_PROPRIETARY = 1,
    VK_DRIVER_ID_AMD_OPEN_SOURCE = 2,
    VK_DRIVER_ID_MESA_RADV = 3,
    VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4,
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5,
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6,
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7,
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8,
    VK_DRIVER_ID_ARM_PROPRIETARY = 9,
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10,
    VK_DRIVER_ID_GGP_PROPRIETARY = 11,
    VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12,
    VK_DRIVER_ID_MESA_LLVMPIPE = 13,
    VK_DRIVER_ID_MOLTENVK = 14,
    VK_DRIVER_ID_COREAVI_PROPRIETARY = 15,
    VK_DRIVER_ID_JUICE_PROPRIETARY = 16,
    VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17,
    VK_DRIVER_ID_MESA_TURNIP = 18,
    VK_DRIVER_ID_MESA_V3DV = 19,
    VK_DRIVER_ID_MESA_PANVK = 20,
    VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 21,
    VK_DRIVER_ID_MESA_VENUS = 22,
    VK_DRIVER_ID_AMD_PROPRIETARY_KHR = VK_DRIVER_ID_AMD_PROPRIETARY,
    VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR = VK_DRIVER_ID_AMD_OPEN_SOURCE,
    VK_DRIVER_ID_MESA_RADV_KHR = VK_DRIVER_ID_MESA_RADV,
    VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR = VK_DRIVER_ID_NVIDIA_PROPRIETARY,
    VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR = VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS,
    VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR = VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA,
    VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR = VK_DRIVER_ID_IMAGINATION_PROPRIETARY,
    VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR = VK_DRIVER_ID_QUALCOMM_PROPRIETARY,
    VK_DRIVER_ID_ARM_PROPRIETARY_KHR = VK_DRIVER_ID_ARM_PROPRIETARY,
    VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR = VK_DRIVER_ID_GOOGLE_SWIFTSHADER,
    VK_DRIVER_ID_GGP_PROPRIETARY_KHR = VK_DRIVER_ID_GGP_PROPRIETARY,
    VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR = VK_DRIVER_ID_BROADCOM_PROPRIETARY,
    VK_DRIVER_ID_MAX_ENUM = 0x7FFFFFFF
}

enum VkShaderFloatControlsIndependence
{
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR = VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE,
    VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM = 0x7FFFFFFF
}

enum VkSamplerReductionMode
{
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0,
    VK_SAMPLER_REDUCTION_MODE_MIN = 1,
    VK_SAMPLER_REDUCTION_MODE_MAX = 2,
    VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT = VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE,
    VK_SAMPLER_REDUCTION_MODE_MIN_EXT = VK_SAMPLER_REDUCTION_MODE_MIN,
    VK_SAMPLER_REDUCTION_MODE_MAX_EXT = VK_SAMPLER_REDUCTION_MODE_MAX,
    VK_SAMPLER_REDUCTION_MODE_MAX_ENUM = 0x7FFFFFFF
}

enum VkSemaphoreType
{
    VK_SEMAPHORE_TYPE_BINARY = 0,
    VK_SEMAPHORE_TYPE_TIMELINE = 1,
    VK_SEMAPHORE_TYPE_BINARY_KHR = VK_SEMAPHORE_TYPE_BINARY,
    VK_SEMAPHORE_TYPE_TIMELINE_KHR = VK_SEMAPHORE_TYPE_TIMELINE,
    VK_SEMAPHORE_TYPE_MAX_ENUM = 0x7FFFFFFF
}

enum VkResolveModeFlagBits
{
    VK_RESOLVE_MODE_NONE = 0,
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT = 0x00000001,
    VK_RESOLVE_MODE_AVERAGE_BIT = 0x00000002,
    VK_RESOLVE_MODE_MIN_BIT = 0x00000004,
    VK_RESOLVE_MODE_MAX_BIT = 0x00000008,
    VK_RESOLVE_MODE_NONE_KHR = VK_RESOLVE_MODE_NONE,
    VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR = VK_RESOLVE_MODE_SAMPLE_ZERO_BIT,
    VK_RESOLVE_MODE_AVERAGE_BIT_KHR = VK_RESOLVE_MODE_AVERAGE_BIT,
    VK_RESOLVE_MODE_MIN_BIT_KHR = VK_RESOLVE_MODE_MIN_BIT,
    VK_RESOLVE_MODE_MAX_BIT_KHR = VK_RESOLVE_MODE_MAX_BIT,
    VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkResolveModeFlags = uint;

enum VkDescriptorBindingFlagBits
{
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT = 0x00000001,
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT = 0x00000002,
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT = 0x00000004,
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT = 0x00000008,
    VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT,
    VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT = VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT,
    VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT = VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT,
    VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT = VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT,
    VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkDescriptorBindingFlags = uint;

enum VkSemaphoreWaitFlagBits
{
    VK_SEMAPHORE_WAIT_ANY_BIT = 0x00000001,
    VK_SEMAPHORE_WAIT_ANY_BIT_KHR = VK_SEMAPHORE_WAIT_ANY_BIT,
    VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkSemaphoreWaitFlags = uint;

struct VkPhysicalDeviceVulkan11Features
{
    VkStructureType sType;
    void* pNext;
    VkBool32 storageBuffer16BitAccess;
    VkBool32 uniformAndStorageBuffer16BitAccess;
    VkBool32 storagePushConstant16;
    VkBool32 storageInputOutput16;
    VkBool32 multiview;
    VkBool32 multiviewGeometryShader;
    VkBool32 multiviewTessellationShader;
    VkBool32 variablePointersStorageBuffer;
    VkBool32 variablePointers;
    VkBool32 protectedMemory;
    VkBool32 samplerYcbcrConversion;
    VkBool32 shaderDrawParameters;
}

struct VkPhysicalDeviceVulkan11Properties
{
    VkStructureType sType;
    void* pNext;
    ubyte[VK_UUID_SIZE] deviceUUID;
    ubyte[VK_UUID_SIZE] driverUUID;
    ubyte[VK_LUID_SIZE] deviceLUID;
    uint deviceNodeMask;
    VkBool32 deviceLUIDValid;
    uint subgroupSize;
    VkShaderStageFlags subgroupSupportedStages;
    VkSubgroupFeatureFlags subgroupSupportedOperations;
    VkBool32 subgroupQuadOperationsInAllStages;
    VkPointClippingBehavior pointClippingBehavior;
    uint maxMultiviewViewCount;
    uint maxMultiviewInstanceIndex;
    VkBool32 protectedNoFault;
    uint maxPerSetDescriptors;
    VkDeviceSize maxMemoryAllocationSize;
}

struct VkPhysicalDeviceVulkan12Features
{
    VkStructureType sType;
    void* pNext;
    VkBool32 samplerMirrorClampToEdge;
    VkBool32 drawIndirectCount;
    VkBool32 storageBuffer8BitAccess;
    VkBool32 uniformAndStorageBuffer8BitAccess;
    VkBool32 storagePushConstant8;
    VkBool32 shaderBufferInt64Atomics;
    VkBool32 shaderSharedInt64Atomics;
    VkBool32 shaderFloat16;
    VkBool32 shaderInt8;
    VkBool32 descriptorIndexing;
    VkBool32 shaderInputAttachmentArrayDynamicIndexing;
    VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
    VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
    VkBool32 shaderUniformBufferArrayNonUniformIndexing;
    VkBool32 shaderSampledImageArrayNonUniformIndexing;
    VkBool32 shaderStorageBufferArrayNonUniformIndexing;
    VkBool32 shaderStorageImageArrayNonUniformIndexing;
    VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
    VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
    VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
    VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
    VkBool32 descriptorBindingSampledImageUpdateAfterBind;
    VkBool32 descriptorBindingStorageImageUpdateAfterBind;
    VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
    VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
    VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
    VkBool32 descriptorBindingUpdateUnusedWhilePending;
    VkBool32 descriptorBindingPartiallyBound;
    VkBool32 descriptorBindingVariableDescriptorCount;
    VkBool32 runtimeDescriptorArray;
    VkBool32 samplerFilterMinmax;
    VkBool32 scalarBlockLayout;
    VkBool32 imagelessFramebuffer;
    VkBool32 uniformBufferStandardLayout;
    VkBool32 shaderSubgroupExtendedTypes;
    VkBool32 separateDepthStencilLayouts;
    VkBool32 hostQueryReset;
    VkBool32 timelineSemaphore;
    VkBool32 bufferDeviceAddress;
    VkBool32 bufferDeviceAddressCaptureReplay;
    VkBool32 bufferDeviceAddressMultiDevice;
    VkBool32 vulkanMemoryModel;
    VkBool32 vulkanMemoryModelDeviceScope;
    VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
    VkBool32 shaderOutputViewportIndex;
    VkBool32 shaderOutputLayer;
    VkBool32 subgroupBroadcastDynamicId;
}

struct VkConformanceVersion
{
    ubyte major;
    ubyte minor;
    ubyte subminor;
    ubyte patch;
}

struct VkPhysicalDeviceVulkan12Properties
{
    VkStructureType sType;
    void* pNext;
    VkDriverId driverID;
    char[VK_MAX_DRIVER_NAME_SIZE] driverName;
    char[VK_MAX_DRIVER_INFO_SIZE] driverInfo;
    VkConformanceVersion conformanceVersion;
    VkShaderFloatControlsIndependence denormBehaviorIndependence;
    VkShaderFloatControlsIndependence roundingModeIndependence;
    VkBool32 shaderSignedZeroInfNanPreserveFloat16;
    VkBool32 shaderSignedZeroInfNanPreserveFloat32;
    VkBool32 shaderSignedZeroInfNanPreserveFloat64;
    VkBool32 shaderDenormPreserveFloat16;
    VkBool32 shaderDenormPreserveFloat32;
    VkBool32 shaderDenormPreserveFloat64;
    VkBool32 shaderDenormFlushToZeroFloat16;
    VkBool32 shaderDenormFlushToZeroFloat32;
    VkBool32 shaderDenormFlushToZeroFloat64;
    VkBool32 shaderRoundingModeRTEFloat16;
    VkBool32 shaderRoundingModeRTEFloat32;
    VkBool32 shaderRoundingModeRTEFloat64;
    VkBool32 shaderRoundingModeRTZFloat16;
    VkBool32 shaderRoundingModeRTZFloat32;
    VkBool32 shaderRoundingModeRTZFloat64;
    uint maxUpdateAfterBindDescriptorsInAllPools;
    VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
    VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
    VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
    VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
    VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
    VkBool32 robustBufferAccessUpdateAfterBind;
    VkBool32 quadDivergentImplicitLod;
    uint maxPerStageDescriptorUpdateAfterBindSamplers;
    uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
    uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
    uint maxPerStageDescriptorUpdateAfterBindSampledImages;
    uint maxPerStageDescriptorUpdateAfterBindStorageImages;
    uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
    uint maxPerStageUpdateAfterBindResources;
    uint maxDescriptorSetUpdateAfterBindSamplers;
    uint maxDescriptorSetUpdateAfterBindUniformBuffers;
    uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
    uint maxDescriptorSetUpdateAfterBindStorageBuffers;
    uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
    uint maxDescriptorSetUpdateAfterBindSampledImages;
    uint maxDescriptorSetUpdateAfterBindStorageImages;
    uint maxDescriptorSetUpdateAfterBindInputAttachments;
    VkResolveModeFlags supportedDepthResolveModes;
    VkResolveModeFlags supportedStencilResolveModes;
    VkBool32 independentResolveNone;
    VkBool32 independentResolve;
    VkBool32 filterMinmaxSingleComponentFormats;
    VkBool32 filterMinmaxImageComponentMapping;
    ulong maxTimelineSemaphoreValueDifference;
    VkSampleCountFlags framebufferIntegerColorSampleCounts;
}

struct VkImageFormatListCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint viewFormatCount;
    const(VkFormat)* pViewFormats;
}

struct VkAttachmentDescription2
{
    VkStructureType sType;
    const(void)* pNext;
    VkAttachmentDescriptionFlags flags;
    VkFormat format;
    VkSampleCountFlagBits samples;
    VkAttachmentLoadOp loadOp;
    VkAttachmentStoreOp storeOp;
    VkAttachmentLoadOp stencilLoadOp;
    VkAttachmentStoreOp stencilStoreOp;
    VkImageLayout initialLayout;
    VkImageLayout finalLayout;
}

struct VkAttachmentReference2
{
    VkStructureType sType;
    const(void)* pNext;
    uint attachment;
    VkImageLayout layout;
    VkImageAspectFlags aspectMask;
}

struct VkSubpassDescription2
{
    VkStructureType sType;
    const(void)* pNext;
    VkSubpassDescriptionFlags flags;
    VkPipelineBindPoint pipelineBindPoint;
    uint viewMask;
    uint inputAttachmentCount;
    const(VkAttachmentReference2)* pInputAttachments;
    uint colorAttachmentCount;
    const(VkAttachmentReference2)* pColorAttachments;
    const(VkAttachmentReference2)* pResolveAttachments;
    const(VkAttachmentReference2)* pDepthStencilAttachment;
    uint preserveAttachmentCount;
    const(uint)* pPreserveAttachments;
}

struct VkSubpassDependency2
{
    VkStructureType sType;
    const(void)* pNext;
    uint srcSubpass;
    uint dstSubpass;
    VkPipelineStageFlags srcStageMask;
    VkPipelineStageFlags dstStageMask;
    VkAccessFlags srcAccessMask;
    VkAccessFlags dstAccessMask;
    VkDependencyFlags dependencyFlags;
    int viewOffset;
}

struct VkRenderPassCreateInfo2
{
    VkStructureType sType;
    const(void)* pNext;
    VkRenderPassCreateFlags flags;
    uint attachmentCount;
    const(VkAttachmentDescription2)* pAttachments;
    uint subpassCount;
    const(VkSubpassDescription2)* pSubpasses;
    uint dependencyCount;
    const(VkSubpassDependency2)* pDependencies;
    uint correlatedViewMaskCount;
    const(uint)* pCorrelatedViewMasks;
}

struct VkSubpassBeginInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkSubpassContents contents;
}

struct VkSubpassEndInfo
{
    VkStructureType sType;
    const(void)* pNext;
}

struct VkPhysicalDevice8BitStorageFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 storageBuffer8BitAccess;
    VkBool32 uniformAndStorageBuffer8BitAccess;
    VkBool32 storagePushConstant8;
}

struct VkPhysicalDeviceDriverProperties
{
    VkStructureType sType;
    void* pNext;
    VkDriverId driverID;
    char[VK_MAX_DRIVER_NAME_SIZE] driverName;
    char[VK_MAX_DRIVER_INFO_SIZE] driverInfo;
    VkConformanceVersion conformanceVersion;
}

struct VkPhysicalDeviceShaderAtomicInt64Features
{
    VkStructureType sType;
    void* pNext;
    VkBool32 shaderBufferInt64Atomics;
    VkBool32 shaderSharedInt64Atomics;
}

struct VkPhysicalDeviceShaderFloat16Int8Features
{
    VkStructureType sType;
    void* pNext;
    VkBool32 shaderFloat16;
    VkBool32 shaderInt8;
}

struct VkPhysicalDeviceFloatControlsProperties
{
    VkStructureType sType;
    void* pNext;
    VkShaderFloatControlsIndependence denormBehaviorIndependence;
    VkShaderFloatControlsIndependence roundingModeIndependence;
    VkBool32 shaderSignedZeroInfNanPreserveFloat16;
    VkBool32 shaderSignedZeroInfNanPreserveFloat32;
    VkBool32 shaderSignedZeroInfNanPreserveFloat64;
    VkBool32 shaderDenormPreserveFloat16;
    VkBool32 shaderDenormPreserveFloat32;
    VkBool32 shaderDenormPreserveFloat64;
    VkBool32 shaderDenormFlushToZeroFloat16;
    VkBool32 shaderDenormFlushToZeroFloat32;
    VkBool32 shaderDenormFlushToZeroFloat64;
    VkBool32 shaderRoundingModeRTEFloat16;
    VkBool32 shaderRoundingModeRTEFloat32;
    VkBool32 shaderRoundingModeRTEFloat64;
    VkBool32 shaderRoundingModeRTZFloat16;
    VkBool32 shaderRoundingModeRTZFloat32;
    VkBool32 shaderRoundingModeRTZFloat64;
}

struct VkDescriptorSetLayoutBindingFlagsCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint bindingCount;
    const(VkDescriptorBindingFlags)* pBindingFlags;
}

struct VkPhysicalDeviceDescriptorIndexingFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 shaderInputAttachmentArrayDynamicIndexing;
    VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
    VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
    VkBool32 shaderUniformBufferArrayNonUniformIndexing;
    VkBool32 shaderSampledImageArrayNonUniformIndexing;
    VkBool32 shaderStorageBufferArrayNonUniformIndexing;
    VkBool32 shaderStorageImageArrayNonUniformIndexing;
    VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
    VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
    VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
    VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
    VkBool32 descriptorBindingSampledImageUpdateAfterBind;
    VkBool32 descriptorBindingStorageImageUpdateAfterBind;
    VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
    VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
    VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
    VkBool32 descriptorBindingUpdateUnusedWhilePending;
    VkBool32 descriptorBindingPartiallyBound;
    VkBool32 descriptorBindingVariableDescriptorCount;
    VkBool32 runtimeDescriptorArray;
}

struct VkPhysicalDeviceDescriptorIndexingProperties
{
    VkStructureType sType;
    void* pNext;
    uint maxUpdateAfterBindDescriptorsInAllPools;
    VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
    VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
    VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
    VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
    VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
    VkBool32 robustBufferAccessUpdateAfterBind;
    VkBool32 quadDivergentImplicitLod;
    uint maxPerStageDescriptorUpdateAfterBindSamplers;
    uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
    uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
    uint maxPerStageDescriptorUpdateAfterBindSampledImages;
    uint maxPerStageDescriptorUpdateAfterBindStorageImages;
    uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
    uint maxPerStageUpdateAfterBindResources;
    uint maxDescriptorSetUpdateAfterBindSamplers;
    uint maxDescriptorSetUpdateAfterBindUniformBuffers;
    uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
    uint maxDescriptorSetUpdateAfterBindStorageBuffers;
    uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
    uint maxDescriptorSetUpdateAfterBindSampledImages;
    uint maxDescriptorSetUpdateAfterBindStorageImages;
    uint maxDescriptorSetUpdateAfterBindInputAttachments;
}

struct VkDescriptorSetVariableDescriptorCountAllocateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint descriptorSetCount;
    const(uint)* pDescriptorCounts;
}

struct VkDescriptorSetVariableDescriptorCountLayoutSupport
{
    VkStructureType sType;
    void* pNext;
    uint maxVariableDescriptorCount;
}

struct VkSubpassDescriptionDepthStencilResolve
{
    VkStructureType sType;
    const(void)* pNext;
    VkResolveModeFlagBits depthResolveMode;
    VkResolveModeFlagBits stencilResolveMode;
    const(VkAttachmentReference2)* pDepthStencilResolveAttachment;
}

struct VkPhysicalDeviceDepthStencilResolveProperties
{
    VkStructureType sType;
    void* pNext;
    VkResolveModeFlags supportedDepthResolveModes;
    VkResolveModeFlags supportedStencilResolveModes;
    VkBool32 independentResolveNone;
    VkBool32 independentResolve;
}

struct VkPhysicalDeviceScalarBlockLayoutFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 scalarBlockLayout;
}

struct VkImageStencilUsageCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkImageUsageFlags stencilUsage;
}

struct VkSamplerReductionModeCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkSamplerReductionMode reductionMode;
}

struct VkPhysicalDeviceSamplerFilterMinmaxProperties
{
    VkStructureType sType;
    void* pNext;
    VkBool32 filterMinmaxSingleComponentFormats;
    VkBool32 filterMinmaxImageComponentMapping;
}

struct VkPhysicalDeviceVulkanMemoryModelFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 vulkanMemoryModel;
    VkBool32 vulkanMemoryModelDeviceScope;
    VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
}

struct VkPhysicalDeviceImagelessFramebufferFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 imagelessFramebuffer;
}

struct VkFramebufferAttachmentImageInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkImageCreateFlags flags;
    VkImageUsageFlags usage;
    uint width;
    uint height;
    uint layerCount;
    uint viewFormatCount;
    const(VkFormat)* pViewFormats;
}

struct VkFramebufferAttachmentsCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint attachmentImageInfoCount;
    const(VkFramebufferAttachmentImageInfo)* pAttachmentImageInfos;
}

struct VkRenderPassAttachmentBeginInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint attachmentCount;
    const(VkImageView)* pAttachments;
}

struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 uniformBufferStandardLayout;
}

struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 shaderSubgroupExtendedTypes;
}

struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 separateDepthStencilLayouts;
}

struct VkAttachmentReferenceStencilLayout
{
    VkStructureType sType;
    void* pNext;
    VkImageLayout stencilLayout;
}

struct VkAttachmentDescriptionStencilLayout
{
    VkStructureType sType;
    void* pNext;
    VkImageLayout stencilInitialLayout;
    VkImageLayout stencilFinalLayout;
}

struct VkPhysicalDeviceHostQueryResetFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 hostQueryReset;
}

struct VkPhysicalDeviceTimelineSemaphoreFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 timelineSemaphore;
}

struct VkPhysicalDeviceTimelineSemaphoreProperties
{
    VkStructureType sType;
    void* pNext;
    ulong maxTimelineSemaphoreValueDifference;
}

struct VkSemaphoreTypeCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkSemaphoreType semaphoreType;
    ulong initialValue;
}

struct VkTimelineSemaphoreSubmitInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint waitSemaphoreValueCount;
    const(ulong)* pWaitSemaphoreValues;
    uint signalSemaphoreValueCount;
    const(ulong)* pSignalSemaphoreValues;
}

struct VkSemaphoreWaitInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkSemaphoreWaitFlags flags;
    uint semaphoreCount;
    const(VkSemaphore)* pSemaphores;
    const(ulong)* pValues;
}

struct VkSemaphoreSignalInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkSemaphore semaphore;
    ulong value;
}

struct VkPhysicalDeviceBufferDeviceAddressFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 bufferDeviceAddress;
    VkBool32 bufferDeviceAddressCaptureReplay;
    VkBool32 bufferDeviceAddressMultiDevice;
}

struct VkBufferDeviceAddressInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkBuffer buffer;
}

struct VkBufferOpaqueCaptureAddressCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    ulong opaqueCaptureAddress;
}

struct VkMemoryOpaqueCaptureAddressAllocateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    ulong opaqueCaptureAddress;
}

struct VkDeviceMemoryOpaqueCaptureAddressInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceMemory memory;
}

alias PFN_vkCmdDrawIndirectCount = void function (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);
alias PFN_vkCmdDrawIndexedIndirectCount = void function (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);
alias PFN_vkCreateRenderPass2 = VkResult function (VkDevice device, const(VkRenderPassCreateInfo2)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkRenderPass* pRenderPass);
alias PFN_vkCmdBeginRenderPass2 = void function (VkCommandBuffer commandBuffer, const(VkRenderPassBeginInfo)* pRenderPassBegin, const(VkSubpassBeginInfo)* pSubpassBeginInfo);
alias PFN_vkCmdNextSubpass2 = void function (VkCommandBuffer commandBuffer, const(VkSubpassBeginInfo)* pSubpassBeginInfo, const(VkSubpassEndInfo)* pSubpassEndInfo);
alias PFN_vkCmdEndRenderPass2 = void function (VkCommandBuffer commandBuffer, const(VkSubpassEndInfo)* pSubpassEndInfo);
alias PFN_vkResetQueryPool = void function (VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount);
alias PFN_vkGetSemaphoreCounterValue = VkResult function (VkDevice device, VkSemaphore semaphore, ulong* pValue);
alias PFN_vkWaitSemaphores = VkResult function (VkDevice device, const(VkSemaphoreWaitInfo)* pWaitInfo, ulong timeout);
alias PFN_vkSignalSemaphore = VkResult function (VkDevice device, const(VkSemaphoreSignalInfo)* pSignalInfo);
alias PFN_vkGetBufferDeviceAddress = ulong function (VkDevice device, const(VkBufferDeviceAddressInfo)* pInfo);
alias PFN_vkGetBufferOpaqueCaptureAddress = ulong function (VkDevice device, const(VkBufferDeviceAddressInfo)* pInfo);
alias PFN_vkGetDeviceMemoryOpaqueCaptureAddress = ulong function (VkDevice device, const(VkDeviceMemoryOpaqueCaptureAddressInfo)* pInfo);

void vkCmdDrawIndirectCount (
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint maxDrawCount,
    uint stride);

void vkCmdDrawIndexedIndirectCount (
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint maxDrawCount,
    uint stride);

VkResult vkCreateRenderPass2 (
    VkDevice device,
    const(VkRenderPassCreateInfo2)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkRenderPass* pRenderPass);

void vkCmdBeginRenderPass2 (
    VkCommandBuffer commandBuffer,
    const(VkRenderPassBeginInfo)* pRenderPassBegin,
    const(VkSubpassBeginInfo)* pSubpassBeginInfo);

void vkCmdNextSubpass2 (
    VkCommandBuffer commandBuffer,
    const(VkSubpassBeginInfo)* pSubpassBeginInfo,
    const(VkSubpassEndInfo)* pSubpassEndInfo);

void vkCmdEndRenderPass2 (
    VkCommandBuffer commandBuffer,
    const(VkSubpassEndInfo)* pSubpassEndInfo);

void vkResetQueryPool (
    VkDevice device,
    VkQueryPool queryPool,
    uint firstQuery,
    uint queryCount);

VkResult vkGetSemaphoreCounterValue (
    VkDevice device,
    VkSemaphore semaphore,
    ulong* pValue);

VkResult vkWaitSemaphores (
    VkDevice device,
    const(VkSemaphoreWaitInfo)* pWaitInfo,
    ulong timeout);

VkResult vkSignalSemaphore (
    VkDevice device,
    const(VkSemaphoreSignalInfo)* pSignalInfo);

VkDeviceAddress vkGetBufferDeviceAddress (
    VkDevice device,
    const(VkBufferDeviceAddressInfo)* pInfo);

ulong vkGetBufferOpaqueCaptureAddress (
    VkDevice device,
    const(VkBufferDeviceAddressInfo)* pInfo);

ulong vkGetDeviceMemoryOpaqueCaptureAddress (
    VkDevice device,
    const(VkDeviceMemoryOpaqueCaptureAddressInfo)* pInfo);

enum VK_VERSION_1_3 = 1;
// Vulkan 1.3 version number
enum VK_API_VERSION_1_3 = VK_MAKE_API_VERSION(0, 1, 3, 0); // Patch version should always be set to 0

alias VkFlags64 = ulong;
struct VkPrivateDataSlot_T;
alias VkPrivateDataSlot = VkPrivateDataSlot_T*;

enum VkPipelineCreationFeedbackFlagBits
{
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT = 0x00000001,
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT = 0x00000002,
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT = 0x00000004,
    VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT = VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT,
    VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT = VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT,
    VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT = VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT,
    VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkPipelineCreationFeedbackFlags = uint;

enum VkToolPurposeFlagBits
{
    VK_TOOL_PURPOSE_VALIDATION_BIT = 0x00000001,
    VK_TOOL_PURPOSE_PROFILING_BIT = 0x00000002,
    VK_TOOL_PURPOSE_TRACING_BIT = 0x00000004,
    VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT = 0x00000008,
    VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT = 0x00000010,
    VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT = 0x00000020,
    VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT = 0x00000040,
    VK_TOOL_PURPOSE_VALIDATION_BIT_EXT = VK_TOOL_PURPOSE_VALIDATION_BIT,
    VK_TOOL_PURPOSE_PROFILING_BIT_EXT = VK_TOOL_PURPOSE_PROFILING_BIT,
    VK_TOOL_PURPOSE_TRACING_BIT_EXT = VK_TOOL_PURPOSE_TRACING_BIT,
    VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT = VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT,
    VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT = VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT,
    VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkToolPurposeFlags = uint;

enum VkPrivateDataSlotCreateFlagBits
{
    VK_PRIVATE_DATA_SLOT_CREATE_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkPrivateDataSlotCreateFlags = uint;
alias VkPipelineStageFlags2 = ulong;

// Flag bits for VkPipelineStageFlagBits2
alias VkPipelineStageFlagBits2 = ulong;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_NONE;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_NONE_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TRANSFER_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_HOST_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_HOST_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COPY_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COPY_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_RESOLVE_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_BLIT_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_BLIT_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_CLEAR_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR;

extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI;
extern __gshared const VkPipelineStageFlagBits2 VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI;

alias VkAccessFlags2 = ulong;

// Flag bits for VkAccessFlagBits2
alias VkAccessFlagBits2 = ulong;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_NONE;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_NONE_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_INDEX_READ_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_INDEX_READ_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_UNIFORM_READ_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_UNIFORM_READ_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_SHADER_READ_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_SHADER_READ_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_SHADER_WRITE_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_SHADER_WRITE_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_TRANSFER_READ_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_TRANSFER_READ_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_TRANSFER_WRITE_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_HOST_READ_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_HOST_READ_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_HOST_WRITE_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_HOST_WRITE_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_MEMORY_READ_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_MEMORY_READ_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_MEMORY_WRITE_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_MEMORY_WRITE_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_SHADER_SAMPLED_READ_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_SHADER_STORAGE_READ_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR;

extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT;
extern __gshared const VkAccessFlagBits2 VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI;

enum VkSubmitFlagBits
{
    VK_SUBMIT_PROTECTED_BIT = 0x00000001,
    VK_SUBMIT_PROTECTED_BIT_KHR = VK_SUBMIT_PROTECTED_BIT,
    VK_SUBMIT_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkSubmitFlags = uint;

enum VkRenderingFlagBits
{
    VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT = 0x00000001,
    VK_RENDERING_SUSPENDING_BIT = 0x00000002,
    VK_RENDERING_RESUMING_BIT = 0x00000004,
    VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR = VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT,
    VK_RENDERING_SUSPENDING_BIT_KHR = VK_RENDERING_SUSPENDING_BIT,
    VK_RENDERING_RESUMING_BIT_KHR = VK_RENDERING_RESUMING_BIT,
    VK_RENDERING_FLAG_BITS_MAX_ENUM = 0x7FFFFFFF
}

alias VkRenderingFlags = uint;
alias VkFormatFeatureFlags2 = ulong;

// Flag bits for VkFormatFeatureFlagBits2
alias VkFormatFeatureFlagBits2 = ulong;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLIT_SRC_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLIT_DST_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_DISJOINT_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR;

extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT;
extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR;

extern __gshared const VkFormatFeatureFlagBits2 VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV;

struct VkPhysicalDeviceVulkan13Features
{
    VkStructureType sType;
    void* pNext;
    VkBool32 robustImageAccess;
    VkBool32 inlineUniformBlock;
    VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind;
    VkBool32 pipelineCreationCacheControl;
    VkBool32 privateData;
    VkBool32 shaderDemoteToHelperInvocation;
    VkBool32 shaderTerminateInvocation;
    VkBool32 subgroupSizeControl;
    VkBool32 computeFullSubgroups;
    VkBool32 synchronization2;
    VkBool32 textureCompressionASTC_HDR;
    VkBool32 shaderZeroInitializeWorkgroupMemory;
    VkBool32 dynamicRendering;
    VkBool32 shaderIntegerDotProduct;
    VkBool32 maintenance4;
}

struct VkPhysicalDeviceVulkan13Properties
{
    VkStructureType sType;
    void* pNext;
    uint minSubgroupSize;
    uint maxSubgroupSize;
    uint maxComputeWorkgroupSubgroups;
    VkShaderStageFlags requiredSubgroupSizeStages;
    uint maxInlineUniformBlockSize;
    uint maxPerStageDescriptorInlineUniformBlocks;
    uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
    uint maxDescriptorSetInlineUniformBlocks;
    uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
    uint maxInlineUniformTotalSize;
    VkBool32 integerDotProduct8BitUnsignedAccelerated;
    VkBool32 integerDotProduct8BitSignedAccelerated;
    VkBool32 integerDotProduct8BitMixedSignednessAccelerated;
    VkBool32 integerDotProduct4x8BitPackedUnsignedAccelerated;
    VkBool32 integerDotProduct4x8BitPackedSignedAccelerated;
    VkBool32 integerDotProduct4x8BitPackedMixedSignednessAccelerated;
    VkBool32 integerDotProduct16BitUnsignedAccelerated;
    VkBool32 integerDotProduct16BitSignedAccelerated;
    VkBool32 integerDotProduct16BitMixedSignednessAccelerated;
    VkBool32 integerDotProduct32BitUnsignedAccelerated;
    VkBool32 integerDotProduct32BitSignedAccelerated;
    VkBool32 integerDotProduct32BitMixedSignednessAccelerated;
    VkBool32 integerDotProduct64BitUnsignedAccelerated;
    VkBool32 integerDotProduct64BitSignedAccelerated;
    VkBool32 integerDotProduct64BitMixedSignednessAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating8BitSignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating16BitSignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating32BitSignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating64BitSignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
    VkDeviceSize storageTexelBufferOffsetAlignmentBytes;
    VkBool32 storageTexelBufferOffsetSingleTexelAlignment;
    VkDeviceSize uniformTexelBufferOffsetAlignmentBytes;
    VkBool32 uniformTexelBufferOffsetSingleTexelAlignment;
    VkDeviceSize maxBufferSize;
}

struct VkPipelineCreationFeedback
{
    VkPipelineCreationFeedbackFlags flags;
    ulong duration;
}

struct VkPipelineCreationFeedbackCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineCreationFeedback* pPipelineCreationFeedback;
    uint pipelineStageCreationFeedbackCount;
    VkPipelineCreationFeedback* pPipelineStageCreationFeedbacks;
}

struct VkPhysicalDeviceShaderTerminateInvocationFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 shaderTerminateInvocation;
}

struct VkPhysicalDeviceToolProperties
{
    VkStructureType sType;
    void* pNext;
    char[VK_MAX_EXTENSION_NAME_SIZE] name;
    char[VK_MAX_EXTENSION_NAME_SIZE] version_;
    VkToolPurposeFlags purposes;
    char[VK_MAX_DESCRIPTION_SIZE] description;
    char[VK_MAX_EXTENSION_NAME_SIZE] layer;
}

struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 shaderDemoteToHelperInvocation;
}

struct VkPhysicalDevicePrivateDataFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 privateData;
}

struct VkDevicePrivateDataCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint privateDataSlotRequestCount;
}

struct VkPrivateDataSlotCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkPrivateDataSlotCreateFlags flags;
}

struct VkPhysicalDevicePipelineCreationCacheControlFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 pipelineCreationCacheControl;
}

struct VkMemoryBarrier2
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineStageFlags2 srcStageMask;
    VkAccessFlags2 srcAccessMask;
    VkPipelineStageFlags2 dstStageMask;
    VkAccessFlags2 dstAccessMask;
}

struct VkBufferMemoryBarrier2
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineStageFlags2 srcStageMask;
    VkAccessFlags2 srcAccessMask;
    VkPipelineStageFlags2 dstStageMask;
    VkAccessFlags2 dstAccessMask;
    uint srcQueueFamilyIndex;
    uint dstQueueFamilyIndex;
    VkBuffer buffer;
    VkDeviceSize offset;
    VkDeviceSize size;
}

struct VkImageMemoryBarrier2
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineStageFlags2 srcStageMask;
    VkAccessFlags2 srcAccessMask;
    VkPipelineStageFlags2 dstStageMask;
    VkAccessFlags2 dstAccessMask;
    VkImageLayout oldLayout;
    VkImageLayout newLayout;
    uint srcQueueFamilyIndex;
    uint dstQueueFamilyIndex;
    VkImage image;
    VkImageSubresourceRange subresourceRange;
}

struct VkDependencyInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkDependencyFlags dependencyFlags;
    uint memoryBarrierCount;
    const(VkMemoryBarrier2)* pMemoryBarriers;
    uint bufferMemoryBarrierCount;
    const(VkBufferMemoryBarrier2)* pBufferMemoryBarriers;
    uint imageMemoryBarrierCount;
    const(VkImageMemoryBarrier2)* pImageMemoryBarriers;
}

struct VkSemaphoreSubmitInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkSemaphore semaphore;
    ulong value;
    VkPipelineStageFlags2 stageMask;
    uint deviceIndex;
}

struct VkCommandBufferSubmitInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkCommandBuffer commandBuffer;
    uint deviceMask;
}

struct VkSubmitInfo2
{
    VkStructureType sType;
    const(void)* pNext;
    VkSubmitFlags flags;
    uint waitSemaphoreInfoCount;
    const(VkSemaphoreSubmitInfo)* pWaitSemaphoreInfos;
    uint commandBufferInfoCount;
    const(VkCommandBufferSubmitInfo)* pCommandBufferInfos;
    uint signalSemaphoreInfoCount;
    const(VkSemaphoreSubmitInfo)* pSignalSemaphoreInfos;
}

struct VkPhysicalDeviceSynchronization2Features
{
    VkStructureType sType;
    void* pNext;
    VkBool32 synchronization2;
}

struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 shaderZeroInitializeWorkgroupMemory;
}

struct VkPhysicalDeviceImageRobustnessFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 robustImageAccess;
}

struct VkBufferCopy2
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceSize srcOffset;
    VkDeviceSize dstOffset;
    VkDeviceSize size;
}

struct VkCopyBufferInfo2
{
    VkStructureType sType;
    const(void)* pNext;
    VkBuffer srcBuffer;
    VkBuffer dstBuffer;
    uint regionCount;
    const(VkBufferCopy2)* pRegions;
}

struct VkImageCopy2
{
    VkStructureType sType;
    const(void)* pNext;
    VkImageSubresourceLayers srcSubresource;
    VkOffset3D srcOffset;
    VkImageSubresourceLayers dstSubresource;
    VkOffset3D dstOffset;
    VkExtent3D extent;
}

struct VkCopyImageInfo2
{
    VkStructureType sType;
    const(void)* pNext;
    VkImage srcImage;
    VkImageLayout srcImageLayout;
    VkImage dstImage;
    VkImageLayout dstImageLayout;
    uint regionCount;
    const(VkImageCopy2)* pRegions;
}

struct VkBufferImageCopy2
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceSize bufferOffset;
    uint bufferRowLength;
    uint bufferImageHeight;
    VkImageSubresourceLayers imageSubresource;
    VkOffset3D imageOffset;
    VkExtent3D imageExtent;
}

struct VkCopyBufferToImageInfo2
{
    VkStructureType sType;
    const(void)* pNext;
    VkBuffer srcBuffer;
    VkImage dstImage;
    VkImageLayout dstImageLayout;
    uint regionCount;
    const(VkBufferImageCopy2)* pRegions;
}

struct VkCopyImageToBufferInfo2
{
    VkStructureType sType;
    const(void)* pNext;
    VkImage srcImage;
    VkImageLayout srcImageLayout;
    VkBuffer dstBuffer;
    uint regionCount;
    const(VkBufferImageCopy2)* pRegions;
}

struct VkImageBlit2
{
    VkStructureType sType;
    const(void)* pNext;
    VkImageSubresourceLayers srcSubresource;
    VkOffset3D[2] srcOffsets;
    VkImageSubresourceLayers dstSubresource;
    VkOffset3D[2] dstOffsets;
}

struct VkBlitImageInfo2
{
    VkStructureType sType;
    const(void)* pNext;
    VkImage srcImage;
    VkImageLayout srcImageLayout;
    VkImage dstImage;
    VkImageLayout dstImageLayout;
    uint regionCount;
    const(VkImageBlit2)* pRegions;
    VkFilter filter;
}

struct VkImageResolve2
{
    VkStructureType sType;
    const(void)* pNext;
    VkImageSubresourceLayers srcSubresource;
    VkOffset3D srcOffset;
    VkImageSubresourceLayers dstSubresource;
    VkOffset3D dstOffset;
    VkExtent3D extent;
}

struct VkResolveImageInfo2
{
    VkStructureType sType;
    const(void)* pNext;
    VkImage srcImage;
    VkImageLayout srcImageLayout;
    VkImage dstImage;
    VkImageLayout dstImageLayout;
    uint regionCount;
    const(VkImageResolve2)* pRegions;
}

struct VkPhysicalDeviceSubgroupSizeControlFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 subgroupSizeControl;
    VkBool32 computeFullSubgroups;
}

struct VkPhysicalDeviceSubgroupSizeControlProperties
{
    VkStructureType sType;
    void* pNext;
    uint minSubgroupSize;
    uint maxSubgroupSize;
    uint maxComputeWorkgroupSubgroups;
    VkShaderStageFlags requiredSubgroupSizeStages;
}

struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo
{
    VkStructureType sType;
    void* pNext;
    uint requiredSubgroupSize;
}

struct VkPhysicalDeviceInlineUniformBlockFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 inlineUniformBlock;
    VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind;
}

struct VkPhysicalDeviceInlineUniformBlockProperties
{
    VkStructureType sType;
    void* pNext;
    uint maxInlineUniformBlockSize;
    uint maxPerStageDescriptorInlineUniformBlocks;
    uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
    uint maxDescriptorSetInlineUniformBlocks;
    uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
}

struct VkWriteDescriptorSetInlineUniformBlock
{
    VkStructureType sType;
    const(void)* pNext;
    uint dataSize;
    const(void)* pData;
}

struct VkDescriptorPoolInlineUniformBlockCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint maxInlineUniformBlockBindings;
}

struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 textureCompressionASTC_HDR;
}

struct VkRenderingAttachmentInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkImageView imageView;
    VkImageLayout imageLayout;
    VkResolveModeFlagBits resolveMode;
    VkImageView resolveImageView;
    VkImageLayout resolveImageLayout;
    VkAttachmentLoadOp loadOp;
    VkAttachmentStoreOp storeOp;
    VkClearValue clearValue;
}

struct VkRenderingInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkRenderingFlags flags;
    VkRect2D renderArea;
    uint layerCount;
    uint viewMask;
    uint colorAttachmentCount;
    const(VkRenderingAttachmentInfo)* pColorAttachments;
    const(VkRenderingAttachmentInfo)* pDepthAttachment;
    const(VkRenderingAttachmentInfo)* pStencilAttachment;
}

struct VkPipelineRenderingCreateInfo
{
    VkStructureType sType;
    const(void)* pNext;
    uint viewMask;
    uint colorAttachmentCount;
    const(VkFormat)* pColorAttachmentFormats;
    VkFormat depthAttachmentFormat;
    VkFormat stencilAttachmentFormat;
}

struct VkPhysicalDeviceDynamicRenderingFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 dynamicRendering;
}

struct VkCommandBufferInheritanceRenderingInfo
{
    VkStructureType sType;
    const(void)* pNext;
    VkRenderingFlags flags;
    uint viewMask;
    uint colorAttachmentCount;
    const(VkFormat)* pColorAttachmentFormats;
    VkFormat depthAttachmentFormat;
    VkFormat stencilAttachmentFormat;
    VkSampleCountFlagBits rasterizationSamples;
}

struct VkPhysicalDeviceShaderIntegerDotProductFeatures
{
    VkStructureType sType;
    void* pNext;
    VkBool32 shaderIntegerDotProduct;
}

struct VkPhysicalDeviceShaderIntegerDotProductProperties
{
    VkStructureType sType;
    void* pNext;
    VkBool32 integerDotProduct8BitUnsignedAccelerated;
    VkBool32 integerDotProduct8BitSignedAccelerated;
    VkBool32 integerDotProduct8BitMixedSignednessAccelerated;
    VkBool32 integerDotProduct4x8BitPackedUnsignedAccelerated;
    VkBool32 integerDotProduct4x8BitPackedSignedAccelerated;
    VkBool32 integerDotProduct4x8BitPackedMixedSignednessAccelerated;
    VkBool32 integerDotProduct16BitUnsignedAccelerated;
    VkBool32 integerDotProduct16BitSignedAccelerated;
    VkBool32 integerDotProduct16BitMixedSignednessAccelerated;
    VkBool32 integerDotProduct32BitUnsignedAccelerated;
    VkBool32 integerDotProduct32BitSignedAccelerated;
    VkBool32 integerDotProduct32BitMixedSignednessAccelerated;
    VkBool32 integerDotProduct64BitUnsignedAccelerated;
    VkBool32 integerDotProduct64BitSignedAccelerated;
    VkBool32 integerDotProduct64BitMixedSignednessAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating8BitSignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating16BitSignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating32BitSignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating64BitSignedAccelerated;
    VkBool32 integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
}

struct VkPhysicalDeviceTexelBufferAlignmentProperties
{
    VkStructureType sType;
    void* pNext;
    VkDeviceSize storageTexelBufferOffsetAlignmentBytes;
    VkBool32 storageTexelBufferOffsetSingleTexelAlignment;
    VkDeviceSize uniformTexelBufferOffsetAlignmentBytes;
    VkBool32 uniformTexelBufferOffsetSingleTexelAlignment;
}

struct VkFormatProperties3
{
    VkStructureType sType;
    void* pNext;
    VkFormatFeatureFlags2 linearTilingFeatures;
    VkFormatFeatureFlags2 optimalTilingFeatures;
    VkFormatFeatureFlags2 bufferFeatures;
}

struct VkPhysicalDeviceMaintenance4Features
{
    VkStructureType sType;
    void* pNext;
    VkBool32 maintenance4;
}

struct VkPhysicalDeviceMaintenance4Properties
{
    VkStructureType sType;
    void* pNext;
    VkDeviceSize maxBufferSize;
}

struct VkDeviceBufferMemoryRequirements
{
    VkStructureType sType;
    const(void)* pNext;
    const(VkBufferCreateInfo)* pCreateInfo;
}

struct VkDeviceImageMemoryRequirements
{
    VkStructureType sType;
    const(void)* pNext;
    const(VkImageCreateInfo)* pCreateInfo;
    VkImageAspectFlagBits planeAspect;
}

alias PFN_vkGetPhysicalDeviceToolProperties = VkResult function (VkPhysicalDevice physicalDevice, uint* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties);
alias PFN_vkCreatePrivateDataSlot = VkResult function (VkDevice device, const(VkPrivateDataSlotCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkPrivateDataSlot* pPrivateDataSlot);
alias PFN_vkDestroyPrivateDataSlot = void function (VkDevice device, VkPrivateDataSlot privateDataSlot, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkSetPrivateData = VkResult function (VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong data);
alias PFN_vkGetPrivateData = void function (VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong* pData);
alias PFN_vkCmdSetEvent2 = void function (VkCommandBuffer commandBuffer, VkEvent event, const(VkDependencyInfo)* pDependencyInfo);
alias PFN_vkCmdResetEvent2 = void function (VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask);
alias PFN_vkCmdWaitEvents2 = void function (VkCommandBuffer commandBuffer, uint eventCount, const(VkEvent)* pEvents, const(VkDependencyInfo)* pDependencyInfos);
alias PFN_vkCmdPipelineBarrier2 = void function (VkCommandBuffer commandBuffer, const(VkDependencyInfo)* pDependencyInfo);
alias PFN_vkCmdWriteTimestamp2 = void function (VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint query);
alias PFN_vkQueueSubmit2 = VkResult function (VkQueue queue, uint submitCount, const(VkSubmitInfo2)* pSubmits, VkFence fence);
alias PFN_vkCmdCopyBuffer2 = void function (VkCommandBuffer commandBuffer, const(VkCopyBufferInfo2)* pCopyBufferInfo);
alias PFN_vkCmdCopyImage2 = void function (VkCommandBuffer commandBuffer, const(VkCopyImageInfo2)* pCopyImageInfo);
alias PFN_vkCmdCopyBufferToImage2 = void function (VkCommandBuffer commandBuffer, const(VkCopyBufferToImageInfo2)* pCopyBufferToImageInfo);
alias PFN_vkCmdCopyImageToBuffer2 = void function (VkCommandBuffer commandBuffer, const(VkCopyImageToBufferInfo2)* pCopyImageToBufferInfo);
alias PFN_vkCmdBlitImage2 = void function (VkCommandBuffer commandBuffer, const(VkBlitImageInfo2)* pBlitImageInfo);
alias PFN_vkCmdResolveImage2 = void function (VkCommandBuffer commandBuffer, const(VkResolveImageInfo2)* pResolveImageInfo);
alias PFN_vkCmdBeginRendering = void function (VkCommandBuffer commandBuffer, const(VkRenderingInfo)* pRenderingInfo);
alias PFN_vkCmdEndRendering = void function (VkCommandBuffer commandBuffer);
alias PFN_vkCmdSetCullMode = void function (VkCommandBuffer commandBuffer, VkCullModeFlags cullMode);
alias PFN_vkCmdSetFrontFace = void function (VkCommandBuffer commandBuffer, VkFrontFace frontFace);
alias PFN_vkCmdSetPrimitiveTopology = void function (VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology);
alias PFN_vkCmdSetViewportWithCount = void function (VkCommandBuffer commandBuffer, uint viewportCount, const(VkViewport)* pViewports);
alias PFN_vkCmdSetScissorWithCount = void function (VkCommandBuffer commandBuffer, uint scissorCount, const(VkRect2D)* pScissors);
alias PFN_vkCmdBindVertexBuffers2 = void function (VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, const(VkBuffer)* pBuffers, const(VkDeviceSize)* pOffsets, const(VkDeviceSize)* pSizes, const(VkDeviceSize)* pStrides);
alias PFN_vkCmdSetDepthTestEnable = void function (VkCommandBuffer commandBuffer, VkBool32 depthTestEnable);
alias PFN_vkCmdSetDepthWriteEnable = void function (VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable);
alias PFN_vkCmdSetDepthCompareOp = void function (VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp);
alias PFN_vkCmdSetDepthBoundsTestEnable = void function (VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable);
alias PFN_vkCmdSetStencilTestEnable = void function (VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable);
alias PFN_vkCmdSetStencilOp = void function (VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp);
alias PFN_vkCmdSetRasterizerDiscardEnable = void function (VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable);
alias PFN_vkCmdSetDepthBiasEnable = void function (VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable);
alias PFN_vkCmdSetPrimitiveRestartEnable = void function (VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable);
alias PFN_vkGetDeviceBufferMemoryRequirements = void function (VkDevice device, const(VkDeviceBufferMemoryRequirements)* pInfo, VkMemoryRequirements2* pMemoryRequirements);
alias PFN_vkGetDeviceImageMemoryRequirements = void function (VkDevice device, const(VkDeviceImageMemoryRequirements)* pInfo, VkMemoryRequirements2* pMemoryRequirements);
alias PFN_vkGetDeviceImageSparseMemoryRequirements = void function (VkDevice device, const(VkDeviceImageMemoryRequirements)* pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

VkResult vkGetPhysicalDeviceToolProperties (
    VkPhysicalDevice physicalDevice,
    uint* pToolCount,
    VkPhysicalDeviceToolProperties* pToolProperties);

VkResult vkCreatePrivateDataSlot (
    VkDevice device,
    const(VkPrivateDataSlotCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkPrivateDataSlot* pPrivateDataSlot);

void vkDestroyPrivateDataSlot (
    VkDevice device,
    VkPrivateDataSlot privateDataSlot,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkSetPrivateData (
    VkDevice device,
    VkObjectType objectType,
    ulong objectHandle,
    VkPrivateDataSlot privateDataSlot,
    ulong data);

void vkGetPrivateData (
    VkDevice device,
    VkObjectType objectType,
    ulong objectHandle,
    VkPrivateDataSlot privateDataSlot,
    ulong* pData);

void vkCmdSetEvent2 (
    VkCommandBuffer commandBuffer,
    VkEvent event,
    const(VkDependencyInfo)* pDependencyInfo);

void vkCmdResetEvent2 (
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags2 stageMask);

void vkCmdWaitEvents2 (
    VkCommandBuffer commandBuffer,
    uint eventCount,
    const(VkEvent)* pEvents,
    const(VkDependencyInfo)* pDependencyInfos);

void vkCmdPipelineBarrier2 (
    VkCommandBuffer commandBuffer,
    const(VkDependencyInfo)* pDependencyInfo);

void vkCmdWriteTimestamp2 (
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlags2 stage,
    VkQueryPool queryPool,
    uint query);

VkResult vkQueueSubmit2 (
    VkQueue queue,
    uint submitCount,
    const(VkSubmitInfo2)* pSubmits,
    VkFence fence);

void vkCmdCopyBuffer2 (
    VkCommandBuffer commandBuffer,
    const(VkCopyBufferInfo2)* pCopyBufferInfo);

void vkCmdCopyImage2 (
    VkCommandBuffer commandBuffer,
    const(VkCopyImageInfo2)* pCopyImageInfo);

void vkCmdCopyBufferToImage2 (
    VkCommandBuffer commandBuffer,
    const(VkCopyBufferToImageInfo2)* pCopyBufferToImageInfo);

void vkCmdCopyImageToBuffer2 (
    VkCommandBuffer commandBuffer,
    const(VkCopyImageToBufferInfo2)* pCopyImageToBufferInfo);

void vkCmdBlitImage2 (
    VkCommandBuffer commandBuffer,
    const(VkBlitImageInfo2)* pBlitImageInfo);

void vkCmdResolveImage2 (
    VkCommandBuffer commandBuffer,
    const(VkResolveImageInfo2)* pResolveImageInfo);

void vkCmdBeginRendering (
    VkCommandBuffer commandBuffer,
    const(VkRenderingInfo)* pRenderingInfo);

void vkCmdEndRendering (VkCommandBuffer commandBuffer);

void vkCmdSetCullMode (VkCommandBuffer commandBuffer, VkCullModeFlags cullMode);

void vkCmdSetFrontFace (VkCommandBuffer commandBuffer, VkFrontFace frontFace);

void vkCmdSetPrimitiveTopology (
    VkCommandBuffer commandBuffer,
    VkPrimitiveTopology primitiveTopology);

void vkCmdSetViewportWithCount (
    VkCommandBuffer commandBuffer,
    uint viewportCount,
    const(VkViewport)* pViewports);

void vkCmdSetScissorWithCount (
    VkCommandBuffer commandBuffer,
    uint scissorCount,
    const(VkRect2D)* pScissors);

void vkCmdBindVertexBuffers2 (
    VkCommandBuffer commandBuffer,
    uint firstBinding,
    uint bindingCount,
    const(VkBuffer)* pBuffers,
    const(VkDeviceSize)* pOffsets,
    const(VkDeviceSize)* pSizes,
    const(VkDeviceSize)* pStrides);

void vkCmdSetDepthTestEnable (
    VkCommandBuffer commandBuffer,
    VkBool32 depthTestEnable);

void vkCmdSetDepthWriteEnable (
    VkCommandBuffer commandBuffer,
    VkBool32 depthWriteEnable);

void vkCmdSetDepthCompareOp (
    VkCommandBuffer commandBuffer,
    VkCompareOp depthCompareOp);

void vkCmdSetDepthBoundsTestEnable (
    VkCommandBuffer commandBuffer,
    VkBool32 depthBoundsTestEnable);

void vkCmdSetStencilTestEnable (
    VkCommandBuffer commandBuffer,
    VkBool32 stencilTestEnable);

void vkCmdSetStencilOp (
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    VkStencilOp failOp,
    VkStencilOp passOp,
    VkStencilOp depthFailOp,
    VkCompareOp compareOp);

void vkCmdSetRasterizerDiscardEnable (
    VkCommandBuffer commandBuffer,
    VkBool32 rasterizerDiscardEnable);

void vkCmdSetDepthBiasEnable (
    VkCommandBuffer commandBuffer,
    VkBool32 depthBiasEnable);

void vkCmdSetPrimitiveRestartEnable (
    VkCommandBuffer commandBuffer,
    VkBool32 primitiveRestartEnable);

void vkGetDeviceBufferMemoryRequirements (
    VkDevice device,
    const(VkDeviceBufferMemoryRequirements)* pInfo,
    VkMemoryRequirements2* pMemoryRequirements);

void vkGetDeviceImageMemoryRequirements (
    VkDevice device,
    const(VkDeviceImageMemoryRequirements)* pInfo,
    VkMemoryRequirements2* pMemoryRequirements);

void vkGetDeviceImageSparseMemoryRequirements (
    VkDevice device,
    const(VkDeviceImageMemoryRequirements)* pInfo,
    uint* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

enum VK_KHR_surface = 1;
struct VkSurfaceKHR_T;
alias VkSurfaceKHR = VkSurfaceKHR_T*;
enum VK_KHR_SURFACE_SPEC_VERSION = 25;
enum VK_KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface";

enum VkPresentModeKHR
{
    VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
    VK_PRESENT_MODE_MAILBOX_KHR = 1,
    VK_PRESENT_MODE_FIFO_KHR = 2,
    VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3,
    VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR = 1000111000,
    VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR = 1000111001,
    VK_PRESENT_MODE_MAX_ENUM_KHR = 0x7FFFFFFF
}

enum VkColorSpaceKHR
{
    VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
    VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT = 1000104001,
    VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT = 1000104002,
    VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT = 1000104003,
    VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT = 1000104004,
    VK_COLOR_SPACE_BT709_LINEAR_EXT = 1000104005,
    VK_COLOR_SPACE_BT709_NONLINEAR_EXT = 1000104006,
    VK_COLOR_SPACE_BT2020_LINEAR_EXT = 1000104007,
    VK_COLOR_SPACE_HDR10_ST2084_EXT = 1000104008,
    VK_COLOR_SPACE_DOLBYVISION_EXT = 1000104009,
    VK_COLOR_SPACE_HDR10_HLG_EXT = 1000104010,
    VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT = 1000104011,
    VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT = 1000104012,
    VK_COLOR_SPACE_PASS_THROUGH_EXT = 1000104013,
    VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT = 1000104014,
    VK_COLOR_SPACE_DISPLAY_NATIVE_AMD = 1000213000,
    VK_COLORSPACE_SRGB_NONLINEAR_KHR = VK_COLOR_SPACE_SRGB_NONLINEAR_KHR,
    VK_COLOR_SPACE_DCI_P3_LINEAR_EXT = VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT,
    VK_COLOR_SPACE_MAX_ENUM_KHR = 0x7FFFFFFF
}

enum VkSurfaceTransformFlagBitsKHR
{
    VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR = 0x00000001,
    VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR = 0x00000002,
    VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR = 0x00000004,
    VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR = 0x00000008,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR = 0x00000010,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR = 0x00000020,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR = 0x00000040,
    VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR = 0x00000080,
    VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR = 0x00000100,
    VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
}

enum VkCompositeAlphaFlagBitsKHR
{
    VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,
    VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR = 0x00000002,
    VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR = 0x00000004,
    VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR = 0x00000008,
    VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
}

alias VkCompositeAlphaFlagsKHR = uint;
alias VkSurfaceTransformFlagsKHR = uint;

struct VkSurfaceCapabilitiesKHR
{
    uint minImageCount;
    uint maxImageCount;
    VkExtent2D currentExtent;
    VkExtent2D minImageExtent;
    VkExtent2D maxImageExtent;
    uint maxImageArrayLayers;
    VkSurfaceTransformFlagsKHR supportedTransforms;
    VkSurfaceTransformFlagBitsKHR currentTransform;
    VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
    VkImageUsageFlags supportedUsageFlags;
}

struct VkSurfaceFormatKHR
{
    VkFormat format;
    VkColorSpaceKHR colorSpace;
}

alias PFN_vkDestroySurfaceKHR = void function (VkInstance instance, VkSurfaceKHR surface, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkGetPhysicalDeviceSurfaceSupportKHR = VkResult function (VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported);
alias PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = VkResult function (VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities);
alias PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = VkResult function (VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats);
alias PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = VkResult function (VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* pPresentModeCount, VkPresentModeKHR* pPresentModes);

void vkDestroySurfaceKHR (
    VkInstance instance,
    VkSurfaceKHR surface,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkGetPhysicalDeviceSurfaceSupportKHR (
    VkPhysicalDevice physicalDevice,
    uint queueFamilyIndex,
    VkSurfaceKHR surface,
    VkBool32* pSupported);

VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR (
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    VkSurfaceCapabilitiesKHR* pSurfaceCapabilities);

VkResult vkGetPhysicalDeviceSurfaceFormatsKHR (
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint* pSurfaceFormatCount,
    VkSurfaceFormatKHR* pSurfaceFormats);

VkResult vkGetPhysicalDeviceSurfacePresentModesKHR (
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint* pPresentModeCount,
    VkPresentModeKHR* pPresentModes);

enum VK_KHR_swapchain = 1;
struct VkSwapchainKHR_T;
alias VkSwapchainKHR = VkSwapchainKHR_T*;
enum VK_KHR_SWAPCHAIN_SPEC_VERSION = 70;
enum VK_KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain";

enum VkSwapchainCreateFlagBitsKHR
{
    VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR = 0x00000001,
    VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR = 0x00000002,
    VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR = 0x00000004,
    VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
}

alias VkSwapchainCreateFlagsKHR = uint;

enum VkDeviceGroupPresentModeFlagBitsKHR
{
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR = 0x00000001,
    VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR = 0x00000002,
    VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR = 0x00000004,
    VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR = 0x00000008,
    VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
}

alias VkDeviceGroupPresentModeFlagsKHR = uint;

struct VkSwapchainCreateInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkSwapchainCreateFlagsKHR flags;
    VkSurfaceKHR surface;
    uint minImageCount;
    VkFormat imageFormat;
    VkColorSpaceKHR imageColorSpace;
    VkExtent2D imageExtent;
    uint imageArrayLayers;
    VkImageUsageFlags imageUsage;
    VkSharingMode imageSharingMode;
    uint queueFamilyIndexCount;
    const(uint)* pQueueFamilyIndices;
    VkSurfaceTransformFlagBitsKHR preTransform;
    VkCompositeAlphaFlagBitsKHR compositeAlpha;
    VkPresentModeKHR presentMode;
    VkBool32 clipped;
    VkSwapchainKHR oldSwapchain;
}

struct VkPresentInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    uint waitSemaphoreCount;
    const(VkSemaphore)* pWaitSemaphores;
    uint swapchainCount;
    const(VkSwapchainKHR)* pSwapchains;
    const(uint)* pImageIndices;
    VkResult* pResults;
}

struct VkImageSwapchainCreateInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkSwapchainKHR swapchain;
}

struct VkBindImageMemorySwapchainInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkSwapchainKHR swapchain;
    uint imageIndex;
}

struct VkAcquireNextImageInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkSwapchainKHR swapchain;
    ulong timeout;
    VkSemaphore semaphore;
    VkFence fence;
    uint deviceMask;
}

struct VkDeviceGroupPresentCapabilitiesKHR
{
    VkStructureType sType;
    void* pNext;
    uint[VK_MAX_DEVICE_GROUP_SIZE] presentMask;
    VkDeviceGroupPresentModeFlagsKHR modes;
}

struct VkDeviceGroupPresentInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    uint swapchainCount;
    const(uint)* pDeviceMasks;
    VkDeviceGroupPresentModeFlagBitsKHR mode;
}

struct VkDeviceGroupSwapchainCreateInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceGroupPresentModeFlagsKHR modes;
}

alias PFN_vkCreateSwapchainKHR = VkResult function (VkDevice device, const(VkSwapchainCreateInfoKHR)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkSwapchainKHR* pSwapchain);
alias PFN_vkDestroySwapchainKHR = void function (VkDevice device, VkSwapchainKHR swapchain, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkGetSwapchainImagesKHR = VkResult function (VkDevice device, VkSwapchainKHR swapchain, uint* pSwapchainImageCount, VkImage* pSwapchainImages);
alias PFN_vkAcquireNextImageKHR = VkResult function (VkDevice device, VkSwapchainKHR swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, uint* pImageIndex);
alias PFN_vkQueuePresentKHR = VkResult function (VkQueue queue, const(VkPresentInfoKHR)* pPresentInfo);
alias PFN_vkGetDeviceGroupPresentCapabilitiesKHR = VkResult function (VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities);
alias PFN_vkGetDeviceGroupSurfacePresentModesKHR = VkResult function (VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes);
alias PFN_vkGetPhysicalDevicePresentRectanglesKHR = VkResult function (VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* pRectCount, VkRect2D* pRects);
alias PFN_vkAcquireNextImage2KHR = VkResult function (VkDevice device, const(VkAcquireNextImageInfoKHR)* pAcquireInfo, uint* pImageIndex);

VkResult vkCreateSwapchainKHR (
    VkDevice device,
    const(VkSwapchainCreateInfoKHR)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkSwapchainKHR* pSwapchain);

void vkDestroySwapchainKHR (
    VkDevice device,
    VkSwapchainKHR swapchain,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkGetSwapchainImagesKHR (
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint* pSwapchainImageCount,
    VkImage* pSwapchainImages);

VkResult vkAcquireNextImageKHR (
    VkDevice device,
    VkSwapchainKHR swapchain,
    ulong timeout,
    VkSemaphore semaphore,
    VkFence fence,
    uint* pImageIndex);

VkResult vkQueuePresentKHR (
    VkQueue queue,
    const(VkPresentInfoKHR)* pPresentInfo);

VkResult vkGetDeviceGroupPresentCapabilitiesKHR (
    VkDevice device,
    VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities);

VkResult vkGetDeviceGroupSurfacePresentModesKHR (
    VkDevice device,
    VkSurfaceKHR surface,
    VkDeviceGroupPresentModeFlagsKHR* pModes);

VkResult vkGetPhysicalDevicePresentRectanglesKHR (
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint* pRectCount,
    VkRect2D* pRects);

VkResult vkAcquireNextImage2KHR (
    VkDevice device,
    const(VkAcquireNextImageInfoKHR)* pAcquireInfo,
    uint* pImageIndex);

enum VK_KHR_display = 1;
struct VkDisplayKHR_T;
alias VkDisplayKHR = VkDisplayKHR_T*;
struct VkDisplayModeKHR_T;
alias VkDisplayModeKHR = VkDisplayModeKHR_T*;
enum VK_KHR_DISPLAY_SPEC_VERSION = 23;
enum VK_KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display";
alias VkDisplayModeCreateFlagsKHR = uint;

enum VkDisplayPlaneAlphaFlagBitsKHR
{
    VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR = 0x00000001,
    VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR = 0x00000002,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR = 0x00000004,
    VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR = 0x00000008,
    VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
}

alias VkDisplayPlaneAlphaFlagsKHR = uint;
alias VkDisplaySurfaceCreateFlagsKHR = uint;

struct VkDisplayModeParametersKHR
{
    VkExtent2D visibleRegion;
    uint refreshRate;
}

struct VkDisplayModeCreateInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkDisplayModeCreateFlagsKHR flags;
    VkDisplayModeParametersKHR parameters;
}

struct VkDisplayModePropertiesKHR
{
    VkDisplayModeKHR displayMode;
    VkDisplayModeParametersKHR parameters;
}

struct VkDisplayPlaneCapabilitiesKHR
{
    VkDisplayPlaneAlphaFlagsKHR supportedAlpha;
    VkOffset2D minSrcPosition;
    VkOffset2D maxSrcPosition;
    VkExtent2D minSrcExtent;
    VkExtent2D maxSrcExtent;
    VkOffset2D minDstPosition;
    VkOffset2D maxDstPosition;
    VkExtent2D minDstExtent;
    VkExtent2D maxDstExtent;
}

struct VkDisplayPlanePropertiesKHR
{
    VkDisplayKHR currentDisplay;
    uint currentStackIndex;
}

struct VkDisplayPropertiesKHR
{
    VkDisplayKHR display;
    const(char)* displayName;
    VkExtent2D physicalDimensions;
    VkExtent2D physicalResolution;
    VkSurfaceTransformFlagsKHR supportedTransforms;
    VkBool32 planeReorderPossible;
    VkBool32 persistentContent;
}

struct VkDisplaySurfaceCreateInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkDisplaySurfaceCreateFlagsKHR flags;
    VkDisplayModeKHR displayMode;
    uint planeIndex;
    uint planeStackIndex;
    VkSurfaceTransformFlagBitsKHR transform;
    float globalAlpha;
    VkDisplayPlaneAlphaFlagBitsKHR alphaMode;
    VkExtent2D imageExtent;
}

alias PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = VkResult function (VkPhysicalDevice physicalDevice, uint* pPropertyCount, VkDisplayPropertiesKHR* pProperties);
alias PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = VkResult function (VkPhysicalDevice physicalDevice, uint* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties);
alias PFN_vkGetDisplayPlaneSupportedDisplaysKHR = VkResult function (VkPhysicalDevice physicalDevice, uint planeIndex, uint* pDisplayCount, VkDisplayKHR* pDisplays);
alias PFN_vkGetDisplayModePropertiesKHR = VkResult function (VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint* pPropertyCount, VkDisplayModePropertiesKHR* pProperties);
alias PFN_vkCreateDisplayModeKHR = VkResult function (VkPhysicalDevice physicalDevice, VkDisplayKHR display, const(VkDisplayModeCreateInfoKHR)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkDisplayModeKHR* pMode);
alias PFN_vkGetDisplayPlaneCapabilitiesKHR = VkResult function (VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities);
alias PFN_vkCreateDisplayPlaneSurfaceKHR = VkResult function (VkInstance instance, const(VkDisplaySurfaceCreateInfoKHR)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkSurfaceKHR* pSurface);

VkResult vkGetPhysicalDeviceDisplayPropertiesKHR (
    VkPhysicalDevice physicalDevice,
    uint* pPropertyCount,
    VkDisplayPropertiesKHR* pProperties);

VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR (
    VkPhysicalDevice physicalDevice,
    uint* pPropertyCount,
    VkDisplayPlanePropertiesKHR* pProperties);

VkResult vkGetDisplayPlaneSupportedDisplaysKHR (
    VkPhysicalDevice physicalDevice,
    uint planeIndex,
    uint* pDisplayCount,
    VkDisplayKHR* pDisplays);

VkResult vkGetDisplayModePropertiesKHR (
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    uint* pPropertyCount,
    VkDisplayModePropertiesKHR* pProperties);

VkResult vkCreateDisplayModeKHR (
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    const(VkDisplayModeCreateInfoKHR)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkDisplayModeKHR* pMode);

VkResult vkGetDisplayPlaneCapabilitiesKHR (
    VkPhysicalDevice physicalDevice,
    VkDisplayModeKHR mode,
    uint planeIndex,
    VkDisplayPlaneCapabilitiesKHR* pCapabilities);

VkResult vkCreateDisplayPlaneSurfaceKHR (
    VkInstance instance,
    const(VkDisplaySurfaceCreateInfoKHR)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkSurfaceKHR* pSurface);

enum VK_KHR_display_swapchain = 1;
enum VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = 10;
enum VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain";

struct VkDisplayPresentInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkRect2D srcRect;
    VkRect2D dstRect;
    VkBool32 persistent;
}

alias PFN_vkCreateSharedSwapchainsKHR = VkResult function (VkDevice device, uint swapchainCount, const(VkSwapchainCreateInfoKHR)* pCreateInfos, const(VkAllocationCallbacks)* pAllocator, VkSwapchainKHR* pSwapchains);

VkResult vkCreateSharedSwapchainsKHR (
    VkDevice device,
    uint swapchainCount,
    const(VkSwapchainCreateInfoKHR)* pCreateInfos,
    const(VkAllocationCallbacks)* pAllocator,
    VkSwapchainKHR* pSwapchains);

enum VK_KHR_sampler_mirror_clamp_to_edge = 1;
enum VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION = 3;
enum VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = "VK_KHR_sampler_mirror_clamp_to_edge";

enum VK_KHR_dynamic_rendering = 1;
enum VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION = 1;
enum VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME = "VK_KHR_dynamic_rendering";
alias VkRenderingFlagsKHR = uint;

alias VkRenderingFlagBitsKHR = VkRenderingFlagBits;

alias VkRenderingInfoKHR = VkRenderingInfo;

alias VkRenderingAttachmentInfoKHR = VkRenderingAttachmentInfo;

alias VkPipelineRenderingCreateInfoKHR = VkPipelineRenderingCreateInfo;

alias VkPhysicalDeviceDynamicRenderingFeaturesKHR = VkPhysicalDeviceDynamicRenderingFeatures;

alias VkCommandBufferInheritanceRenderingInfoKHR = VkCommandBufferInheritanceRenderingInfo;

struct VkRenderingFragmentShadingRateAttachmentInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkImageView imageView;
    VkImageLayout imageLayout;
    VkExtent2D shadingRateAttachmentTexelSize;
}

struct VkRenderingFragmentDensityMapAttachmentInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkImageView imageView;
    VkImageLayout imageLayout;
}

struct VkAttachmentSampleCountInfoAMD
{
    VkStructureType sType;
    const(void)* pNext;
    uint colorAttachmentCount;
    const(VkSampleCountFlagBits)* pColorAttachmentSamples;
    VkSampleCountFlagBits depthStencilAttachmentSamples;
}

alias VkAttachmentSampleCountInfoNV = VkAttachmentSampleCountInfoAMD;

struct VkMultiviewPerViewAttributesInfoNVX
{
    VkStructureType sType;
    const(void)* pNext;
    VkBool32 perViewAttributes;
    VkBool32 perViewAttributesPositionXOnly;
}

alias PFN_vkCmdBeginRenderingKHR = void function (VkCommandBuffer commandBuffer, const(VkRenderingInfo)* pRenderingInfo);
alias PFN_vkCmdEndRenderingKHR = void function (VkCommandBuffer commandBuffer);

void vkCmdBeginRenderingKHR (
    VkCommandBuffer commandBuffer,
    const(VkRenderingInfo)* pRenderingInfo);

void vkCmdEndRenderingKHR (VkCommandBuffer commandBuffer);

enum VK_KHR_multiview = 1;
enum VK_KHR_MULTIVIEW_SPEC_VERSION = 1;
enum VK_KHR_MULTIVIEW_EXTENSION_NAME = "VK_KHR_multiview";
alias VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo;

alias VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures;

alias VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties;

enum VK_KHR_get_physical_device_properties2 = 1;
enum VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION = 2;
enum VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_physical_device_properties2";
alias VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2;

alias VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2;

alias VkFormatProperties2KHR = VkFormatProperties2;

alias VkImageFormatProperties2KHR = VkImageFormatProperties2;

alias VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2;

alias VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2;

alias VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2;

alias VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2;

alias VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2;

alias PFN_vkGetPhysicalDeviceFeatures2KHR = void function (VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures);
alias PFN_vkGetPhysicalDeviceProperties2KHR = void function (VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties);
alias PFN_vkGetPhysicalDeviceFormatProperties2KHR = void function (VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties);
alias PFN_vkGetPhysicalDeviceImageFormatProperties2KHR = VkResult function (VkPhysicalDevice physicalDevice, const(VkPhysicalDeviceImageFormatInfo2)* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties);
alias PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR = void function (VkPhysicalDevice physicalDevice, uint* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties);
alias PFN_vkGetPhysicalDeviceMemoryProperties2KHR = void function (VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties);
alias PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = void function (VkPhysicalDevice physicalDevice, const(VkPhysicalDeviceSparseImageFormatInfo2)* pFormatInfo, uint* pPropertyCount, VkSparseImageFormatProperties2* pProperties);

void vkGetPhysicalDeviceFeatures2KHR (
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures);

void vkGetPhysicalDeviceProperties2KHR (
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties2* pProperties);

void vkGetPhysicalDeviceFormatProperties2KHR (
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties2* pFormatProperties);

VkResult vkGetPhysicalDeviceImageFormatProperties2KHR (
    VkPhysicalDevice physicalDevice,
    const(VkPhysicalDeviceImageFormatInfo2)* pImageFormatInfo,
    VkImageFormatProperties2* pImageFormatProperties);

void vkGetPhysicalDeviceQueueFamilyProperties2KHR (
    VkPhysicalDevice physicalDevice,
    uint* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties);

void vkGetPhysicalDeviceMemoryProperties2KHR (
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties);

void vkGetPhysicalDeviceSparseImageFormatProperties2KHR (
    VkPhysicalDevice physicalDevice,
    const(VkPhysicalDeviceSparseImageFormatInfo2)* pFormatInfo,
    uint* pPropertyCount,
    VkSparseImageFormatProperties2* pProperties);

enum VK_KHR_device_group = 1;
enum VK_KHR_DEVICE_GROUP_SPEC_VERSION = 4;
enum VK_KHR_DEVICE_GROUP_EXTENSION_NAME = "VK_KHR_device_group";
alias VkPeerMemoryFeatureFlagsKHR = uint;

alias VkPeerMemoryFeatureFlagBitsKHR = VkPeerMemoryFeatureFlagBits;

alias VkMemoryAllocateFlagsKHR = uint;

alias VkMemoryAllocateFlagBitsKHR = VkMemoryAllocateFlagBits;

alias VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo;

alias VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo;

alias VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo;

alias VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo;

alias VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo;

alias VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo;

alias VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo;

alias PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR = void function (VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures);
alias PFN_vkCmdSetDeviceMaskKHR = void function (VkCommandBuffer commandBuffer, uint deviceMask);
alias PFN_vkCmdDispatchBaseKHR = void function (VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ);

void vkGetDeviceGroupPeerMemoryFeaturesKHR (
    VkDevice device,
    uint heapIndex,
    uint localDeviceIndex,
    uint remoteDeviceIndex,
    VkPeerMemoryFeatureFlags* pPeerMemoryFeatures);

void vkCmdSetDeviceMaskKHR (VkCommandBuffer commandBuffer, uint deviceMask);

void vkCmdDispatchBaseKHR (
    VkCommandBuffer commandBuffer,
    uint baseGroupX,
    uint baseGroupY,
    uint baseGroupZ,
    uint groupCountX,
    uint groupCountY,
    uint groupCountZ);

enum VK_KHR_shader_draw_parameters = 1;
enum VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION = 1;
enum VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME = "VK_KHR_shader_draw_parameters";

enum VK_KHR_maintenance1 = 1;
enum VK_KHR_MAINTENANCE_1_SPEC_VERSION = 2;
enum VK_KHR_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_maintenance1";
enum VK_KHR_MAINTENANCE1_SPEC_VERSION = VK_KHR_MAINTENANCE_1_SPEC_VERSION;
enum VK_KHR_MAINTENANCE1_EXTENSION_NAME = VK_KHR_MAINTENANCE_1_EXTENSION_NAME;
alias VkCommandPoolTrimFlagsKHR = uint;

alias PFN_vkTrimCommandPoolKHR = void function (VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags);

void vkTrimCommandPoolKHR (
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolTrimFlags flags);

enum VK_KHR_device_group_creation = 1;
enum VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION = 1;
enum VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME = "VK_KHR_device_group_creation";
enum VK_MAX_DEVICE_GROUP_SIZE_KHR = VK_MAX_DEVICE_GROUP_SIZE;
alias VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties;

alias VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo;

alias PFN_vkEnumeratePhysicalDeviceGroupsKHR = VkResult function (VkInstance instance, uint* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);

VkResult vkEnumeratePhysicalDeviceGroupsKHR (
    VkInstance instance,
    uint* pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);

enum VK_KHR_external_memory_capabilities = 1;
enum VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1;
enum VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_memory_capabilities";
enum VK_LUID_SIZE_KHR = VK_LUID_SIZE;
alias VkExternalMemoryHandleTypeFlagsKHR = uint;

alias VkExternalMemoryHandleTypeFlagBitsKHR = VkExternalMemoryHandleTypeFlagBits;

alias VkExternalMemoryFeatureFlagsKHR = uint;

alias VkExternalMemoryFeatureFlagBitsKHR = VkExternalMemoryFeatureFlagBits;

alias VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties;

alias VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo;

alias VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties;

alias VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo;

alias VkExternalBufferPropertiesKHR = VkExternalBufferProperties;

alias VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties;

alias PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR = void function (VkPhysicalDevice physicalDevice, const(VkPhysicalDeviceExternalBufferInfo)* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties);

void vkGetPhysicalDeviceExternalBufferPropertiesKHR (
    VkPhysicalDevice physicalDevice,
    const(VkPhysicalDeviceExternalBufferInfo)* pExternalBufferInfo,
    VkExternalBufferProperties* pExternalBufferProperties);

enum VK_KHR_external_memory = 1;
enum VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION = 1;
enum VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_KHR_external_memory";
enum VK_QUEUE_FAMILY_EXTERNAL_KHR = VK_QUEUE_FAMILY_EXTERNAL;
alias VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo;

alias VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo;

alias VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo;

enum VK_KHR_external_memory_fd = 1;
enum VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION = 1;
enum VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME = "VK_KHR_external_memory_fd";

struct VkImportMemoryFdInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkExternalMemoryHandleTypeFlagBits handleType;
    int fd;
}

struct VkMemoryFdPropertiesKHR
{
    VkStructureType sType;
    void* pNext;
    uint memoryTypeBits;
}

struct VkMemoryGetFdInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceMemory memory;
    VkExternalMemoryHandleTypeFlagBits handleType;
}

alias PFN_vkGetMemoryFdKHR = VkResult function (VkDevice device, const(VkMemoryGetFdInfoKHR)* pGetFdInfo, int* pFd);
alias PFN_vkGetMemoryFdPropertiesKHR = VkResult function (VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties);

VkResult vkGetMemoryFdKHR (
    VkDevice device,
    const(VkMemoryGetFdInfoKHR)* pGetFdInfo,
    int* pFd);

VkResult vkGetMemoryFdPropertiesKHR (
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    int fd,
    VkMemoryFdPropertiesKHR* pMemoryFdProperties);

enum VK_KHR_external_semaphore_capabilities = 1;
enum VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION = 1;
enum VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_semaphore_capabilities";
alias VkExternalSemaphoreHandleTypeFlagsKHR = uint;

alias VkExternalSemaphoreHandleTypeFlagBitsKHR = VkExternalSemaphoreHandleTypeFlagBits;

alias VkExternalSemaphoreFeatureFlagsKHR = uint;

alias VkExternalSemaphoreFeatureFlagBitsKHR = VkExternalSemaphoreFeatureFlagBits;

alias VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo;

alias VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties;

alias PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = void function (VkPhysicalDevice physicalDevice, const(VkPhysicalDeviceExternalSemaphoreInfo)* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties);

void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR (
    VkPhysicalDevice physicalDevice,
    const(VkPhysicalDeviceExternalSemaphoreInfo)* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties* pExternalSemaphoreProperties);

enum VK_KHR_external_semaphore = 1;
enum VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION = 1;
enum VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME = "VK_KHR_external_semaphore";
alias VkSemaphoreImportFlagsKHR = uint;

alias VkSemaphoreImportFlagBitsKHR = VkSemaphoreImportFlagBits;

alias VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo;

enum VK_KHR_external_semaphore_fd = 1;
enum VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION = 1;
enum VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME = "VK_KHR_external_semaphore_fd";

struct VkImportSemaphoreFdInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkSemaphore semaphore;
    VkSemaphoreImportFlags flags;
    VkExternalSemaphoreHandleTypeFlagBits handleType;
    int fd;
}

struct VkSemaphoreGetFdInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkSemaphore semaphore;
    VkExternalSemaphoreHandleTypeFlagBits handleType;
}

alias PFN_vkImportSemaphoreFdKHR = VkResult function (VkDevice device, const(VkImportSemaphoreFdInfoKHR)* pImportSemaphoreFdInfo);
alias PFN_vkGetSemaphoreFdKHR = VkResult function (VkDevice device, const(VkSemaphoreGetFdInfoKHR)* pGetFdInfo, int* pFd);

VkResult vkImportSemaphoreFdKHR (
    VkDevice device,
    const(VkImportSemaphoreFdInfoKHR)* pImportSemaphoreFdInfo);

VkResult vkGetSemaphoreFdKHR (
    VkDevice device,
    const(VkSemaphoreGetFdInfoKHR)* pGetFdInfo,
    int* pFd);

enum VK_KHR_push_descriptor = 1;
enum VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION = 2;
enum VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME = "VK_KHR_push_descriptor";

struct VkPhysicalDevicePushDescriptorPropertiesKHR
{
    VkStructureType sType;
    void* pNext;
    uint maxPushDescriptors;
}

alias PFN_vkCmdPushDescriptorSetKHR = void function (VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, const(VkWriteDescriptorSet)* pDescriptorWrites);
alias PFN_vkCmdPushDescriptorSetWithTemplateKHR = void function (VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint set, const(void)* pData);

void vkCmdPushDescriptorSetKHR (
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipelineLayout layout,
    uint set,
    uint descriptorWriteCount,
    const(VkWriteDescriptorSet)* pDescriptorWrites);

void vkCmdPushDescriptorSetWithTemplateKHR (
    VkCommandBuffer commandBuffer,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    VkPipelineLayout layout,
    uint set,
    const(void)* pData);

enum VK_KHR_shader_float16_int8 = 1;
enum VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION = 1;
enum VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME = "VK_KHR_shader_float16_int8";
alias VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;

alias VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;

enum VK_KHR_16bit_storage = 1;
enum VK_KHR_16BIT_STORAGE_SPEC_VERSION = 1;
enum VK_KHR_16BIT_STORAGE_EXTENSION_NAME = "VK_KHR_16bit_storage";
alias VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures;

enum VK_KHR_incremental_present = 1;
enum VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION = 2;
enum VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME = "VK_KHR_incremental_present";

struct VkRectLayerKHR
{
    VkOffset2D offset;
    VkExtent2D extent;
    uint layer;
}

struct VkPresentRegionKHR
{
    uint rectangleCount;
    const(VkRectLayerKHR)* pRectangles;
}

struct VkPresentRegionsKHR
{
    VkStructureType sType;
    const(void)* pNext;
    uint swapchainCount;
    const(VkPresentRegionKHR)* pRegions;
}

enum VK_KHR_descriptor_update_template = 1;
alias VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate_T*;

enum VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION = 1;
enum VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME = "VK_KHR_descriptor_update_template";
alias VkDescriptorUpdateTemplateTypeKHR = VkDescriptorUpdateTemplateType;

alias VkDescriptorUpdateTemplateCreateFlagsKHR = uint;

alias VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry;

alias VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo;

alias PFN_vkCreateDescriptorUpdateTemplateKHR = VkResult function (VkDevice device, const(VkDescriptorUpdateTemplateCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate);
alias PFN_vkDestroyDescriptorUpdateTemplateKHR = void function (VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkUpdateDescriptorSetWithTemplateKHR = void function (VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, const(void)* pData);

VkResult vkCreateDescriptorUpdateTemplateKHR (
    VkDevice device,
    const(VkDescriptorUpdateTemplateCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate);

void vkDestroyDescriptorUpdateTemplateKHR (
    VkDevice device,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const(VkAllocationCallbacks)* pAllocator);

void vkUpdateDescriptorSetWithTemplateKHR (
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const(void)* pData);

enum VK_KHR_imageless_framebuffer = 1;
enum VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION = 1;
enum VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME = "VK_KHR_imageless_framebuffer";
alias VkPhysicalDeviceImagelessFramebufferFeaturesKHR = VkPhysicalDeviceImagelessFramebufferFeatures;

alias VkFramebufferAttachmentsCreateInfoKHR = VkFramebufferAttachmentsCreateInfo;

alias VkFramebufferAttachmentImageInfoKHR = VkFramebufferAttachmentImageInfo;

alias VkRenderPassAttachmentBeginInfoKHR = VkRenderPassAttachmentBeginInfo;

enum VK_KHR_create_renderpass2 = 1;
enum VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION = 1;
enum VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME = "VK_KHR_create_renderpass2";
alias VkRenderPassCreateInfo2KHR = VkRenderPassCreateInfo2;

alias VkAttachmentDescription2KHR = VkAttachmentDescription2;

alias VkAttachmentReference2KHR = VkAttachmentReference2;

alias VkSubpassDescription2KHR = VkSubpassDescription2;

alias VkSubpassDependency2KHR = VkSubpassDependency2;

alias VkSubpassBeginInfoKHR = VkSubpassBeginInfo;

alias VkSubpassEndInfoKHR = VkSubpassEndInfo;

alias PFN_vkCreateRenderPass2KHR = VkResult function (VkDevice device, const(VkRenderPassCreateInfo2)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkRenderPass* pRenderPass);
alias PFN_vkCmdBeginRenderPass2KHR = void function (VkCommandBuffer commandBuffer, const(VkRenderPassBeginInfo)* pRenderPassBegin, const(VkSubpassBeginInfo)* pSubpassBeginInfo);
alias PFN_vkCmdNextSubpass2KHR = void function (VkCommandBuffer commandBuffer, const(VkSubpassBeginInfo)* pSubpassBeginInfo, const(VkSubpassEndInfo)* pSubpassEndInfo);
alias PFN_vkCmdEndRenderPass2KHR = void function (VkCommandBuffer commandBuffer, const(VkSubpassEndInfo)* pSubpassEndInfo);

VkResult vkCreateRenderPass2KHR (
    VkDevice device,
    const(VkRenderPassCreateInfo2)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkRenderPass* pRenderPass);

void vkCmdBeginRenderPass2KHR (
    VkCommandBuffer commandBuffer,
    const(VkRenderPassBeginInfo)* pRenderPassBegin,
    const(VkSubpassBeginInfo)* pSubpassBeginInfo);

void vkCmdNextSubpass2KHR (
    VkCommandBuffer commandBuffer,
    const(VkSubpassBeginInfo)* pSubpassBeginInfo,
    const(VkSubpassEndInfo)* pSubpassEndInfo);

void vkCmdEndRenderPass2KHR (
    VkCommandBuffer commandBuffer,
    const(VkSubpassEndInfo)* pSubpassEndInfo);

enum VK_KHR_shared_presentable_image = 1;
enum VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION = 1;
enum VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME = "VK_KHR_shared_presentable_image";

struct VkSharedPresentSurfaceCapabilitiesKHR
{
    VkStructureType sType;
    void* pNext;
    VkImageUsageFlags sharedPresentSupportedUsageFlags;
}

alias PFN_vkGetSwapchainStatusKHR = VkResult function (VkDevice device, VkSwapchainKHR swapchain);

VkResult vkGetSwapchainStatusKHR (VkDevice device, VkSwapchainKHR swapchain);

enum VK_KHR_external_fence_capabilities = 1;
enum VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION = 1;
enum VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_fence_capabilities";
alias VkExternalFenceHandleTypeFlagsKHR = uint;

alias VkExternalFenceHandleTypeFlagBitsKHR = VkExternalFenceHandleTypeFlagBits;

alias VkExternalFenceFeatureFlagsKHR = uint;

alias VkExternalFenceFeatureFlagBitsKHR = VkExternalFenceFeatureFlagBits;

alias VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo;

alias VkExternalFencePropertiesKHR = VkExternalFenceProperties;

alias PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR = void function (VkPhysicalDevice physicalDevice, const(VkPhysicalDeviceExternalFenceInfo)* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties);

void vkGetPhysicalDeviceExternalFencePropertiesKHR (
    VkPhysicalDevice physicalDevice,
    const(VkPhysicalDeviceExternalFenceInfo)* pExternalFenceInfo,
    VkExternalFenceProperties* pExternalFenceProperties);

enum VK_KHR_external_fence = 1;
enum VK_KHR_EXTERNAL_FENCE_SPEC_VERSION = 1;
enum VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME = "VK_KHR_external_fence";
alias VkFenceImportFlagsKHR = uint;

alias VkFenceImportFlagBitsKHR = VkFenceImportFlagBits;

alias VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo;

enum VK_KHR_external_fence_fd = 1;
enum VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION = 1;
enum VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME = "VK_KHR_external_fence_fd";

struct VkImportFenceFdInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkFence fence;
    VkFenceImportFlags flags;
    VkExternalFenceHandleTypeFlagBits handleType;
    int fd;
}

struct VkFenceGetFdInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkFence fence;
    VkExternalFenceHandleTypeFlagBits handleType;
}

alias PFN_vkImportFenceFdKHR = VkResult function (VkDevice device, const(VkImportFenceFdInfoKHR)* pImportFenceFdInfo);
alias PFN_vkGetFenceFdKHR = VkResult function (VkDevice device, const(VkFenceGetFdInfoKHR)* pGetFdInfo, int* pFd);

VkResult vkImportFenceFdKHR (
    VkDevice device,
    const(VkImportFenceFdInfoKHR)* pImportFenceFdInfo);

VkResult vkGetFenceFdKHR (
    VkDevice device,
    const(VkFenceGetFdInfoKHR)* pGetFdInfo,
    int* pFd);

enum VK_KHR_performance_query = 1;
enum VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION = 1;
enum VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_KHR_performance_query";

enum VkPerformanceCounterUnitKHR
{
    VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0,
    VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1,
    VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2,
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3,
    VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4,
    VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5,
    VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6,
    VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7,
    VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8,
    VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9,
    VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10,
    VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR = 0x7FFFFFFF
}

enum VkPerformanceCounterScopeKHR
{
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0,
    VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1,
    VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2,
    VK_QUERY_SCOPE_COMMAND_BUFFER_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR,
    VK_QUERY_SCOPE_RENDER_PASS_KHR = VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR,
    VK_QUERY_SCOPE_COMMAND_KHR = VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR,
    VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR = 0x7FFFFFFF
}

enum VkPerformanceCounterStorageKHR
{
    VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0,
    VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1,
    VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2,
    VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3,
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4,
    VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5,
    VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR = 0x7FFFFFFF
}

enum VkPerformanceCounterDescriptionFlagBitsKHR
{
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR = 0x00000001,
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR = 0x00000002,
    VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR = VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR,
    VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR = VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR,
    VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
}

alias VkPerformanceCounterDescriptionFlagsKHR = uint;

enum VkAcquireProfilingLockFlagBitsKHR
{
    VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
}

alias VkAcquireProfilingLockFlagsKHR = uint;

struct VkPhysicalDevicePerformanceQueryFeaturesKHR
{
    VkStructureType sType;
    void* pNext;
    VkBool32 performanceCounterQueryPools;
    VkBool32 performanceCounterMultipleQueryPools;
}

struct VkPhysicalDevicePerformanceQueryPropertiesKHR
{
    VkStructureType sType;
    void* pNext;
    VkBool32 allowCommandBufferQueryCopies;
}

struct VkPerformanceCounterKHR
{
    VkStructureType sType;
    void* pNext;
    VkPerformanceCounterUnitKHR unit;
    VkPerformanceCounterScopeKHR scope_;
    VkPerformanceCounterStorageKHR storage;
    ubyte[VK_UUID_SIZE] uuid;
}

struct VkPerformanceCounterDescriptionKHR
{
    VkStructureType sType;
    void* pNext;
    VkPerformanceCounterDescriptionFlagsKHR flags;
    char[VK_MAX_DESCRIPTION_SIZE] name;
    char[VK_MAX_DESCRIPTION_SIZE] category;
    char[VK_MAX_DESCRIPTION_SIZE] description;
}

struct VkQueryPoolPerformanceCreateInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    uint queueFamilyIndex;
    uint counterIndexCount;
    const(uint)* pCounterIndices;
}

union VkPerformanceCounterResultKHR
{
    int int32;
    long int64;
    uint uint32;
    ulong uint64;
    float float32;
    double float64;
}

struct VkAcquireProfilingLockInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkAcquireProfilingLockFlagsKHR flags;
    ulong timeout;
}

struct VkPerformanceQuerySubmitInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    uint counterPassIndex;
}

alias PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = VkResult function (VkPhysicalDevice physicalDevice, uint queueFamilyIndex, uint* pCounterCount, VkPerformanceCounterKHR* pCounters, VkPerformanceCounterDescriptionKHR* pCounterDescriptions);
alias PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = void function (VkPhysicalDevice physicalDevice, const(VkQueryPoolPerformanceCreateInfoKHR)* pPerformanceQueryCreateInfo, uint* pNumPasses);
alias PFN_vkAcquireProfilingLockKHR = VkResult function (VkDevice device, const(VkAcquireProfilingLockInfoKHR)* pInfo);
alias PFN_vkReleaseProfilingLockKHR = void function (VkDevice device);

VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR (
    VkPhysicalDevice physicalDevice,
    uint queueFamilyIndex,
    uint* pCounterCount,
    VkPerformanceCounterKHR* pCounters,
    VkPerformanceCounterDescriptionKHR* pCounterDescriptions);

void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR (
    VkPhysicalDevice physicalDevice,
    const(VkQueryPoolPerformanceCreateInfoKHR)* pPerformanceQueryCreateInfo,
    uint* pNumPasses);

VkResult vkAcquireProfilingLockKHR (
    VkDevice device,
    const(VkAcquireProfilingLockInfoKHR)* pInfo);

void vkReleaseProfilingLockKHR (VkDevice device);

enum VK_KHR_maintenance2 = 1;
enum VK_KHR_MAINTENANCE_2_SPEC_VERSION = 1;
enum VK_KHR_MAINTENANCE_2_EXTENSION_NAME = "VK_KHR_maintenance2";
enum VK_KHR_MAINTENANCE2_SPEC_VERSION = VK_KHR_MAINTENANCE_2_SPEC_VERSION;
enum VK_KHR_MAINTENANCE2_EXTENSION_NAME = VK_KHR_MAINTENANCE_2_EXTENSION_NAME;
alias VkPointClippingBehaviorKHR = VkPointClippingBehavior;

alias VkTessellationDomainOriginKHR = VkTessellationDomainOrigin;

alias VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties;

alias VkRenderPassInputAttachmentAspectCreateInfoKHR = VkRenderPassInputAttachmentAspectCreateInfo;

alias VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference;

alias VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo;

alias VkPipelineTessellationDomainOriginStateCreateInfoKHR = VkPipelineTessellationDomainOriginStateCreateInfo;

enum VK_KHR_get_surface_capabilities2 = 1;
enum VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION = 1;
enum VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME = "VK_KHR_get_surface_capabilities2";

struct VkPhysicalDeviceSurfaceInfo2KHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkSurfaceKHR surface;
}

struct VkSurfaceCapabilities2KHR
{
    VkStructureType sType;
    void* pNext;
    VkSurfaceCapabilitiesKHR surfaceCapabilities;
}

struct VkSurfaceFormat2KHR
{
    VkStructureType sType;
    void* pNext;
    VkSurfaceFormatKHR surfaceFormat;
}

alias PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = VkResult function (VkPhysicalDevice physicalDevice, const(VkPhysicalDeviceSurfaceInfo2KHR)* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities);
alias PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = VkResult function (VkPhysicalDevice physicalDevice, const(VkPhysicalDeviceSurfaceInfo2KHR)* pSurfaceInfo, uint* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats);

VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR (
    VkPhysicalDevice physicalDevice,
    const(VkPhysicalDeviceSurfaceInfo2KHR)* pSurfaceInfo,
    VkSurfaceCapabilities2KHR* pSurfaceCapabilities);

VkResult vkGetPhysicalDeviceSurfaceFormats2KHR (
    VkPhysicalDevice physicalDevice,
    const(VkPhysicalDeviceSurfaceInfo2KHR)* pSurfaceInfo,
    uint* pSurfaceFormatCount,
    VkSurfaceFormat2KHR* pSurfaceFormats);

enum VK_KHR_variable_pointers = 1;
enum VK_KHR_VARIABLE_POINTERS_SPEC_VERSION = 1;
enum VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME = "VK_KHR_variable_pointers";
alias VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;

alias VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;

enum VK_KHR_get_display_properties2 = 1;
enum VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION = 1;
enum VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_display_properties2";

struct VkDisplayProperties2KHR
{
    VkStructureType sType;
    void* pNext;
    VkDisplayPropertiesKHR displayProperties;
}

struct VkDisplayPlaneProperties2KHR
{
    VkStructureType sType;
    void* pNext;
    VkDisplayPlanePropertiesKHR displayPlaneProperties;
}

struct VkDisplayModeProperties2KHR
{
    VkStructureType sType;
    void* pNext;
    VkDisplayModePropertiesKHR displayModeProperties;
}

struct VkDisplayPlaneInfo2KHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkDisplayModeKHR mode;
    uint planeIndex;
}

struct VkDisplayPlaneCapabilities2KHR
{
    VkStructureType sType;
    void* pNext;
    VkDisplayPlaneCapabilitiesKHR capabilities;
}

alias PFN_vkGetPhysicalDeviceDisplayProperties2KHR = VkResult function (VkPhysicalDevice physicalDevice, uint* pPropertyCount, VkDisplayProperties2KHR* pProperties);
alias PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = VkResult function (VkPhysicalDevice physicalDevice, uint* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties);
alias PFN_vkGetDisplayModeProperties2KHR = VkResult function (VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint* pPropertyCount, VkDisplayModeProperties2KHR* pProperties);
alias PFN_vkGetDisplayPlaneCapabilities2KHR = VkResult function (VkPhysicalDevice physicalDevice, const(VkDisplayPlaneInfo2KHR)* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities);

VkResult vkGetPhysicalDeviceDisplayProperties2KHR (
    VkPhysicalDevice physicalDevice,
    uint* pPropertyCount,
    VkDisplayProperties2KHR* pProperties);

VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR (
    VkPhysicalDevice physicalDevice,
    uint* pPropertyCount,
    VkDisplayPlaneProperties2KHR* pProperties);

VkResult vkGetDisplayModeProperties2KHR (
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    uint* pPropertyCount,
    VkDisplayModeProperties2KHR* pProperties);

VkResult vkGetDisplayPlaneCapabilities2KHR (
    VkPhysicalDevice physicalDevice,
    const(VkDisplayPlaneInfo2KHR)* pDisplayPlaneInfo,
    VkDisplayPlaneCapabilities2KHR* pCapabilities);

enum VK_KHR_dedicated_allocation = 1;
enum VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION = 3;
enum VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_KHR_dedicated_allocation";
alias VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements;

alias VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo;

enum VK_KHR_storage_buffer_storage_class = 1;
enum VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION = 1;
enum VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME = "VK_KHR_storage_buffer_storage_class";

enum VK_KHR_relaxed_block_layout = 1;
enum VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION = 1;
enum VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME = "VK_KHR_relaxed_block_layout";

enum VK_KHR_get_memory_requirements2 = 1;
enum VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION = 1;
enum VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME = "VK_KHR_get_memory_requirements2";
alias VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2;

alias VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2;

alias VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2;

alias VkMemoryRequirements2KHR = VkMemoryRequirements2;

alias VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2;

alias PFN_vkGetImageMemoryRequirements2KHR = void function (VkDevice device, const(VkImageMemoryRequirementsInfo2)* pInfo, VkMemoryRequirements2* pMemoryRequirements);
alias PFN_vkGetBufferMemoryRequirements2KHR = void function (VkDevice device, const(VkBufferMemoryRequirementsInfo2)* pInfo, VkMemoryRequirements2* pMemoryRequirements);
alias PFN_vkGetImageSparseMemoryRequirements2KHR = void function (VkDevice device, const(VkImageSparseMemoryRequirementsInfo2)* pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

void vkGetImageMemoryRequirements2KHR (
    VkDevice device,
    const(VkImageMemoryRequirementsInfo2)* pInfo,
    VkMemoryRequirements2* pMemoryRequirements);

void vkGetBufferMemoryRequirements2KHR (
    VkDevice device,
    const(VkBufferMemoryRequirementsInfo2)* pInfo,
    VkMemoryRequirements2* pMemoryRequirements);

void vkGetImageSparseMemoryRequirements2KHR (
    VkDevice device,
    const(VkImageSparseMemoryRequirementsInfo2)* pInfo,
    uint* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

enum VK_KHR_image_format_list = 1;
enum VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION = 1;
enum VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME = "VK_KHR_image_format_list";
alias VkImageFormatListCreateInfoKHR = VkImageFormatListCreateInfo;

enum VK_KHR_sampler_ycbcr_conversion = 1;
alias VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion_T*;

enum VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION = 14;
enum VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME = "VK_KHR_sampler_ycbcr_conversion";
alias VkSamplerYcbcrModelConversionKHR = VkSamplerYcbcrModelConversion;

alias VkSamplerYcbcrRangeKHR = VkSamplerYcbcrRange;

alias VkChromaLocationKHR = VkChromaLocation;

alias VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo;

alias VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo;

alias VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo;

alias VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo;

alias VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = VkPhysicalDeviceSamplerYcbcrConversionFeatures;

alias VkSamplerYcbcrConversionImageFormatPropertiesKHR = VkSamplerYcbcrConversionImageFormatProperties;

alias PFN_vkCreateSamplerYcbcrConversionKHR = VkResult function (VkDevice device, const(VkSamplerYcbcrConversionCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion);
alias PFN_vkDestroySamplerYcbcrConversionKHR = void function (VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, const(VkAllocationCallbacks)* pAllocator);

VkResult vkCreateSamplerYcbcrConversionKHR (
    VkDevice device,
    const(VkSamplerYcbcrConversionCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkSamplerYcbcrConversion* pYcbcrConversion);

void vkDestroySamplerYcbcrConversionKHR (
    VkDevice device,
    VkSamplerYcbcrConversion ycbcrConversion,
    const(VkAllocationCallbacks)* pAllocator);

enum VK_KHR_bind_memory2 = 1;
enum VK_KHR_BIND_MEMORY_2_SPEC_VERSION = 1;
enum VK_KHR_BIND_MEMORY_2_EXTENSION_NAME = "VK_KHR_bind_memory2";
alias VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo;

alias VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo;

alias PFN_vkBindBufferMemory2KHR = VkResult function (VkDevice device, uint bindInfoCount, const(VkBindBufferMemoryInfo)* pBindInfos);
alias PFN_vkBindImageMemory2KHR = VkResult function (VkDevice device, uint bindInfoCount, const(VkBindImageMemoryInfo)* pBindInfos);

VkResult vkBindBufferMemory2KHR (
    VkDevice device,
    uint bindInfoCount,
    const(VkBindBufferMemoryInfo)* pBindInfos);

VkResult vkBindImageMemory2KHR (
    VkDevice device,
    uint bindInfoCount,
    const(VkBindImageMemoryInfo)* pBindInfos);

enum VK_KHR_maintenance3 = 1;
enum VK_KHR_MAINTENANCE_3_SPEC_VERSION = 1;
enum VK_KHR_MAINTENANCE_3_EXTENSION_NAME = "VK_KHR_maintenance3";
enum VK_KHR_MAINTENANCE3_SPEC_VERSION = VK_KHR_MAINTENANCE_3_SPEC_VERSION;
enum VK_KHR_MAINTENANCE3_EXTENSION_NAME = VK_KHR_MAINTENANCE_3_EXTENSION_NAME;
alias VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties;

alias VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport;

alias PFN_vkGetDescriptorSetLayoutSupportKHR = void function (VkDevice device, const(VkDescriptorSetLayoutCreateInfo)* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport);

void vkGetDescriptorSetLayoutSupportKHR (
    VkDevice device,
    const(VkDescriptorSetLayoutCreateInfo)* pCreateInfo,
    VkDescriptorSetLayoutSupport* pSupport);

enum VK_KHR_draw_indirect_count = 1;
enum VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION = 1;
enum VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_KHR_draw_indirect_count";
alias PFN_vkCmdDrawIndirectCountKHR = void function (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);
alias PFN_vkCmdDrawIndexedIndirectCountKHR = void function (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);

void vkCmdDrawIndirectCountKHR (
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint maxDrawCount,
    uint stride);

void vkCmdDrawIndexedIndirectCountKHR (
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint maxDrawCount,
    uint stride);

enum VK_KHR_shader_subgroup_extended_types = 1;
enum VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION = 1;
enum VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME = "VK_KHR_shader_subgroup_extended_types";
alias VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;

enum VK_KHR_8bit_storage = 1;
enum VK_KHR_8BIT_STORAGE_SPEC_VERSION = 1;
enum VK_KHR_8BIT_STORAGE_EXTENSION_NAME = "VK_KHR_8bit_storage";
alias VkPhysicalDevice8BitStorageFeaturesKHR = VkPhysicalDevice8BitStorageFeatures;

enum VK_KHR_shader_atomic_int64 = 1;
enum VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION = 1;
enum VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME = "VK_KHR_shader_atomic_int64";
alias VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = VkPhysicalDeviceShaderAtomicInt64Features;

enum VK_KHR_shader_clock = 1;
enum VK_KHR_SHADER_CLOCK_SPEC_VERSION = 1;
enum VK_KHR_SHADER_CLOCK_EXTENSION_NAME = "VK_KHR_shader_clock";

struct VkPhysicalDeviceShaderClockFeaturesKHR
{
    VkStructureType sType;
    void* pNext;
    VkBool32 shaderSubgroupClock;
    VkBool32 shaderDeviceClock;
}

enum VK_KHR_global_priority = 1;
enum VK_MAX_GLOBAL_PRIORITY_SIZE_KHR = 16U;
enum VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION = 1;
enum VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_KHR_global_priority";

enum VkQueueGlobalPriorityKHR
{
    VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = 128,
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = 256,
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = 512,
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = 1024,
    VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT = VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR,
    VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT = VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR,
    VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT = VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR,
    VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT = VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR,
    VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR = 0x7FFFFFFF
}

struct VkDeviceQueueGlobalPriorityCreateInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkQueueGlobalPriorityKHR globalPriority;
}

struct VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR
{
    VkStructureType sType;
    void* pNext;
    VkBool32 globalPriorityQuery;
}

struct VkQueueFamilyGlobalPriorityPropertiesKHR
{
    VkStructureType sType;
    void* pNext;
    uint priorityCount;
    VkQueueGlobalPriorityKHR[VK_MAX_GLOBAL_PRIORITY_SIZE_KHR] priorities;
}

enum VK_KHR_driver_properties = 1;
enum VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION = 1;
enum VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME = "VK_KHR_driver_properties";
enum VK_MAX_DRIVER_NAME_SIZE_KHR = VK_MAX_DRIVER_NAME_SIZE;
enum VK_MAX_DRIVER_INFO_SIZE_KHR = VK_MAX_DRIVER_INFO_SIZE;
alias VkDriverIdKHR = VkDriverId;

alias VkConformanceVersionKHR = VkConformanceVersion;

alias VkPhysicalDeviceDriverPropertiesKHR = VkPhysicalDeviceDriverProperties;

enum VK_KHR_shader_float_controls = 1;
enum VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION = 4;
enum VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME = "VK_KHR_shader_float_controls";
alias VkShaderFloatControlsIndependenceKHR = VkShaderFloatControlsIndependence;

alias VkPhysicalDeviceFloatControlsPropertiesKHR = VkPhysicalDeviceFloatControlsProperties;

enum VK_KHR_depth_stencil_resolve = 1;
enum VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION = 1;
enum VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME = "VK_KHR_depth_stencil_resolve";
alias VkResolveModeFlagBitsKHR = VkResolveModeFlagBits;

alias VkResolveModeFlagsKHR = uint;

alias VkSubpassDescriptionDepthStencilResolveKHR = VkSubpassDescriptionDepthStencilResolve;

alias VkPhysicalDeviceDepthStencilResolvePropertiesKHR = VkPhysicalDeviceDepthStencilResolveProperties;

enum VK_KHR_swapchain_mutable_format = 1;
enum VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION = 1;
enum VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME = "VK_KHR_swapchain_mutable_format";

enum VK_KHR_timeline_semaphore = 1;
enum VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION = 2;
enum VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME = "VK_KHR_timeline_semaphore";
alias VkSemaphoreTypeKHR = VkSemaphoreType;

alias VkSemaphoreWaitFlagBitsKHR = VkSemaphoreWaitFlagBits;

alias VkSemaphoreWaitFlagsKHR = uint;

alias VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = VkPhysicalDeviceTimelineSemaphoreFeatures;

alias VkPhysicalDeviceTimelineSemaphorePropertiesKHR = VkPhysicalDeviceTimelineSemaphoreProperties;

alias VkSemaphoreTypeCreateInfoKHR = VkSemaphoreTypeCreateInfo;

alias VkTimelineSemaphoreSubmitInfoKHR = VkTimelineSemaphoreSubmitInfo;

alias VkSemaphoreWaitInfoKHR = VkSemaphoreWaitInfo;

alias VkSemaphoreSignalInfoKHR = VkSemaphoreSignalInfo;

alias PFN_vkGetSemaphoreCounterValueKHR = VkResult function (VkDevice device, VkSemaphore semaphore, ulong* pValue);
alias PFN_vkWaitSemaphoresKHR = VkResult function (VkDevice device, const(VkSemaphoreWaitInfo)* pWaitInfo, ulong timeout);
alias PFN_vkSignalSemaphoreKHR = VkResult function (VkDevice device, const(VkSemaphoreSignalInfo)* pSignalInfo);

VkResult vkGetSemaphoreCounterValueKHR (
    VkDevice device,
    VkSemaphore semaphore,
    ulong* pValue);

VkResult vkWaitSemaphoresKHR (
    VkDevice device,
    const(VkSemaphoreWaitInfo)* pWaitInfo,
    ulong timeout);

VkResult vkSignalSemaphoreKHR (
    VkDevice device,
    const(VkSemaphoreSignalInfo)* pSignalInfo);

enum VK_KHR_vulkan_memory_model = 1;
enum VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION = 3;
enum VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME = "VK_KHR_vulkan_memory_model";
alias VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = VkPhysicalDeviceVulkanMemoryModelFeatures;

enum VK_KHR_shader_terminate_invocation = 1;
enum VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION = 1;
enum VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME = "VK_KHR_shader_terminate_invocation";
alias VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR = VkPhysicalDeviceShaderTerminateInvocationFeatures;

enum VK_KHR_fragment_shading_rate = 1;
enum VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION = 2;
enum VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME = "VK_KHR_fragment_shading_rate";

enum VkFragmentShadingRateCombinerOpKHR
{
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4,
    VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR = 0x7FFFFFFF
}

struct VkFragmentShadingRateAttachmentInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    const(VkAttachmentReference2)* pFragmentShadingRateAttachment;
    VkExtent2D shadingRateAttachmentTexelSize;
}

struct VkPipelineFragmentShadingRateStateCreateInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkExtent2D fragmentSize;
    VkFragmentShadingRateCombinerOpKHR[2] combinerOps;
}

struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR
{
    VkStructureType sType;
    void* pNext;
    VkBool32 pipelineFragmentShadingRate;
    VkBool32 primitiveFragmentShadingRate;
    VkBool32 attachmentFragmentShadingRate;
}

struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR
{
    VkStructureType sType;
    void* pNext;
    VkExtent2D minFragmentShadingRateAttachmentTexelSize;
    VkExtent2D maxFragmentShadingRateAttachmentTexelSize;
    uint maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
    VkBool32 primitiveFragmentShadingRateWithMultipleViewports;
    VkBool32 layeredShadingRateAttachments;
    VkBool32 fragmentShadingRateNonTrivialCombinerOps;
    VkExtent2D maxFragmentSize;
    uint maxFragmentSizeAspectRatio;
    uint maxFragmentShadingRateCoverageSamples;
    VkSampleCountFlagBits maxFragmentShadingRateRasterizationSamples;
    VkBool32 fragmentShadingRateWithShaderDepthStencilWrites;
    VkBool32 fragmentShadingRateWithSampleMask;
    VkBool32 fragmentShadingRateWithShaderSampleMask;
    VkBool32 fragmentShadingRateWithConservativeRasterization;
    VkBool32 fragmentShadingRateWithFragmentShaderInterlock;
    VkBool32 fragmentShadingRateWithCustomSampleLocations;
    VkBool32 fragmentShadingRateStrictMultiplyCombiner;
}

struct VkPhysicalDeviceFragmentShadingRateKHR
{
    VkStructureType sType;
    void* pNext;
    VkSampleCountFlags sampleCounts;
    VkExtent2D fragmentSize;
}

alias PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR = VkResult function (VkPhysicalDevice physicalDevice, uint* pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates);
alias PFN_vkCmdSetFragmentShadingRateKHR = void function (VkCommandBuffer commandBuffer, const(VkExtent2D)* pFragmentSize, const(VkFragmentShadingRateCombinerOpKHR)[2] combinerOps);

VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR (
    VkPhysicalDevice physicalDevice,
    uint* pFragmentShadingRateCount,
    VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates);

void vkCmdSetFragmentShadingRateKHR (
    VkCommandBuffer commandBuffer,
    const(VkExtent2D)* pFragmentSize,
    ref const(VkFragmentShadingRateCombinerOpKHR)[2] combinerOps);

enum VK_KHR_spirv_1_4 = 1;
enum VK_KHR_SPIRV_1_4_SPEC_VERSION = 1;
enum VK_KHR_SPIRV_1_4_EXTENSION_NAME = "VK_KHR_spirv_1_4";

enum VK_KHR_surface_protected_capabilities = 1;
enum VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION = 1;
enum VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME = "VK_KHR_surface_protected_capabilities";

struct VkSurfaceProtectedCapabilitiesKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkBool32 supportsProtected;
}

enum VK_KHR_separate_depth_stencil_layouts = 1;
enum VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION = 1;
enum VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME = "VK_KHR_separate_depth_stencil_layouts";
alias VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;

alias VkAttachmentReferenceStencilLayoutKHR = VkAttachmentReferenceStencilLayout;

alias VkAttachmentDescriptionStencilLayoutKHR = VkAttachmentDescriptionStencilLayout;

enum VK_KHR_present_wait = 1;
enum VK_KHR_PRESENT_WAIT_SPEC_VERSION = 1;
enum VK_KHR_PRESENT_WAIT_EXTENSION_NAME = "VK_KHR_present_wait";

struct VkPhysicalDevicePresentWaitFeaturesKHR
{
    VkStructureType sType;
    void* pNext;
    VkBool32 presentWait;
}

alias PFN_vkWaitForPresentKHR = VkResult function (VkDevice device, VkSwapchainKHR swapchain, ulong presentId, ulong timeout);

VkResult vkWaitForPresentKHR (
    VkDevice device,
    VkSwapchainKHR swapchain,
    ulong presentId,
    ulong timeout);

enum VK_KHR_uniform_buffer_standard_layout = 1;
enum VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION = 1;
enum VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME = "VK_KHR_uniform_buffer_standard_layout";
alias VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = VkPhysicalDeviceUniformBufferStandardLayoutFeatures;

enum VK_KHR_buffer_device_address = 1;
enum VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 1;
enum VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_KHR_buffer_device_address";
alias VkPhysicalDeviceBufferDeviceAddressFeaturesKHR = VkPhysicalDeviceBufferDeviceAddressFeatures;

alias VkBufferDeviceAddressInfoKHR = VkBufferDeviceAddressInfo;

alias VkBufferOpaqueCaptureAddressCreateInfoKHR = VkBufferOpaqueCaptureAddressCreateInfo;

alias VkMemoryOpaqueCaptureAddressAllocateInfoKHR = VkMemoryOpaqueCaptureAddressAllocateInfo;

alias VkDeviceMemoryOpaqueCaptureAddressInfoKHR = VkDeviceMemoryOpaqueCaptureAddressInfo;

alias PFN_vkGetBufferDeviceAddressKHR = ulong function (VkDevice device, const(VkBufferDeviceAddressInfo)* pInfo);
alias PFN_vkGetBufferOpaqueCaptureAddressKHR = ulong function (VkDevice device, const(VkBufferDeviceAddressInfo)* pInfo);
alias PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR = ulong function (VkDevice device, const(VkDeviceMemoryOpaqueCaptureAddressInfo)* pInfo);

VkDeviceAddress vkGetBufferDeviceAddressKHR (
    VkDevice device,
    const(VkBufferDeviceAddressInfo)* pInfo);

ulong vkGetBufferOpaqueCaptureAddressKHR (
    VkDevice device,
    const(VkBufferDeviceAddressInfo)* pInfo);

ulong vkGetDeviceMemoryOpaqueCaptureAddressKHR (
    VkDevice device,
    const(VkDeviceMemoryOpaqueCaptureAddressInfo)* pInfo);

enum VK_KHR_deferred_host_operations = 1;
struct VkDeferredOperationKHR_T;
alias VkDeferredOperationKHR = VkDeferredOperationKHR_T*;
enum VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION = 4;
enum VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME = "VK_KHR_deferred_host_operations";
alias PFN_vkCreateDeferredOperationKHR = VkResult function (VkDevice device, const(VkAllocationCallbacks)* pAllocator, VkDeferredOperationKHR* pDeferredOperation);
alias PFN_vkDestroyDeferredOperationKHR = void function (VkDevice device, VkDeferredOperationKHR operation, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkGetDeferredOperationMaxConcurrencyKHR = uint function (VkDevice device, VkDeferredOperationKHR operation);
alias PFN_vkGetDeferredOperationResultKHR = VkResult function (VkDevice device, VkDeferredOperationKHR operation);
alias PFN_vkDeferredOperationJoinKHR = VkResult function (VkDevice device, VkDeferredOperationKHR operation);

VkResult vkCreateDeferredOperationKHR (
    VkDevice device,
    const(VkAllocationCallbacks)* pAllocator,
    VkDeferredOperationKHR* pDeferredOperation);

void vkDestroyDeferredOperationKHR (
    VkDevice device,
    VkDeferredOperationKHR operation,
    const(VkAllocationCallbacks)* pAllocator);

uint vkGetDeferredOperationMaxConcurrencyKHR (
    VkDevice device,
    VkDeferredOperationKHR operation);

VkResult vkGetDeferredOperationResultKHR (
    VkDevice device,
    VkDeferredOperationKHR operation);

VkResult vkDeferredOperationJoinKHR (
    VkDevice device,
    VkDeferredOperationKHR operation);

enum VK_KHR_pipeline_executable_properties = 1;
enum VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION = 1;
enum VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME = "VK_KHR_pipeline_executable_properties";

enum VkPipelineExecutableStatisticFormatKHR
{
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3,
    VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR = 0x7FFFFFFF
}

struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
{
    VkStructureType sType;
    void* pNext;
    VkBool32 pipelineExecutableInfo;
}

struct VkPipelineInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipeline pipeline;
}

struct VkPipelineExecutablePropertiesKHR
{
    VkStructureType sType;
    void* pNext;
    VkShaderStageFlags stages;
    char[VK_MAX_DESCRIPTION_SIZE] name;
    char[VK_MAX_DESCRIPTION_SIZE] description;
    uint subgroupSize;
}

struct VkPipelineExecutableInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipeline pipeline;
    uint executableIndex;
}

union VkPipelineExecutableStatisticValueKHR
{
    VkBool32 b32;
    long i64;
    ulong u64;
    double f64;
}

struct VkPipelineExecutableStatisticKHR
{
    VkStructureType sType;
    void* pNext;
    char[VK_MAX_DESCRIPTION_SIZE] name;
    char[VK_MAX_DESCRIPTION_SIZE] description;
    VkPipelineExecutableStatisticFormatKHR format;
    VkPipelineExecutableStatisticValueKHR value;
}

struct VkPipelineExecutableInternalRepresentationKHR
{
    VkStructureType sType;
    void* pNext;
    char[VK_MAX_DESCRIPTION_SIZE] name;
    char[VK_MAX_DESCRIPTION_SIZE] description;
    VkBool32 isText;
    size_t dataSize;
    void* pData;
}

alias PFN_vkGetPipelineExecutablePropertiesKHR = VkResult function (VkDevice device, const(VkPipelineInfoKHR)* pPipelineInfo, uint* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties);
alias PFN_vkGetPipelineExecutableStatisticsKHR = VkResult function (VkDevice device, const(VkPipelineExecutableInfoKHR)* pExecutableInfo, uint* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics);
alias PFN_vkGetPipelineExecutableInternalRepresentationsKHR = VkResult function (VkDevice device, const(VkPipelineExecutableInfoKHR)* pExecutableInfo, uint* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations);

VkResult vkGetPipelineExecutablePropertiesKHR (
    VkDevice device,
    const(VkPipelineInfoKHR)* pPipelineInfo,
    uint* pExecutableCount,
    VkPipelineExecutablePropertiesKHR* pProperties);

VkResult vkGetPipelineExecutableStatisticsKHR (
    VkDevice device,
    const(VkPipelineExecutableInfoKHR)* pExecutableInfo,
    uint* pStatisticCount,
    VkPipelineExecutableStatisticKHR* pStatistics);

VkResult vkGetPipelineExecutableInternalRepresentationsKHR (
    VkDevice device,
    const(VkPipelineExecutableInfoKHR)* pExecutableInfo,
    uint* pInternalRepresentationCount,
    VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations);

enum VK_KHR_shader_integer_dot_product = 1;
enum VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION = 1;
enum VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME = "VK_KHR_shader_integer_dot_product";
alias VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR = VkPhysicalDeviceShaderIntegerDotProductFeatures;

alias VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR = VkPhysicalDeviceShaderIntegerDotProductProperties;

enum VK_KHR_pipeline_library = 1;
enum VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION = 1;
enum VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_KHR_pipeline_library";

struct VkPipelineLibraryCreateInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    uint libraryCount;
    const(VkPipeline)* pLibraries;
}

enum VK_KHR_shader_non_semantic_info = 1;
enum VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION = 1;
enum VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME = "VK_KHR_shader_non_semantic_info";

enum VK_KHR_present_id = 1;
enum VK_KHR_PRESENT_ID_SPEC_VERSION = 1;
enum VK_KHR_PRESENT_ID_EXTENSION_NAME = "VK_KHR_present_id";

struct VkPresentIdKHR
{
    VkStructureType sType;
    const(void)* pNext;
    uint swapchainCount;
    const(ulong)* pPresentIds;
}

struct VkPhysicalDevicePresentIdFeaturesKHR
{
    VkStructureType sType;
    void* pNext;
    VkBool32 presentId;
}

enum VK_KHR_synchronization2 = 1;
enum VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION = 1;
enum VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME = "VK_KHR_synchronization2";
alias VkPipelineStageFlags2KHR = ulong;

alias VkPipelineStageFlagBits2KHR = ulong;

alias VkAccessFlags2KHR = ulong;

alias VkAccessFlagBits2KHR = ulong;

alias VkSubmitFlagBitsKHR = VkSubmitFlagBits;

alias VkSubmitFlagsKHR = uint;

alias VkMemoryBarrier2KHR = VkMemoryBarrier2;

alias VkBufferMemoryBarrier2KHR = VkBufferMemoryBarrier2;

alias VkImageMemoryBarrier2KHR = VkImageMemoryBarrier2;

alias VkDependencyInfoKHR = VkDependencyInfo;

alias VkSubmitInfo2KHR = VkSubmitInfo2;

alias VkSemaphoreSubmitInfoKHR = VkSemaphoreSubmitInfo;

alias VkCommandBufferSubmitInfoKHR = VkCommandBufferSubmitInfo;

alias VkPhysicalDeviceSynchronization2FeaturesKHR = VkPhysicalDeviceSynchronization2Features;

struct VkQueueFamilyCheckpointProperties2NV
{
    VkStructureType sType;
    void* pNext;
    VkPipelineStageFlags2 checkpointExecutionStageMask;
}

struct VkCheckpointData2NV
{
    VkStructureType sType;
    void* pNext;
    VkPipelineStageFlags2 stage;
    void* pCheckpointMarker;
}

alias PFN_vkCmdSetEvent2KHR = void function (VkCommandBuffer commandBuffer, VkEvent event, const(VkDependencyInfo)* pDependencyInfo);
alias PFN_vkCmdResetEvent2KHR = void function (VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2 stageMask);
alias PFN_vkCmdWaitEvents2KHR = void function (VkCommandBuffer commandBuffer, uint eventCount, const(VkEvent)* pEvents, const(VkDependencyInfo)* pDependencyInfos);
alias PFN_vkCmdPipelineBarrier2KHR = void function (VkCommandBuffer commandBuffer, const(VkDependencyInfo)* pDependencyInfo);
alias PFN_vkCmdWriteTimestamp2KHR = void function (VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint query);
alias PFN_vkQueueSubmit2KHR = VkResult function (VkQueue queue, uint submitCount, const(VkSubmitInfo2)* pSubmits, VkFence fence);
alias PFN_vkCmdWriteBufferMarker2AMD = void function (VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint marker);
alias PFN_vkGetQueueCheckpointData2NV = void function (VkQueue queue, uint* pCheckpointDataCount, VkCheckpointData2NV* pCheckpointData);

void vkCmdSetEvent2KHR (
    VkCommandBuffer commandBuffer,
    VkEvent event,
    const(VkDependencyInfo)* pDependencyInfo);

void vkCmdResetEvent2KHR (
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags2 stageMask);

void vkCmdWaitEvents2KHR (
    VkCommandBuffer commandBuffer,
    uint eventCount,
    const(VkEvent)* pEvents,
    const(VkDependencyInfo)* pDependencyInfos);

void vkCmdPipelineBarrier2KHR (
    VkCommandBuffer commandBuffer,
    const(VkDependencyInfo)* pDependencyInfo);

void vkCmdWriteTimestamp2KHR (
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlags2 stage,
    VkQueryPool queryPool,
    uint query);

VkResult vkQueueSubmit2KHR (
    VkQueue queue,
    uint submitCount,
    const(VkSubmitInfo2)* pSubmits,
    VkFence fence);

void vkCmdWriteBufferMarker2AMD (
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlags2 stage,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    uint marker);

void vkGetQueueCheckpointData2NV (
    VkQueue queue,
    uint* pCheckpointDataCount,
    VkCheckpointData2NV* pCheckpointData);

enum VK_KHR_shader_subgroup_uniform_control_flow = 1;
enum VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION = 1;
enum VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME = "VK_KHR_shader_subgroup_uniform_control_flow";

struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR
{
    VkStructureType sType;
    void* pNext;
    VkBool32 shaderSubgroupUniformControlFlow;
}

enum VK_KHR_zero_initialize_workgroup_memory = 1;
enum VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION = 1;
enum VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME = "VK_KHR_zero_initialize_workgroup_memory";
alias VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;

enum VK_KHR_workgroup_memory_explicit_layout = 1;
enum VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION = 1;
enum VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME = "VK_KHR_workgroup_memory_explicit_layout";

struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR
{
    VkStructureType sType;
    void* pNext;
    VkBool32 workgroupMemoryExplicitLayout;
    VkBool32 workgroupMemoryExplicitLayoutScalarBlockLayout;
    VkBool32 workgroupMemoryExplicitLayout8BitAccess;
    VkBool32 workgroupMemoryExplicitLayout16BitAccess;
}

enum VK_KHR_copy_commands2 = 1;
enum VK_KHR_COPY_COMMANDS_2_SPEC_VERSION = 1;
enum VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME = "VK_KHR_copy_commands2";
alias VkCopyBufferInfo2KHR = VkCopyBufferInfo2;

alias VkCopyImageInfo2KHR = VkCopyImageInfo2;

alias VkCopyBufferToImageInfo2KHR = VkCopyBufferToImageInfo2;

alias VkCopyImageToBufferInfo2KHR = VkCopyImageToBufferInfo2;

alias VkBlitImageInfo2KHR = VkBlitImageInfo2;

alias VkResolveImageInfo2KHR = VkResolveImageInfo2;

alias VkBufferCopy2KHR = VkBufferCopy2;

alias VkImageCopy2KHR = VkImageCopy2;

alias VkImageBlit2KHR = VkImageBlit2;

alias VkBufferImageCopy2KHR = VkBufferImageCopy2;

alias VkImageResolve2KHR = VkImageResolve2;

alias PFN_vkCmdCopyBuffer2KHR = void function (VkCommandBuffer commandBuffer, const(VkCopyBufferInfo2)* pCopyBufferInfo);
alias PFN_vkCmdCopyImage2KHR = void function (VkCommandBuffer commandBuffer, const(VkCopyImageInfo2)* pCopyImageInfo);
alias PFN_vkCmdCopyBufferToImage2KHR = void function (VkCommandBuffer commandBuffer, const(VkCopyBufferToImageInfo2)* pCopyBufferToImageInfo);
alias PFN_vkCmdCopyImageToBuffer2KHR = void function (VkCommandBuffer commandBuffer, const(VkCopyImageToBufferInfo2)* pCopyImageToBufferInfo);
alias PFN_vkCmdBlitImage2KHR = void function (VkCommandBuffer commandBuffer, const(VkBlitImageInfo2)* pBlitImageInfo);
alias PFN_vkCmdResolveImage2KHR = void function (VkCommandBuffer commandBuffer, const(VkResolveImageInfo2)* pResolveImageInfo);

void vkCmdCopyBuffer2KHR (
    VkCommandBuffer commandBuffer,
    const(VkCopyBufferInfo2)* pCopyBufferInfo);

void vkCmdCopyImage2KHR (
    VkCommandBuffer commandBuffer,
    const(VkCopyImageInfo2)* pCopyImageInfo);

void vkCmdCopyBufferToImage2KHR (
    VkCommandBuffer commandBuffer,
    const(VkCopyBufferToImageInfo2)* pCopyBufferToImageInfo);

void vkCmdCopyImageToBuffer2KHR (
    VkCommandBuffer commandBuffer,
    const(VkCopyImageToBufferInfo2)* pCopyImageToBufferInfo);

void vkCmdBlitImage2KHR (
    VkCommandBuffer commandBuffer,
    const(VkBlitImageInfo2)* pBlitImageInfo);

void vkCmdResolveImage2KHR (
    VkCommandBuffer commandBuffer,
    const(VkResolveImageInfo2)* pResolveImageInfo);

enum VK_KHR_format_feature_flags2 = 1;
enum VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION = 1;
enum VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME = "VK_KHR_format_feature_flags2";
alias VkFormatFeatureFlags2KHR = ulong;

alias VkFormatFeatureFlagBits2KHR = ulong;

alias VkFormatProperties3KHR = VkFormatProperties3;

enum VK_KHR_maintenance4 = 1;
enum VK_KHR_MAINTENANCE_4_SPEC_VERSION = 2;
enum VK_KHR_MAINTENANCE_4_EXTENSION_NAME = "VK_KHR_maintenance4";
alias VkPhysicalDeviceMaintenance4FeaturesKHR = VkPhysicalDeviceMaintenance4Features;

alias VkPhysicalDeviceMaintenance4PropertiesKHR = VkPhysicalDeviceMaintenance4Properties;

alias VkDeviceBufferMemoryRequirementsKHR = VkDeviceBufferMemoryRequirements;

alias VkDeviceImageMemoryRequirementsKHR = VkDeviceImageMemoryRequirements;

alias PFN_vkGetDeviceBufferMemoryRequirementsKHR = void function (VkDevice device, const(VkDeviceBufferMemoryRequirements)* pInfo, VkMemoryRequirements2* pMemoryRequirements);
alias PFN_vkGetDeviceImageMemoryRequirementsKHR = void function (VkDevice device, const(VkDeviceImageMemoryRequirements)* pInfo, VkMemoryRequirements2* pMemoryRequirements);
alias PFN_vkGetDeviceImageSparseMemoryRequirementsKHR = void function (VkDevice device, const(VkDeviceImageMemoryRequirements)* pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

void vkGetDeviceBufferMemoryRequirementsKHR (
    VkDevice device,
    const(VkDeviceBufferMemoryRequirements)* pInfo,
    VkMemoryRequirements2* pMemoryRequirements);

void vkGetDeviceImageMemoryRequirementsKHR (
    VkDevice device,
    const(VkDeviceImageMemoryRequirements)* pInfo,
    VkMemoryRequirements2* pMemoryRequirements);

void vkGetDeviceImageSparseMemoryRequirementsKHR (
    VkDevice device,
    const(VkDeviceImageMemoryRequirements)* pInfo,
    uint* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

enum VK_EXT_debug_report = 1;
struct VkDebugReportCallbackEXT_T;
alias VkDebugReportCallbackEXT = VkDebugReportCallbackEXT_T*;
enum VK_EXT_DEBUG_REPORT_SPEC_VERSION = 10;
enum VK_EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report";

enum VkDebugReportObjectTypeEXT
{
    VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
    VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
    VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
    VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
    VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
    VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
    VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
    VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
    VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
    VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
    VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
    VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
    VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
    VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
    VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
    VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT = 1000156000,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT = 1000085000,
    VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT = 1000029000,
    VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT = 1000029001,
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT = 1000150000,
    VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT = 1000165000,
    VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT = 1000366000,
    VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT = VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT,
    VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
}

enum VkDebugReportFlagBitsEXT
{
    VK_DEBUG_REPORT_INFORMATION_BIT_EXT = 0x00000001,
    VK_DEBUG_REPORT_WARNING_BIT_EXT = 0x00000002,
    VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT = 0x00000004,
    VK_DEBUG_REPORT_ERROR_BIT_EXT = 0x00000008,
    VK_DEBUG_REPORT_DEBUG_BIT_EXT = 0x00000010,
    VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
}

alias VkDebugReportFlagsEXT = uint;
alias PFN_vkDebugReportCallbackEXT = uint function (
    VkDebugReportFlagsEXT flags,
    VkDebugReportObjectTypeEXT objectType,
    ulong object,
    size_t location,
    int messageCode,
    const(char)* pLayerPrefix,
    const(char)* pMessage,
    void* pUserData);

struct VkDebugReportCallbackCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkDebugReportFlagsEXT flags;
    PFN_vkDebugReportCallbackEXT pfnCallback;
    void* pUserData;
}

alias PFN_vkCreateDebugReportCallbackEXT = VkResult function (VkInstance instance, const(VkDebugReportCallbackCreateInfoEXT)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkDebugReportCallbackEXT* pCallback);
alias PFN_vkDestroyDebugReportCallbackEXT = void function (VkInstance instance, VkDebugReportCallbackEXT callback, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkDebugReportMessageEXT = void function (VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, ulong object, size_t location, int messageCode, const(char)* pLayerPrefix, const(char)* pMessage);

VkResult vkCreateDebugReportCallbackEXT (
    VkInstance instance,
    const(VkDebugReportCallbackCreateInfoEXT)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkDebugReportCallbackEXT* pCallback);

void vkDestroyDebugReportCallbackEXT (
    VkInstance instance,
    VkDebugReportCallbackEXT callback,
    const(VkAllocationCallbacks)* pAllocator);

void vkDebugReportMessageEXT (
    VkInstance instance,
    VkDebugReportFlagsEXT flags,
    VkDebugReportObjectTypeEXT objectType,
    ulong object,
    size_t location,
    int messageCode,
    const(char)* pLayerPrefix,
    const(char)* pMessage);

enum VK_NV_glsl_shader = 1;
enum VK_NV_GLSL_SHADER_SPEC_VERSION = 1;
enum VK_NV_GLSL_SHADER_EXTENSION_NAME = "VK_NV_glsl_shader";

enum VK_EXT_depth_range_unrestricted = 1;
enum VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION = 1;
enum VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME = "VK_EXT_depth_range_unrestricted";

enum VK_IMG_filter_cubic = 1;
enum VK_IMG_FILTER_CUBIC_SPEC_VERSION = 1;
enum VK_IMG_FILTER_CUBIC_EXTENSION_NAME = "VK_IMG_filter_cubic";

enum VK_AMD_rasterization_order = 1;
enum VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION = 1;
enum VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME = "VK_AMD_rasterization_order";

enum VkRasterizationOrderAMD
{
    VK_RASTERIZATION_ORDER_STRICT_AMD = 0,
    VK_RASTERIZATION_ORDER_RELAXED_AMD = 1,
    VK_RASTERIZATION_ORDER_MAX_ENUM_AMD = 0x7FFFFFFF
}

struct VkPipelineRasterizationStateRasterizationOrderAMD
{
    VkStructureType sType;
    const(void)* pNext;
    VkRasterizationOrderAMD rasterizationOrder;
}

enum VK_AMD_shader_trinary_minmax = 1;
enum VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION = 1;
enum VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME = "VK_AMD_shader_trinary_minmax";

enum VK_AMD_shader_explicit_vertex_parameter = 1;
enum VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION = 1;
enum VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME = "VK_AMD_shader_explicit_vertex_parameter";

enum VK_EXT_debug_marker = 1;
enum VK_EXT_DEBUG_MARKER_SPEC_VERSION = 4;
enum VK_EXT_DEBUG_MARKER_EXTENSION_NAME = "VK_EXT_debug_marker";

struct VkDebugMarkerObjectNameInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkDebugReportObjectTypeEXT objectType;
    ulong object;
    const(char)* pObjectName;
}

struct VkDebugMarkerObjectTagInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkDebugReportObjectTypeEXT objectType;
    ulong object;
    ulong tagName;
    size_t tagSize;
    const(void)* pTag;
}

struct VkDebugMarkerMarkerInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    const(char)* pMarkerName;
    float[4] color;
}

alias PFN_vkDebugMarkerSetObjectTagEXT = VkResult function (VkDevice device, const(VkDebugMarkerObjectTagInfoEXT)* pTagInfo);
alias PFN_vkDebugMarkerSetObjectNameEXT = VkResult function (VkDevice device, const(VkDebugMarkerObjectNameInfoEXT)* pNameInfo);
alias PFN_vkCmdDebugMarkerBeginEXT = void function (VkCommandBuffer commandBuffer, const(VkDebugMarkerMarkerInfoEXT)* pMarkerInfo);
alias PFN_vkCmdDebugMarkerEndEXT = void function (VkCommandBuffer commandBuffer);
alias PFN_vkCmdDebugMarkerInsertEXT = void function (VkCommandBuffer commandBuffer, const(VkDebugMarkerMarkerInfoEXT)* pMarkerInfo);

VkResult vkDebugMarkerSetObjectTagEXT (
    VkDevice device,
    const(VkDebugMarkerObjectTagInfoEXT)* pTagInfo);

VkResult vkDebugMarkerSetObjectNameEXT (
    VkDevice device,
    const(VkDebugMarkerObjectNameInfoEXT)* pNameInfo);

void vkCmdDebugMarkerBeginEXT (
    VkCommandBuffer commandBuffer,
    const(VkDebugMarkerMarkerInfoEXT)* pMarkerInfo);

void vkCmdDebugMarkerEndEXT (VkCommandBuffer commandBuffer);

void vkCmdDebugMarkerInsertEXT (
    VkCommandBuffer commandBuffer,
    const(VkDebugMarkerMarkerInfoEXT)* pMarkerInfo);

enum VK_AMD_gcn_shader = 1;
enum VK_AMD_GCN_SHADER_SPEC_VERSION = 1;
enum VK_AMD_GCN_SHADER_EXTENSION_NAME = "VK_AMD_gcn_shader";

enum VK_NV_dedicated_allocation = 1;
enum VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION = 1;
enum VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_NV_dedicated_allocation";

struct VkDedicatedAllocationImageCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkBool32 dedicatedAllocation;
}

struct VkDedicatedAllocationBufferCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkBool32 dedicatedAllocation;
}

struct VkDedicatedAllocationMemoryAllocateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkImage image;
    VkBuffer buffer;
}

enum VK_EXT_transform_feedback = 1;
enum VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION = 1;
enum VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME = "VK_EXT_transform_feedback";
alias VkPipelineRasterizationStateStreamCreateFlagsEXT = uint;

struct VkPhysicalDeviceTransformFeedbackFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 transformFeedback;
    VkBool32 geometryStreams;
}

struct VkPhysicalDeviceTransformFeedbackPropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    uint maxTransformFeedbackStreams;
    uint maxTransformFeedbackBuffers;
    VkDeviceSize maxTransformFeedbackBufferSize;
    uint maxTransformFeedbackStreamDataSize;
    uint maxTransformFeedbackBufferDataSize;
    uint maxTransformFeedbackBufferDataStride;
    VkBool32 transformFeedbackQueries;
    VkBool32 transformFeedbackStreamsLinesTriangles;
    VkBool32 transformFeedbackRasterizationStreamSelect;
    VkBool32 transformFeedbackDraw;
}

struct VkPipelineRasterizationStateStreamCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineRasterizationStateStreamCreateFlagsEXT flags;
    uint rasterizationStream;
}

alias PFN_vkCmdBindTransformFeedbackBuffersEXT = void function (VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, const(VkBuffer)* pBuffers, const(VkDeviceSize)* pOffsets, const(VkDeviceSize)* pSizes);
alias PFN_vkCmdBeginTransformFeedbackEXT = void function (VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, const(VkBuffer)* pCounterBuffers, const(VkDeviceSize)* pCounterBufferOffsets);
alias PFN_vkCmdEndTransformFeedbackEXT = void function (VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, const(VkBuffer)* pCounterBuffers, const(VkDeviceSize)* pCounterBufferOffsets);
alias PFN_vkCmdBeginQueryIndexedEXT = void function (VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags, uint index);
alias PFN_vkCmdEndQueryIndexedEXT = void function (VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, uint index);
alias PFN_vkCmdDrawIndirectByteCountEXT = void function (VkCommandBuffer commandBuffer, uint instanceCount, uint firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint counterOffset, uint vertexStride);

void vkCmdBindTransformFeedbackBuffersEXT (
    VkCommandBuffer commandBuffer,
    uint firstBinding,
    uint bindingCount,
    const(VkBuffer)* pBuffers,
    const(VkDeviceSize)* pOffsets,
    const(VkDeviceSize)* pSizes);

void vkCmdBeginTransformFeedbackEXT (
    VkCommandBuffer commandBuffer,
    uint firstCounterBuffer,
    uint counterBufferCount,
    const(VkBuffer)* pCounterBuffers,
    const(VkDeviceSize)* pCounterBufferOffsets);

void vkCmdEndTransformFeedbackEXT (
    VkCommandBuffer commandBuffer,
    uint firstCounterBuffer,
    uint counterBufferCount,
    const(VkBuffer)* pCounterBuffers,
    const(VkDeviceSize)* pCounterBufferOffsets);

void vkCmdBeginQueryIndexedEXT (
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint query,
    VkQueryControlFlags flags,
    uint index);

void vkCmdEndQueryIndexedEXT (
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint query,
    uint index);

void vkCmdDrawIndirectByteCountEXT (
    VkCommandBuffer commandBuffer,
    uint instanceCount,
    uint firstInstance,
    VkBuffer counterBuffer,
    VkDeviceSize counterBufferOffset,
    uint counterOffset,
    uint vertexStride);

enum VK_NVX_binary_import = 1;
struct VkCuModuleNVX_T;
alias VkCuModuleNVX = VkCuModuleNVX_T*;
struct VkCuFunctionNVX_T;
alias VkCuFunctionNVX = VkCuFunctionNVX_T*;
enum VK_NVX_BINARY_IMPORT_SPEC_VERSION = 1;
enum VK_NVX_BINARY_IMPORT_EXTENSION_NAME = "VK_NVX_binary_import";

struct VkCuModuleCreateInfoNVX
{
    VkStructureType sType;
    const(void)* pNext;
    size_t dataSize;
    const(void)* pData;
}

struct VkCuFunctionCreateInfoNVX
{
    VkStructureType sType;
    const(void)* pNext;
    VkCuModuleNVX module_;
    const(char)* pName;
}

struct VkCuLaunchInfoNVX
{
    VkStructureType sType;
    const(void)* pNext;
    VkCuFunctionNVX function_;
    uint gridDimX;
    uint gridDimY;
    uint gridDimZ;
    uint blockDimX;
    uint blockDimY;
    uint blockDimZ;
    uint sharedMemBytes;
    size_t paramCount;
    const(void*)* pParams;
    size_t extraCount;
    const(void*)* pExtras;
}

alias PFN_vkCreateCuModuleNVX = VkResult function (VkDevice device, const(VkCuModuleCreateInfoNVX)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkCuModuleNVX* pModule);
alias PFN_vkCreateCuFunctionNVX = VkResult function (VkDevice device, const(VkCuFunctionCreateInfoNVX)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkCuFunctionNVX* pFunction);
alias PFN_vkDestroyCuModuleNVX = void function (VkDevice device, VkCuModuleNVX module_, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkDestroyCuFunctionNVX = void function (VkDevice device, VkCuFunctionNVX function_, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkCmdCuLaunchKernelNVX = void function (VkCommandBuffer commandBuffer, const(VkCuLaunchInfoNVX)* pLaunchInfo);

VkResult vkCreateCuModuleNVX (
    VkDevice device,
    const(VkCuModuleCreateInfoNVX)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkCuModuleNVX* pModule);

VkResult vkCreateCuFunctionNVX (
    VkDevice device,
    const(VkCuFunctionCreateInfoNVX)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkCuFunctionNVX* pFunction);

void vkDestroyCuModuleNVX (
    VkDevice device,
    VkCuModuleNVX module_,
    const(VkAllocationCallbacks)* pAllocator);

void vkDestroyCuFunctionNVX (
    VkDevice device,
    VkCuFunctionNVX function_,
    const(VkAllocationCallbacks)* pAllocator);

void vkCmdCuLaunchKernelNVX (
    VkCommandBuffer commandBuffer,
    const(VkCuLaunchInfoNVX)* pLaunchInfo);

enum VK_NVX_image_view_handle = 1;
enum VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION = 2;
enum VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME = "VK_NVX_image_view_handle";

struct VkImageViewHandleInfoNVX
{
    VkStructureType sType;
    const(void)* pNext;
    VkImageView imageView;
    VkDescriptorType descriptorType;
    VkSampler sampler;
}

struct VkImageViewAddressPropertiesNVX
{
    VkStructureType sType;
    void* pNext;
    VkDeviceAddress deviceAddress;
    VkDeviceSize size;
}

alias PFN_vkGetImageViewHandleNVX = uint function (VkDevice device, const(VkImageViewHandleInfoNVX)* pInfo);
alias PFN_vkGetImageViewAddressNVX = VkResult function (VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX* pProperties);

uint vkGetImageViewHandleNVX (
    VkDevice device,
    const(VkImageViewHandleInfoNVX)* pInfo);

VkResult vkGetImageViewAddressNVX (
    VkDevice device,
    VkImageView imageView,
    VkImageViewAddressPropertiesNVX* pProperties);

enum VK_AMD_draw_indirect_count = 1;
enum VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION = 2;
enum VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_AMD_draw_indirect_count";
alias PFN_vkCmdDrawIndirectCountAMD = void function (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);
alias PFN_vkCmdDrawIndexedIndirectCountAMD = void function (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);

void vkCmdDrawIndirectCountAMD (
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint maxDrawCount,
    uint stride);

void vkCmdDrawIndexedIndirectCountAMD (
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint maxDrawCount,
    uint stride);

enum VK_AMD_negative_viewport_height = 1;
enum VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION = 1;
enum VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME = "VK_AMD_negative_viewport_height";

enum VK_AMD_gpu_shader_half_float = 1;
enum VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION = 2;
enum VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME = "VK_AMD_gpu_shader_half_float";

enum VK_AMD_shader_ballot = 1;
enum VK_AMD_SHADER_BALLOT_SPEC_VERSION = 1;
enum VK_AMD_SHADER_BALLOT_EXTENSION_NAME = "VK_AMD_shader_ballot";

enum VK_AMD_texture_gather_bias_lod = 1;
enum VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION = 1;
enum VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME = "VK_AMD_texture_gather_bias_lod";

struct VkTextureLODGatherFormatPropertiesAMD
{
    VkStructureType sType;
    void* pNext;
    VkBool32 supportsTextureGatherLODBiasAMD;
}

enum VK_AMD_shader_info = 1;
enum VK_AMD_SHADER_INFO_SPEC_VERSION = 1;
enum VK_AMD_SHADER_INFO_EXTENSION_NAME = "VK_AMD_shader_info";

enum VkShaderInfoTypeAMD
{
    VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0,
    VK_SHADER_INFO_TYPE_BINARY_AMD = 1,
    VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2,
    VK_SHADER_INFO_TYPE_MAX_ENUM_AMD = 0x7FFFFFFF
}

struct VkShaderResourceUsageAMD
{
    uint numUsedVgprs;
    uint numUsedSgprs;
    uint ldsSizePerLocalWorkGroup;
    size_t ldsUsageSizeInBytes;
    size_t scratchMemUsageInBytes;
}

struct VkShaderStatisticsInfoAMD
{
    VkShaderStageFlags shaderStageMask;
    VkShaderResourceUsageAMD resourceUsage;
    uint numPhysicalVgprs;
    uint numPhysicalSgprs;
    uint numAvailableVgprs;
    uint numAvailableSgprs;
    uint[3] computeWorkGroupSize;
}

alias PFN_vkGetShaderInfoAMD = VkResult function (VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t* pInfoSize, void* pInfo);

VkResult vkGetShaderInfoAMD (
    VkDevice device,
    VkPipeline pipeline,
    VkShaderStageFlagBits shaderStage,
    VkShaderInfoTypeAMD infoType,
    size_t* pInfoSize,
    void* pInfo);

enum VK_AMD_shader_image_load_store_lod = 1;
enum VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION = 1;
enum VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME = "VK_AMD_shader_image_load_store_lod";

enum VK_NV_corner_sampled_image = 1;
enum VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION = 2;
enum VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME = "VK_NV_corner_sampled_image";

struct VkPhysicalDeviceCornerSampledImageFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 cornerSampledImage;
}

enum VK_IMG_format_pvrtc = 1;
enum VK_IMG_FORMAT_PVRTC_SPEC_VERSION = 1;
enum VK_IMG_FORMAT_PVRTC_EXTENSION_NAME = "VK_IMG_format_pvrtc";

enum VK_NV_external_memory_capabilities = 1;
enum VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = 1;
enum VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_NV_external_memory_capabilities";

enum VkExternalMemoryHandleTypeFlagBitsNV
{
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV = 0x00000001,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV = 0x00000002,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV = 0x00000004,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV = 0x00000008,
    VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
}

alias VkExternalMemoryHandleTypeFlagsNV = uint;

enum VkExternalMemoryFeatureFlagBitsNV
{
    VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV = 0x00000001,
    VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV = 0x00000002,
    VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV = 0x00000004,
    VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
}

alias VkExternalMemoryFeatureFlagsNV = uint;

struct VkExternalImageFormatPropertiesNV
{
    VkImageFormatProperties imageFormatProperties;
    VkExternalMemoryFeatureFlagsNV externalMemoryFeatures;
    VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes;
    VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes;
}

alias PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = VkResult function (VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties);

VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV (
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkImageTiling tiling,
    VkImageUsageFlags usage,
    VkImageCreateFlags flags,
    VkExternalMemoryHandleTypeFlagsNV externalHandleType,
    VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties);

enum VK_NV_external_memory = 1;
enum VK_NV_EXTERNAL_MEMORY_SPEC_VERSION = 1;
enum VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_NV_external_memory";

struct VkExternalMemoryImageCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkExternalMemoryHandleTypeFlagsNV handleTypes;
}

struct VkExportMemoryAllocateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkExternalMemoryHandleTypeFlagsNV handleTypes;
}

enum VK_EXT_validation_flags = 1;
enum VK_EXT_VALIDATION_FLAGS_SPEC_VERSION = 2;
enum VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME = "VK_EXT_validation_flags";

enum VkValidationCheckEXT
{
    VK_VALIDATION_CHECK_ALL_EXT = 0,
    VK_VALIDATION_CHECK_SHADERS_EXT = 1,
    VK_VALIDATION_CHECK_MAX_ENUM_EXT = 0x7FFFFFFF
}

struct VkValidationFlagsEXT
{
    VkStructureType sType;
    const(void)* pNext;
    uint disabledValidationCheckCount;
    const(VkValidationCheckEXT)* pDisabledValidationChecks;
}

enum VK_EXT_shader_subgroup_ballot = 1;
enum VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION = 1;
enum VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME = "VK_EXT_shader_subgroup_ballot";

enum VK_EXT_shader_subgroup_vote = 1;
enum VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION = 1;
enum VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME = "VK_EXT_shader_subgroup_vote";

enum VK_EXT_texture_compression_astc_hdr = 1;
enum VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION = 1;
enum VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME = "VK_EXT_texture_compression_astc_hdr";
alias VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = VkPhysicalDeviceTextureCompressionASTCHDRFeatures;

enum VK_EXT_astc_decode_mode = 1;
enum VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION = 1;
enum VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME = "VK_EXT_astc_decode_mode";

struct VkImageViewASTCDecodeModeEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkFormat decodeMode;
}

struct VkPhysicalDeviceASTCDecodeFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 decodeModeSharedExponent;
}

enum VK_EXT_conditional_rendering = 1;
enum VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION = 2;
enum VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME = "VK_EXT_conditional_rendering";

enum VkConditionalRenderingFlagBitsEXT
{
    VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT = 0x00000001,
    VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
}

alias VkConditionalRenderingFlagsEXT = uint;

struct VkConditionalRenderingBeginInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkBuffer buffer;
    VkDeviceSize offset;
    VkConditionalRenderingFlagsEXT flags;
}

struct VkPhysicalDeviceConditionalRenderingFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 conditionalRendering;
    VkBool32 inheritedConditionalRendering;
}

struct VkCommandBufferInheritanceConditionalRenderingInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkBool32 conditionalRenderingEnable;
}

alias PFN_vkCmdBeginConditionalRenderingEXT = void function (VkCommandBuffer commandBuffer, const(VkConditionalRenderingBeginInfoEXT)* pConditionalRenderingBegin);
alias PFN_vkCmdEndConditionalRenderingEXT = void function (VkCommandBuffer commandBuffer);

void vkCmdBeginConditionalRenderingEXT (
    VkCommandBuffer commandBuffer,
    const(VkConditionalRenderingBeginInfoEXT)* pConditionalRenderingBegin);

void vkCmdEndConditionalRenderingEXT (VkCommandBuffer commandBuffer);

enum VK_NV_clip_space_w_scaling = 1;
enum VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION = 1;
enum VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME = "VK_NV_clip_space_w_scaling";

struct VkViewportWScalingNV
{
    float xcoeff;
    float ycoeff;
}

struct VkPipelineViewportWScalingStateCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkBool32 viewportWScalingEnable;
    uint viewportCount;
    const(VkViewportWScalingNV)* pViewportWScalings;
}

alias PFN_vkCmdSetViewportWScalingNV = void function (VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, const(VkViewportWScalingNV)* pViewportWScalings);

void vkCmdSetViewportWScalingNV (
    VkCommandBuffer commandBuffer,
    uint firstViewport,
    uint viewportCount,
    const(VkViewportWScalingNV)* pViewportWScalings);

enum VK_EXT_direct_mode_display = 1;
enum VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION = 1;
enum VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME = "VK_EXT_direct_mode_display";
alias PFN_vkReleaseDisplayEXT = VkResult function (VkPhysicalDevice physicalDevice, VkDisplayKHR display);

VkResult vkReleaseDisplayEXT (
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display);

enum VK_EXT_display_surface_counter = 1;
enum VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION = 1;
enum VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME = "VK_EXT_display_surface_counter";

enum VkSurfaceCounterFlagBitsEXT
{
    VK_SURFACE_COUNTER_VBLANK_BIT_EXT = 0x00000001,
    VK_SURFACE_COUNTER_VBLANK_EXT = VK_SURFACE_COUNTER_VBLANK_BIT_EXT,
    VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
}

alias VkSurfaceCounterFlagsEXT = uint;

struct VkSurfaceCapabilities2EXT
{
    VkStructureType sType;
    void* pNext;
    uint minImageCount;
    uint maxImageCount;
    VkExtent2D currentExtent;
    VkExtent2D minImageExtent;
    VkExtent2D maxImageExtent;
    uint maxImageArrayLayers;
    VkSurfaceTransformFlagsKHR supportedTransforms;
    VkSurfaceTransformFlagBitsKHR currentTransform;
    VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
    VkImageUsageFlags supportedUsageFlags;
    VkSurfaceCounterFlagsEXT supportedSurfaceCounters;
}

alias PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = VkResult function (VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities);

VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT (
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    VkSurfaceCapabilities2EXT* pSurfaceCapabilities);

enum VK_EXT_display_control = 1;
enum VK_EXT_DISPLAY_CONTROL_SPEC_VERSION = 1;
enum VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME = "VK_EXT_display_control";

enum VkDisplayPowerStateEXT
{
    VK_DISPLAY_POWER_STATE_OFF_EXT = 0,
    VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
    VK_DISPLAY_POWER_STATE_ON_EXT = 2,
    VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT = 0x7FFFFFFF
}

enum VkDeviceEventTypeEXT
{
    VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0,
    VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
}

enum VkDisplayEventTypeEXT
{
    VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0,
    VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
}

struct VkDisplayPowerInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkDisplayPowerStateEXT powerState;
}

struct VkDeviceEventInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceEventTypeEXT deviceEvent;
}

struct VkDisplayEventInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkDisplayEventTypeEXT displayEvent;
}

struct VkSwapchainCounterCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkSurfaceCounterFlagsEXT surfaceCounters;
}

alias PFN_vkDisplayPowerControlEXT = VkResult function (VkDevice device, VkDisplayKHR display, const(VkDisplayPowerInfoEXT)* pDisplayPowerInfo);
alias PFN_vkRegisterDeviceEventEXT = VkResult function (VkDevice device, const(VkDeviceEventInfoEXT)* pDeviceEventInfo, const(VkAllocationCallbacks)* pAllocator, VkFence* pFence);
alias PFN_vkRegisterDisplayEventEXT = VkResult function (VkDevice device, VkDisplayKHR display, const(VkDisplayEventInfoEXT)* pDisplayEventInfo, const(VkAllocationCallbacks)* pAllocator, VkFence* pFence);
alias PFN_vkGetSwapchainCounterEXT = VkResult function (VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, ulong* pCounterValue);

VkResult vkDisplayPowerControlEXT (
    VkDevice device,
    VkDisplayKHR display,
    const(VkDisplayPowerInfoEXT)* pDisplayPowerInfo);

VkResult vkRegisterDeviceEventEXT (
    VkDevice device,
    const(VkDeviceEventInfoEXT)* pDeviceEventInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkFence* pFence);

VkResult vkRegisterDisplayEventEXT (
    VkDevice device,
    VkDisplayKHR display,
    const(VkDisplayEventInfoEXT)* pDisplayEventInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkFence* pFence);

VkResult vkGetSwapchainCounterEXT (
    VkDevice device,
    VkSwapchainKHR swapchain,
    VkSurfaceCounterFlagBitsEXT counter,
    ulong* pCounterValue);

enum VK_GOOGLE_display_timing = 1;
enum VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION = 1;
enum VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME = "VK_GOOGLE_display_timing";

struct VkRefreshCycleDurationGOOGLE
{
    ulong refreshDuration;
}

struct VkPastPresentationTimingGOOGLE
{
    uint presentID;
    ulong desiredPresentTime;
    ulong actualPresentTime;
    ulong earliestPresentTime;
    ulong presentMargin;
}

struct VkPresentTimeGOOGLE
{
    uint presentID;
    ulong desiredPresentTime;
}

struct VkPresentTimesInfoGOOGLE
{
    VkStructureType sType;
    const(void)* pNext;
    uint swapchainCount;
    const(VkPresentTimeGOOGLE)* pTimes;
}

alias PFN_vkGetRefreshCycleDurationGOOGLE = VkResult function (VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties);
alias PFN_vkGetPastPresentationTimingGOOGLE = VkResult function (VkDevice device, VkSwapchainKHR swapchain, uint* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings);

VkResult vkGetRefreshCycleDurationGOOGLE (
    VkDevice device,
    VkSwapchainKHR swapchain,
    VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties);

VkResult vkGetPastPresentationTimingGOOGLE (
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint* pPresentationTimingCount,
    VkPastPresentationTimingGOOGLE* pPresentationTimings);

enum VK_NV_sample_mask_override_coverage = 1;
enum VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION = 1;
enum VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME = "VK_NV_sample_mask_override_coverage";

enum VK_NV_geometry_shader_passthrough = 1;
enum VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION = 1;
enum VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME = "VK_NV_geometry_shader_passthrough";

enum VK_NV_viewport_array2 = 1;
enum VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION = 1;
enum VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME = "VK_NV_viewport_array2";
enum VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION = VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION;
enum VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME = VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME;

enum VK_NVX_multiview_per_view_attributes = 1;
enum VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION = 1;
enum VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME = "VK_NVX_multiview_per_view_attributes";

struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
{
    VkStructureType sType;
    void* pNext;
    VkBool32 perViewPositionAllComponents;
}

enum VK_NV_viewport_swizzle = 1;
enum VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION = 1;
enum VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME = "VK_NV_viewport_swizzle";

enum VkViewportCoordinateSwizzleNV
{
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
    VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
    VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7,
    VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV = 0x7FFFFFFF
}

alias VkPipelineViewportSwizzleStateCreateFlagsNV = uint;

struct VkViewportSwizzleNV
{
    VkViewportCoordinateSwizzleNV x;
    VkViewportCoordinateSwizzleNV y;
    VkViewportCoordinateSwizzleNV z;
    VkViewportCoordinateSwizzleNV w;
}

struct VkPipelineViewportSwizzleStateCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineViewportSwizzleStateCreateFlagsNV flags;
    uint viewportCount;
    const(VkViewportSwizzleNV)* pViewportSwizzles;
}

enum VK_EXT_discard_rectangles = 1;
enum VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION = 1;
enum VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME = "VK_EXT_discard_rectangles";

enum VkDiscardRectangleModeEXT
{
    VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
    VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1,
    VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
}

alias VkPipelineDiscardRectangleStateCreateFlagsEXT = uint;

struct VkPhysicalDeviceDiscardRectanglePropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    uint maxDiscardRectangles;
}

struct VkPipelineDiscardRectangleStateCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineDiscardRectangleStateCreateFlagsEXT flags;
    VkDiscardRectangleModeEXT discardRectangleMode;
    uint discardRectangleCount;
    const(VkRect2D)* pDiscardRectangles;
}

alias PFN_vkCmdSetDiscardRectangleEXT = void function (VkCommandBuffer commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, const(VkRect2D)* pDiscardRectangles);

void vkCmdSetDiscardRectangleEXT (
    VkCommandBuffer commandBuffer,
    uint firstDiscardRectangle,
    uint discardRectangleCount,
    const(VkRect2D)* pDiscardRectangles);

enum VK_EXT_conservative_rasterization = 1;
enum VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION = 1;
enum VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_conservative_rasterization";

enum VkConservativeRasterizationModeEXT
{
    VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,
    VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,
    VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2,
    VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
}

alias VkPipelineRasterizationConservativeStateCreateFlagsEXT = uint;

struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    float primitiveOverestimationSize;
    float maxExtraPrimitiveOverestimationSize;
    float extraPrimitiveOverestimationSizeGranularity;
    VkBool32 primitiveUnderestimation;
    VkBool32 conservativePointAndLineRasterization;
    VkBool32 degenerateTrianglesRasterized;
    VkBool32 degenerateLinesRasterized;
    VkBool32 fullyCoveredFragmentShaderInputVariable;
    VkBool32 conservativeRasterizationPostDepthCoverage;
}

struct VkPipelineRasterizationConservativeStateCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineRasterizationConservativeStateCreateFlagsEXT flags;
    VkConservativeRasterizationModeEXT conservativeRasterizationMode;
    float extraPrimitiveOverestimationSize;
}

enum VK_EXT_depth_clip_enable = 1;
enum VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION = 1;
enum VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME = "VK_EXT_depth_clip_enable";
alias VkPipelineRasterizationDepthClipStateCreateFlagsEXT = uint;

struct VkPhysicalDeviceDepthClipEnableFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 depthClipEnable;
}

struct VkPipelineRasterizationDepthClipStateCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags;
    VkBool32 depthClipEnable;
}

enum VK_EXT_swapchain_colorspace = 1;
enum VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION = 4;
enum VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME = "VK_EXT_swapchain_colorspace";

enum VK_EXT_hdr_metadata = 1;
enum VK_EXT_HDR_METADATA_SPEC_VERSION = 2;
enum VK_EXT_HDR_METADATA_EXTENSION_NAME = "VK_EXT_hdr_metadata";

struct VkXYColorEXT
{
    float x;
    float y;
}

struct VkHdrMetadataEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkXYColorEXT displayPrimaryRed;
    VkXYColorEXT displayPrimaryGreen;
    VkXYColorEXT displayPrimaryBlue;
    VkXYColorEXT whitePoint;
    float maxLuminance;
    float minLuminance;
    float maxContentLightLevel;
    float maxFrameAverageLightLevel;
}

alias PFN_vkSetHdrMetadataEXT = void function (VkDevice device, uint swapchainCount, const(VkSwapchainKHR)* pSwapchains, const(VkHdrMetadataEXT)* pMetadata);

void vkSetHdrMetadataEXT (
    VkDevice device,
    uint swapchainCount,
    const(VkSwapchainKHR)* pSwapchains,
    const(VkHdrMetadataEXT)* pMetadata);

enum VK_EXT_external_memory_dma_buf = 1;
enum VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION = 1;
enum VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME = "VK_EXT_external_memory_dma_buf";

enum VK_EXT_queue_family_foreign = 1;
enum VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION = 1;
enum VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME = "VK_EXT_queue_family_foreign";
enum VK_QUEUE_FAMILY_FOREIGN_EXT = ~2U;

enum VK_EXT_debug_utils = 1;
struct VkDebugUtilsMessengerEXT_T;
alias VkDebugUtilsMessengerEXT = VkDebugUtilsMessengerEXT_T*;
enum VK_EXT_DEBUG_UTILS_SPEC_VERSION = 2;
enum VK_EXT_DEBUG_UTILS_EXTENSION_NAME = "VK_EXT_debug_utils";
alias VkDebugUtilsMessengerCallbackDataFlagsEXT = uint;

enum VkDebugUtilsMessageSeverityFlagBitsEXT
{
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT = 0x00000001,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT = 0x00000010,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT = 0x00000100,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT = 0x00001000,
    VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
}

enum VkDebugUtilsMessageTypeFlagBitsEXT
{
    VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT = 0x00000001,
    VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT = 0x00000002,
    VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT = 0x00000004,
    VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT = 0x7FFFFFFF
}

alias VkDebugUtilsMessageTypeFlagsEXT = uint;
alias VkDebugUtilsMessageSeverityFlagsEXT = uint;
alias VkDebugUtilsMessengerCreateFlagsEXT = uint;

struct VkDebugUtilsLabelEXT
{
    VkStructureType sType;
    const(void)* pNext;
    const(char)* pLabelName;
    float[4] color;
}

struct VkDebugUtilsObjectNameInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkObjectType objectType;
    ulong objectHandle;
    const(char)* pObjectName;
}

struct VkDebugUtilsMessengerCallbackDataEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkDebugUtilsMessengerCallbackDataFlagsEXT flags;
    const(char)* pMessageIdName;
    int messageIdNumber;
    const(char)* pMessage;
    uint queueLabelCount;
    const(VkDebugUtilsLabelEXT)* pQueueLabels;
    uint cmdBufLabelCount;
    const(VkDebugUtilsLabelEXT)* pCmdBufLabels;
    uint objectCount;
    const(VkDebugUtilsObjectNameInfoEXT)* pObjects;
}

alias PFN_vkDebugUtilsMessengerCallbackEXT = uint function (
    VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
    VkDebugUtilsMessageTypeFlagsEXT messageTypes,
    const(VkDebugUtilsMessengerCallbackDataEXT)* pCallbackData,
    void* pUserData);

struct VkDebugUtilsMessengerCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkDebugUtilsMessengerCreateFlagsEXT flags;
    VkDebugUtilsMessageSeverityFlagsEXT messageSeverity;
    VkDebugUtilsMessageTypeFlagsEXT messageType;
    PFN_vkDebugUtilsMessengerCallbackEXT pfnUserCallback;
    void* pUserData;
}

struct VkDebugUtilsObjectTagInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkObjectType objectType;
    ulong objectHandle;
    ulong tagName;
    size_t tagSize;
    const(void)* pTag;
}

alias PFN_vkSetDebugUtilsObjectNameEXT = VkResult function (VkDevice device, const(VkDebugUtilsObjectNameInfoEXT)* pNameInfo);
alias PFN_vkSetDebugUtilsObjectTagEXT = VkResult function (VkDevice device, const(VkDebugUtilsObjectTagInfoEXT)* pTagInfo);
alias PFN_vkQueueBeginDebugUtilsLabelEXT = void function (VkQueue queue, const(VkDebugUtilsLabelEXT)* pLabelInfo);
alias PFN_vkQueueEndDebugUtilsLabelEXT = void function (VkQueue queue);
alias PFN_vkQueueInsertDebugUtilsLabelEXT = void function (VkQueue queue, const(VkDebugUtilsLabelEXT)* pLabelInfo);
alias PFN_vkCmdBeginDebugUtilsLabelEXT = void function (VkCommandBuffer commandBuffer, const(VkDebugUtilsLabelEXT)* pLabelInfo);
alias PFN_vkCmdEndDebugUtilsLabelEXT = void function (VkCommandBuffer commandBuffer);
alias PFN_vkCmdInsertDebugUtilsLabelEXT = void function (VkCommandBuffer commandBuffer, const(VkDebugUtilsLabelEXT)* pLabelInfo);
alias PFN_vkCreateDebugUtilsMessengerEXT = VkResult function (VkInstance instance, const(VkDebugUtilsMessengerCreateInfoEXT)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkDebugUtilsMessengerEXT* pMessenger);
alias PFN_vkDestroyDebugUtilsMessengerEXT = void function (VkInstance instance, VkDebugUtilsMessengerEXT messenger, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkSubmitDebugUtilsMessageEXT = void function (VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const(VkDebugUtilsMessengerCallbackDataEXT)* pCallbackData);

VkResult vkSetDebugUtilsObjectNameEXT (
    VkDevice device,
    const(VkDebugUtilsObjectNameInfoEXT)* pNameInfo);

VkResult vkSetDebugUtilsObjectTagEXT (
    VkDevice device,
    const(VkDebugUtilsObjectTagInfoEXT)* pTagInfo);

void vkQueueBeginDebugUtilsLabelEXT (
    VkQueue queue,
    const(VkDebugUtilsLabelEXT)* pLabelInfo);

void vkQueueEndDebugUtilsLabelEXT (VkQueue queue);

void vkQueueInsertDebugUtilsLabelEXT (
    VkQueue queue,
    const(VkDebugUtilsLabelEXT)* pLabelInfo);

void vkCmdBeginDebugUtilsLabelEXT (
    VkCommandBuffer commandBuffer,
    const(VkDebugUtilsLabelEXT)* pLabelInfo);

void vkCmdEndDebugUtilsLabelEXT (VkCommandBuffer commandBuffer);

void vkCmdInsertDebugUtilsLabelEXT (
    VkCommandBuffer commandBuffer,
    const(VkDebugUtilsLabelEXT)* pLabelInfo);

VkResult vkCreateDebugUtilsMessengerEXT (
    VkInstance instance,
    const(VkDebugUtilsMessengerCreateInfoEXT)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkDebugUtilsMessengerEXT* pMessenger);

void vkDestroyDebugUtilsMessengerEXT (
    VkInstance instance,
    VkDebugUtilsMessengerEXT messenger,
    const(VkAllocationCallbacks)* pAllocator);

void vkSubmitDebugUtilsMessageEXT (
    VkInstance instance,
    VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
    VkDebugUtilsMessageTypeFlagsEXT messageTypes,
    const(VkDebugUtilsMessengerCallbackDataEXT)* pCallbackData);

enum VK_EXT_sampler_filter_minmax = 1;
enum VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION = 2;
enum VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME = "VK_EXT_sampler_filter_minmax";
alias VkSamplerReductionModeEXT = VkSamplerReductionMode;

alias VkSamplerReductionModeCreateInfoEXT = VkSamplerReductionModeCreateInfo;

alias VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = VkPhysicalDeviceSamplerFilterMinmaxProperties;

enum VK_AMD_gpu_shader_int16 = 1;
enum VK_AMD_GPU_SHADER_INT16_SPEC_VERSION = 2;
enum VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME = "VK_AMD_gpu_shader_int16";

enum VK_AMD_mixed_attachment_samples = 1;
enum VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION = 1;
enum VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME = "VK_AMD_mixed_attachment_samples";

enum VK_AMD_shader_fragment_mask = 1;
enum VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION = 1;
enum VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME = "VK_AMD_shader_fragment_mask";

enum VK_EXT_inline_uniform_block = 1;
enum VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION = 1;
enum VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME = "VK_EXT_inline_uniform_block";
alias VkPhysicalDeviceInlineUniformBlockFeaturesEXT = VkPhysicalDeviceInlineUniformBlockFeatures;

alias VkPhysicalDeviceInlineUniformBlockPropertiesEXT = VkPhysicalDeviceInlineUniformBlockProperties;

alias VkWriteDescriptorSetInlineUniformBlockEXT = VkWriteDescriptorSetInlineUniformBlock;

alias VkDescriptorPoolInlineUniformBlockCreateInfoEXT = VkDescriptorPoolInlineUniformBlockCreateInfo;

enum VK_EXT_shader_stencil_export = 1;
enum VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION = 1;
enum VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME = "VK_EXT_shader_stencil_export";

enum VK_EXT_sample_locations = 1;
enum VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION = 1;
enum VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME = "VK_EXT_sample_locations";

struct VkSampleLocationEXT
{
    float x;
    float y;
}

struct VkSampleLocationsInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkSampleCountFlagBits sampleLocationsPerPixel;
    VkExtent2D sampleLocationGridSize;
    uint sampleLocationsCount;
    const(VkSampleLocationEXT)* pSampleLocations;
}

struct VkAttachmentSampleLocationsEXT
{
    uint attachmentIndex;
    VkSampleLocationsInfoEXT sampleLocationsInfo;
}

struct VkSubpassSampleLocationsEXT
{
    uint subpassIndex;
    VkSampleLocationsInfoEXT sampleLocationsInfo;
}

struct VkRenderPassSampleLocationsBeginInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    uint attachmentInitialSampleLocationsCount;
    const(VkAttachmentSampleLocationsEXT)* pAttachmentInitialSampleLocations;
    uint postSubpassSampleLocationsCount;
    const(VkSubpassSampleLocationsEXT)* pPostSubpassSampleLocations;
}

struct VkPipelineSampleLocationsStateCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkBool32 sampleLocationsEnable;
    VkSampleLocationsInfoEXT sampleLocationsInfo;
}

struct VkPhysicalDeviceSampleLocationsPropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    VkSampleCountFlags sampleLocationSampleCounts;
    VkExtent2D maxSampleLocationGridSize;
    float[2] sampleLocationCoordinateRange;
    uint sampleLocationSubPixelBits;
    VkBool32 variableSampleLocations;
}

struct VkMultisamplePropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    VkExtent2D maxSampleLocationGridSize;
}

alias PFN_vkCmdSetSampleLocationsEXT = void function (VkCommandBuffer commandBuffer, const(VkSampleLocationsInfoEXT)* pSampleLocationsInfo);
alias PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = void function (VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties);

void vkCmdSetSampleLocationsEXT (
    VkCommandBuffer commandBuffer,
    const(VkSampleLocationsInfoEXT)* pSampleLocationsInfo);

void vkGetPhysicalDeviceMultisamplePropertiesEXT (
    VkPhysicalDevice physicalDevice,
    VkSampleCountFlagBits samples,
    VkMultisamplePropertiesEXT* pMultisampleProperties);

enum VK_EXT_blend_operation_advanced = 1;
enum VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION = 2;
enum VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME = "VK_EXT_blend_operation_advanced";

enum VkBlendOverlapEXT
{
    VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,
    VK_BLEND_OVERLAP_DISJOINT_EXT = 1,
    VK_BLEND_OVERLAP_CONJOINT_EXT = 2,
    VK_BLEND_OVERLAP_MAX_ENUM_EXT = 0x7FFFFFFF
}

struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 advancedBlendCoherentOperations;
}

struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    uint advancedBlendMaxColorAttachments;
    VkBool32 advancedBlendIndependentBlend;
    VkBool32 advancedBlendNonPremultipliedSrcColor;
    VkBool32 advancedBlendNonPremultipliedDstColor;
    VkBool32 advancedBlendCorrelatedOverlap;
    VkBool32 advancedBlendAllOperations;
}

struct VkPipelineColorBlendAdvancedStateCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkBool32 srcPremultiplied;
    VkBool32 dstPremultiplied;
    VkBlendOverlapEXT blendOverlap;
}

enum VK_NV_fragment_coverage_to_color = 1;
enum VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION = 1;
enum VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME = "VK_NV_fragment_coverage_to_color";
alias VkPipelineCoverageToColorStateCreateFlagsNV = uint;

struct VkPipelineCoverageToColorStateCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineCoverageToColorStateCreateFlagsNV flags;
    VkBool32 coverageToColorEnable;
    uint coverageToColorLocation;
}

enum VK_NV_framebuffer_mixed_samples = 1;
enum VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION = 1;
enum VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME = "VK_NV_framebuffer_mixed_samples";

enum VkCoverageModulationModeNV
{
    VK_COVERAGE_MODULATION_MODE_NONE_NV = 0,
    VK_COVERAGE_MODULATION_MODE_RGB_NV = 1,
    VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2,
    VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3,
    VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV = 0x7FFFFFFF
}

alias VkPipelineCoverageModulationStateCreateFlagsNV = uint;

struct VkPipelineCoverageModulationStateCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineCoverageModulationStateCreateFlagsNV flags;
    VkCoverageModulationModeNV coverageModulationMode;
    VkBool32 coverageModulationTableEnable;
    uint coverageModulationTableCount;
    const(float)* pCoverageModulationTable;
}

enum VK_NV_fill_rectangle = 1;
enum VK_NV_FILL_RECTANGLE_SPEC_VERSION = 1;
enum VK_NV_FILL_RECTANGLE_EXTENSION_NAME = "VK_NV_fill_rectangle";

enum VK_NV_shader_sm_builtins = 1;
enum VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION = 1;
enum VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME = "VK_NV_shader_sm_builtins";

struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
{
    VkStructureType sType;
    void* pNext;
    uint shaderSMCount;
    uint shaderWarpsPerSM;
}

struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 shaderSMBuiltins;
}

enum VK_EXT_post_depth_coverage = 1;
enum VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION = 1;
enum VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME = "VK_EXT_post_depth_coverage";

enum VK_EXT_image_drm_format_modifier = 1;
enum VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION = 2;
enum VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME = "VK_EXT_image_drm_format_modifier";

struct VkDrmFormatModifierPropertiesEXT
{
    ulong drmFormatModifier;
    uint drmFormatModifierPlaneCount;
    VkFormatFeatureFlags drmFormatModifierTilingFeatures;
}

struct VkDrmFormatModifierPropertiesListEXT
{
    VkStructureType sType;
    void* pNext;
    uint drmFormatModifierCount;
    VkDrmFormatModifierPropertiesEXT* pDrmFormatModifierProperties;
}

struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    ulong drmFormatModifier;
    VkSharingMode sharingMode;
    uint queueFamilyIndexCount;
    const(uint)* pQueueFamilyIndices;
}

struct VkImageDrmFormatModifierListCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    uint drmFormatModifierCount;
    const(ulong)* pDrmFormatModifiers;
}

struct VkImageDrmFormatModifierExplicitCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    ulong drmFormatModifier;
    uint drmFormatModifierPlaneCount;
    const(VkSubresourceLayout)* pPlaneLayouts;
}

struct VkImageDrmFormatModifierPropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    ulong drmFormatModifier;
}

struct VkDrmFormatModifierProperties2EXT
{
    ulong drmFormatModifier;
    uint drmFormatModifierPlaneCount;
    VkFormatFeatureFlags2 drmFormatModifierTilingFeatures;
}

struct VkDrmFormatModifierPropertiesList2EXT
{
    VkStructureType sType;
    void* pNext;
    uint drmFormatModifierCount;
    VkDrmFormatModifierProperties2EXT* pDrmFormatModifierProperties;
}

alias PFN_vkGetImageDrmFormatModifierPropertiesEXT = VkResult function (VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* pProperties);

VkResult vkGetImageDrmFormatModifierPropertiesEXT (
    VkDevice device,
    VkImage image,
    VkImageDrmFormatModifierPropertiesEXT* pProperties);

enum VK_EXT_validation_cache = 1;
struct VkValidationCacheEXT_T;
alias VkValidationCacheEXT = VkValidationCacheEXT_T*;
enum VK_EXT_VALIDATION_CACHE_SPEC_VERSION = 1;
enum VK_EXT_VALIDATION_CACHE_EXTENSION_NAME = "VK_EXT_validation_cache";

enum VkValidationCacheHeaderVersionEXT
{
    VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1,
    VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT = 0x7FFFFFFF
}

alias VkValidationCacheCreateFlagsEXT = uint;

struct VkValidationCacheCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkValidationCacheCreateFlagsEXT flags;
    size_t initialDataSize;
    const(void)* pInitialData;
}

struct VkShaderModuleValidationCacheCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkValidationCacheEXT validationCache;
}

alias PFN_vkCreateValidationCacheEXT = VkResult function (VkDevice device, const(VkValidationCacheCreateInfoEXT)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkValidationCacheEXT* pValidationCache);
alias PFN_vkDestroyValidationCacheEXT = void function (VkDevice device, VkValidationCacheEXT validationCache, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkMergeValidationCachesEXT = VkResult function (VkDevice device, VkValidationCacheEXT dstCache, uint srcCacheCount, const(VkValidationCacheEXT)* pSrcCaches);
alias PFN_vkGetValidationCacheDataEXT = VkResult function (VkDevice device, VkValidationCacheEXT validationCache, size_t* pDataSize, void* pData);

VkResult vkCreateValidationCacheEXT (
    VkDevice device,
    const(VkValidationCacheCreateInfoEXT)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkValidationCacheEXT* pValidationCache);

void vkDestroyValidationCacheEXT (
    VkDevice device,
    VkValidationCacheEXT validationCache,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkMergeValidationCachesEXT (
    VkDevice device,
    VkValidationCacheEXT dstCache,
    uint srcCacheCount,
    const(VkValidationCacheEXT)* pSrcCaches);

VkResult vkGetValidationCacheDataEXT (
    VkDevice device,
    VkValidationCacheEXT validationCache,
    size_t* pDataSize,
    void* pData);

enum VK_EXT_descriptor_indexing = 1;
enum VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION = 2;
enum VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME = "VK_EXT_descriptor_indexing";
alias VkDescriptorBindingFlagBitsEXT = VkDescriptorBindingFlagBits;

alias VkDescriptorBindingFlagsEXT = uint;

alias VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = VkDescriptorSetLayoutBindingFlagsCreateInfo;

alias VkPhysicalDeviceDescriptorIndexingFeaturesEXT = VkPhysicalDeviceDescriptorIndexingFeatures;

alias VkPhysicalDeviceDescriptorIndexingPropertiesEXT = VkPhysicalDeviceDescriptorIndexingProperties;

alias VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = VkDescriptorSetVariableDescriptorCountAllocateInfo;

alias VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = VkDescriptorSetVariableDescriptorCountLayoutSupport;

enum VK_EXT_shader_viewport_index_layer = 1;
enum VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION = 1;
enum VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME = "VK_EXT_shader_viewport_index_layer";

enum VK_NV_shading_rate_image = 1;
enum VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION = 3;
enum VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME = "VK_NV_shading_rate_image";

enum VkShadingRatePaletteEntryNV
{
    VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0,
    VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1,
    VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2,
    VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3,
    VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
    VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11,
    VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV = 0x7FFFFFFF
}

enum VkCoarseSampleOrderTypeNV
{
    VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0,
    VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1,
    VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2,
    VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3,
    VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
}

struct VkShadingRatePaletteNV
{
    uint shadingRatePaletteEntryCount;
    const(VkShadingRatePaletteEntryNV)* pShadingRatePaletteEntries;
}

struct VkPipelineViewportShadingRateImageStateCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkBool32 shadingRateImageEnable;
    uint viewportCount;
    const(VkShadingRatePaletteNV)* pShadingRatePalettes;
}

struct VkPhysicalDeviceShadingRateImageFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 shadingRateImage;
    VkBool32 shadingRateCoarseSampleOrder;
}

struct VkPhysicalDeviceShadingRateImagePropertiesNV
{
    VkStructureType sType;
    void* pNext;
    VkExtent2D shadingRateTexelSize;
    uint shadingRatePaletteSize;
    uint shadingRateMaxCoarseSamples;
}

struct VkCoarseSampleLocationNV
{
    uint pixelX;
    uint pixelY;
    uint sample;
}

struct VkCoarseSampleOrderCustomNV
{
    VkShadingRatePaletteEntryNV shadingRate;
    uint sampleCount;
    uint sampleLocationCount;
    const(VkCoarseSampleLocationNV)* pSampleLocations;
}

struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkCoarseSampleOrderTypeNV sampleOrderType;
    uint customSampleOrderCount;
    const(VkCoarseSampleOrderCustomNV)* pCustomSampleOrders;
}

alias PFN_vkCmdBindShadingRateImageNV = void function (VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout);
alias PFN_vkCmdSetViewportShadingRatePaletteNV = void function (VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, const(VkShadingRatePaletteNV)* pShadingRatePalettes);
alias PFN_vkCmdSetCoarseSampleOrderNV = void function (VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint customSampleOrderCount, const(VkCoarseSampleOrderCustomNV)* pCustomSampleOrders);

void vkCmdBindShadingRateImageNV (
    VkCommandBuffer commandBuffer,
    VkImageView imageView,
    VkImageLayout imageLayout);

void vkCmdSetViewportShadingRatePaletteNV (
    VkCommandBuffer commandBuffer,
    uint firstViewport,
    uint viewportCount,
    const(VkShadingRatePaletteNV)* pShadingRatePalettes);

void vkCmdSetCoarseSampleOrderNV (
    VkCommandBuffer commandBuffer,
    VkCoarseSampleOrderTypeNV sampleOrderType,
    uint customSampleOrderCount,
    const(VkCoarseSampleOrderCustomNV)* pCustomSampleOrders);

enum VK_NV_ray_tracing = 1;
struct VkAccelerationStructureNV_T;
alias VkAccelerationStructureNV = VkAccelerationStructureNV_T*;
enum VK_NV_RAY_TRACING_SPEC_VERSION = 3;
enum VK_NV_RAY_TRACING_EXTENSION_NAME = "VK_NV_ray_tracing";
enum VK_SHADER_UNUSED_KHR = ~0U;
enum VK_SHADER_UNUSED_NV = VK_SHADER_UNUSED_KHR;

enum VkRayTracingShaderGroupTypeKHR
{
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV = VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR,
    VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
}

alias VkRayTracingShaderGroupTypeNV = VkRayTracingShaderGroupTypeKHR;

enum VkGeometryTypeKHR
{
    VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0,
    VK_GEOMETRY_TYPE_AABBS_KHR = 1,
    VK_GEOMETRY_TYPE_INSTANCES_KHR = 2,
    VK_GEOMETRY_TYPE_TRIANGLES_NV = VK_GEOMETRY_TYPE_TRIANGLES_KHR,
    VK_GEOMETRY_TYPE_AABBS_NV = VK_GEOMETRY_TYPE_AABBS_KHR,
    VK_GEOMETRY_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
}

alias VkGeometryTypeNV = VkGeometryTypeKHR;

enum VkAccelerationStructureTypeKHR
{
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0,
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1,
    VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2,
    VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR,
    VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV = VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR,
    VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
}

alias VkAccelerationStructureTypeNV = VkAccelerationStructureTypeKHR;

enum VkCopyAccelerationStructureModeKHR
{
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV = VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR,
    VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 0x7FFFFFFF
}

alias VkCopyAccelerationStructureModeNV = VkCopyAccelerationStructureModeKHR;

enum VkAccelerationStructureMemoryRequirementsTypeNV
{
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2,
    VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
}

enum VkGeometryFlagBitsKHR
{
    VK_GEOMETRY_OPAQUE_BIT_KHR = 0x00000001,
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR = 0x00000002,
    VK_GEOMETRY_OPAQUE_BIT_NV = VK_GEOMETRY_OPAQUE_BIT_KHR,
    VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV = VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR,
    VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
}

alias VkGeometryFlagsKHR = uint;
alias VkGeometryFlagsNV = uint;

alias VkGeometryFlagBitsNV = VkGeometryFlagBitsKHR;

enum VkGeometryInstanceFlagBitsKHR
{
    VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR = 0x00000001,
    VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR = 0x00000002,
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR = 0x00000004,
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR = 0x00000008,
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR = VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR,
    VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR,
    VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV = VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR,
    VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR,
    VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV = VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR,
    VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
}

alias VkGeometryInstanceFlagsKHR = uint;
alias VkGeometryInstanceFlagsNV = uint;

alias VkGeometryInstanceFlagBitsNV = VkGeometryInstanceFlagBitsKHR;

enum VkBuildAccelerationStructureFlagBitsKHR
{
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR = 0x00000001,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR = 0x00000002,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR = 0x00000004,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR = 0x00000008,
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR = 0x00000010,
    VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV = 0x00000020,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV = VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR,
    VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
}

alias VkBuildAccelerationStructureFlagsKHR = uint;
alias VkBuildAccelerationStructureFlagsNV = uint;

alias VkBuildAccelerationStructureFlagBitsNV = VkBuildAccelerationStructureFlagBitsKHR;

struct VkRayTracingShaderGroupCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkRayTracingShaderGroupTypeKHR type;
    uint generalShader;
    uint closestHitShader;
    uint anyHitShader;
    uint intersectionShader;
}

struct VkRayTracingPipelineCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineCreateFlags flags;
    uint stageCount;
    const(VkPipelineShaderStageCreateInfo)* pStages;
    uint groupCount;
    const(VkRayTracingShaderGroupCreateInfoNV)* pGroups;
    uint maxRecursionDepth;
    VkPipelineLayout layout;
    VkPipeline basePipelineHandle;
    int basePipelineIndex;
}

struct VkGeometryTrianglesNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkBuffer vertexData;
    VkDeviceSize vertexOffset;
    uint vertexCount;
    VkDeviceSize vertexStride;
    VkFormat vertexFormat;
    VkBuffer indexData;
    VkDeviceSize indexOffset;
    uint indexCount;
    VkIndexType indexType;
    VkBuffer transformData;
    VkDeviceSize transformOffset;
}

struct VkGeometryAABBNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkBuffer aabbData;
    uint numAABBs;
    uint stride;
    VkDeviceSize offset;
}

struct VkGeometryDataNV
{
    VkGeometryTrianglesNV triangles;
    VkGeometryAABBNV aabbs;
}

struct VkGeometryNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkGeometryTypeKHR geometryType;
    VkGeometryDataNV geometry;
    VkGeometryFlagsKHR flags;
}

struct VkAccelerationStructureInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkAccelerationStructureTypeNV type;
    VkBuildAccelerationStructureFlagsNV flags;
    uint instanceCount;
    uint geometryCount;
    const(VkGeometryNV)* pGeometries;
}

struct VkAccelerationStructureCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceSize compactedSize;
    VkAccelerationStructureInfoNV info;
}

struct VkBindAccelerationStructureMemoryInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkAccelerationStructureNV accelerationStructure;
    VkDeviceMemory memory;
    VkDeviceSize memoryOffset;
    uint deviceIndexCount;
    const(uint)* pDeviceIndices;
}

struct VkWriteDescriptorSetAccelerationStructureNV
{
    VkStructureType sType;
    const(void)* pNext;
    uint accelerationStructureCount;
    const(VkAccelerationStructureNV)* pAccelerationStructures;
}

struct VkAccelerationStructureMemoryRequirementsInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkAccelerationStructureMemoryRequirementsTypeNV type;
    VkAccelerationStructureNV accelerationStructure;
}

struct VkPhysicalDeviceRayTracingPropertiesNV
{
    VkStructureType sType;
    void* pNext;
    uint shaderGroupHandleSize;
    uint maxRecursionDepth;
    uint maxShaderGroupStride;
    uint shaderGroupBaseAlignment;
    ulong maxGeometryCount;
    ulong maxInstanceCount;
    ulong maxTriangleCount;
    uint maxDescriptorSetAccelerationStructures;
}

struct VkTransformMatrixKHR
{
    float[4][3] matrix;
}

alias VkTransformMatrixNV = VkTransformMatrixKHR;

struct VkAabbPositionsKHR
{
    float minX;
    float minY;
    float minZ;
    float maxX;
    float maxY;
    float maxZ;
}

alias VkAabbPositionsNV = VkAabbPositionsKHR;

struct VkAccelerationStructureInstanceKHR
{
    import std.bitmanip : bitfields;

    VkTransformMatrixKHR transform;

    mixin(bitfields!(
        uint, "instanceCustomIndex", 24,
        uint, "mask", 8,
        uint, "instanceShaderBindingTableRecordOffset", 24,
        VkGeometryInstanceFlagsKHR, "flags", 8));

    ulong accelerationStructureReference;
}

alias VkAccelerationStructureInstanceNV = VkAccelerationStructureInstanceKHR;

alias PFN_vkCreateAccelerationStructureNV = VkResult function (VkDevice device, const(VkAccelerationStructureCreateInfoNV)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkAccelerationStructureNV* pAccelerationStructure);
alias PFN_vkDestroyAccelerationStructureNV = void function (VkDevice device, VkAccelerationStructureNV accelerationStructure, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkGetAccelerationStructureMemoryRequirementsNV = void function (VkDevice device, const(VkAccelerationStructureMemoryRequirementsInfoNV)* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements);
alias PFN_vkBindAccelerationStructureMemoryNV = VkResult function (VkDevice device, uint bindInfoCount, const(VkBindAccelerationStructureMemoryInfoNV)* pBindInfos);
alias PFN_vkCmdBuildAccelerationStructureNV = void function (VkCommandBuffer commandBuffer, const(VkAccelerationStructureInfoNV)* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset);
alias PFN_vkCmdCopyAccelerationStructureNV = void function (VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode);
alias PFN_vkCmdTraceRaysNV = void function (VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint width, uint height, uint depth);
alias PFN_vkCreateRayTracingPipelinesNV = VkResult function (VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, const(VkRayTracingPipelineCreateInfoNV)* pCreateInfos, const(VkAllocationCallbacks)* pAllocator, VkPipeline* pPipelines);
alias PFN_vkGetRayTracingShaderGroupHandlesKHR = VkResult function (VkDevice device, VkPipeline pipeline, uint firstGroup, uint groupCount, size_t dataSize, void* pData);
alias PFN_vkGetRayTracingShaderGroupHandlesNV = VkResult function (VkDevice device, VkPipeline pipeline, uint firstGroup, uint groupCount, size_t dataSize, void* pData);
alias PFN_vkGetAccelerationStructureHandleNV = VkResult function (VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void* pData);
alias PFN_vkCmdWriteAccelerationStructuresPropertiesNV = void function (VkCommandBuffer commandBuffer, uint accelerationStructureCount, const(VkAccelerationStructureNV)* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery);
alias PFN_vkCompileDeferredNV = VkResult function (VkDevice device, VkPipeline pipeline, uint shader);

VkResult vkCreateAccelerationStructureNV (
    VkDevice device,
    const(VkAccelerationStructureCreateInfoNV)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkAccelerationStructureNV* pAccelerationStructure);

void vkDestroyAccelerationStructureNV (
    VkDevice device,
    VkAccelerationStructureNV accelerationStructure,
    const(VkAllocationCallbacks)* pAllocator);

void vkGetAccelerationStructureMemoryRequirementsNV (
    VkDevice device,
    const(VkAccelerationStructureMemoryRequirementsInfoNV)* pInfo,
    VkMemoryRequirements2KHR* pMemoryRequirements);

VkResult vkBindAccelerationStructureMemoryNV (
    VkDevice device,
    uint bindInfoCount,
    const(VkBindAccelerationStructureMemoryInfoNV)* pBindInfos);

void vkCmdBuildAccelerationStructureNV (
    VkCommandBuffer commandBuffer,
    const(VkAccelerationStructureInfoNV)* pInfo,
    VkBuffer instanceData,
    VkDeviceSize instanceOffset,
    VkBool32 update,
    VkAccelerationStructureNV dst,
    VkAccelerationStructureNV src,
    VkBuffer scratch,
    VkDeviceSize scratchOffset);

void vkCmdCopyAccelerationStructureNV (
    VkCommandBuffer commandBuffer,
    VkAccelerationStructureNV dst,
    VkAccelerationStructureNV src,
    VkCopyAccelerationStructureModeKHR mode);

void vkCmdTraceRaysNV (
    VkCommandBuffer commandBuffer,
    VkBuffer raygenShaderBindingTableBuffer,
    VkDeviceSize raygenShaderBindingOffset,
    VkBuffer missShaderBindingTableBuffer,
    VkDeviceSize missShaderBindingOffset,
    VkDeviceSize missShaderBindingStride,
    VkBuffer hitShaderBindingTableBuffer,
    VkDeviceSize hitShaderBindingOffset,
    VkDeviceSize hitShaderBindingStride,
    VkBuffer callableShaderBindingTableBuffer,
    VkDeviceSize callableShaderBindingOffset,
    VkDeviceSize callableShaderBindingStride,
    uint width,
    uint height,
    uint depth);

VkResult vkCreateRayTracingPipelinesNV (
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint createInfoCount,
    const(VkRayTracingPipelineCreateInfoNV)* pCreateInfos,
    const(VkAllocationCallbacks)* pAllocator,
    VkPipeline* pPipelines);

VkResult vkGetRayTracingShaderGroupHandlesKHR (
    VkDevice device,
    VkPipeline pipeline,
    uint firstGroup,
    uint groupCount,
    size_t dataSize,
    void* pData);

VkResult vkGetRayTracingShaderGroupHandlesNV (
    VkDevice device,
    VkPipeline pipeline,
    uint firstGroup,
    uint groupCount,
    size_t dataSize,
    void* pData);

VkResult vkGetAccelerationStructureHandleNV (
    VkDevice device,
    VkAccelerationStructureNV accelerationStructure,
    size_t dataSize,
    void* pData);

void vkCmdWriteAccelerationStructuresPropertiesNV (
    VkCommandBuffer commandBuffer,
    uint accelerationStructureCount,
    const(VkAccelerationStructureNV)* pAccelerationStructures,
    VkQueryType queryType,
    VkQueryPool queryPool,
    uint firstQuery);

VkResult vkCompileDeferredNV (
    VkDevice device,
    VkPipeline pipeline,
    uint shader);

enum VK_NV_representative_fragment_test = 1;
enum VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION = 2;
enum VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME = "VK_NV_representative_fragment_test";

struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 representativeFragmentTest;
}

struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkBool32 representativeFragmentTestEnable;
}

enum VK_EXT_filter_cubic = 1;
enum VK_EXT_FILTER_CUBIC_SPEC_VERSION = 3;
enum VK_EXT_FILTER_CUBIC_EXTENSION_NAME = "VK_EXT_filter_cubic";

struct VkPhysicalDeviceImageViewImageFormatInfoEXT
{
    VkStructureType sType;
    void* pNext;
    VkImageViewType imageViewType;
}

struct VkFilterCubicImageViewImageFormatPropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 filterCubic;
    VkBool32 filterCubicMinmax;
}

enum VK_QCOM_render_pass_shader_resolve = 1;
enum VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION = 4;
enum VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME = "VK_QCOM_render_pass_shader_resolve";

enum VK_EXT_global_priority = 1;
enum VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION = 2;
enum VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_EXT_global_priority";
alias VkQueueGlobalPriorityEXT = VkQueueGlobalPriorityKHR;

alias VkDeviceQueueGlobalPriorityCreateInfoEXT = VkDeviceQueueGlobalPriorityCreateInfoKHR;

enum VK_EXT_external_memory_host = 1;
enum VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION = 1;
enum VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME = "VK_EXT_external_memory_host";

struct VkImportMemoryHostPointerInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkExternalMemoryHandleTypeFlagBits handleType;
    void* pHostPointer;
}

struct VkMemoryHostPointerPropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    uint memoryTypeBits;
}

struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    VkDeviceSize minImportedHostPointerAlignment;
}

alias PFN_vkGetMemoryHostPointerPropertiesEXT = VkResult function (VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const(void)* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties);

VkResult vkGetMemoryHostPointerPropertiesEXT (
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    const(void)* pHostPointer,
    VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties);

enum VK_AMD_buffer_marker = 1;
enum VK_AMD_BUFFER_MARKER_SPEC_VERSION = 1;
enum VK_AMD_BUFFER_MARKER_EXTENSION_NAME = "VK_AMD_buffer_marker";
alias PFN_vkCmdWriteBufferMarkerAMD = void function (VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint marker);

void vkCmdWriteBufferMarkerAMD (
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlagBits pipelineStage,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    uint marker);

enum VK_AMD_pipeline_compiler_control = 1;
enum VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION = 1;
enum VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME = "VK_AMD_pipeline_compiler_control";

enum VkPipelineCompilerControlFlagBitsAMD
{
    VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD = 0x7FFFFFFF
}

alias VkPipelineCompilerControlFlagsAMD = uint;

struct VkPipelineCompilerControlCreateInfoAMD
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineCompilerControlFlagsAMD compilerControlFlags;
}

enum VK_EXT_calibrated_timestamps = 1;
enum VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION = 2;
enum VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_EXT_calibrated_timestamps";

enum VkTimeDomainEXT
{
    VK_TIME_DOMAIN_DEVICE_EXT = 0,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1,
    VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2,
    VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3,
    VK_TIME_DOMAIN_MAX_ENUM_EXT = 0x7FFFFFFF
}

struct VkCalibratedTimestampInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkTimeDomainEXT timeDomain;
}

alias PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = VkResult function (VkPhysicalDevice physicalDevice, uint* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains);
alias PFN_vkGetCalibratedTimestampsEXT = VkResult function (VkDevice device, uint timestampCount, const(VkCalibratedTimestampInfoEXT)* pTimestampInfos, ulong* pTimestamps, ulong* pMaxDeviation);

VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT (
    VkPhysicalDevice physicalDevice,
    uint* pTimeDomainCount,
    VkTimeDomainEXT* pTimeDomains);

VkResult vkGetCalibratedTimestampsEXT (
    VkDevice device,
    uint timestampCount,
    const(VkCalibratedTimestampInfoEXT)* pTimestampInfos,
    ulong* pTimestamps,
    ulong* pMaxDeviation);

enum VK_AMD_shader_core_properties = 1;
enum VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION = 2;
enum VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_AMD_shader_core_properties";

struct VkPhysicalDeviceShaderCorePropertiesAMD
{
    VkStructureType sType;
    void* pNext;
    uint shaderEngineCount;
    uint shaderArraysPerEngineCount;
    uint computeUnitsPerShaderArray;
    uint simdPerComputeUnit;
    uint wavefrontsPerSimd;
    uint wavefrontSize;
    uint sgprsPerSimd;
    uint minSgprAllocation;
    uint maxSgprAllocation;
    uint sgprAllocationGranularity;
    uint vgprsPerSimd;
    uint minVgprAllocation;
    uint maxVgprAllocation;
    uint vgprAllocationGranularity;
}

enum VK_AMD_memory_overallocation_behavior = 1;
enum VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION = 1;
enum VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME = "VK_AMD_memory_overallocation_behavior";

enum VkMemoryOverallocationBehaviorAMD
{
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2,
    VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD = 0x7FFFFFFF
}

struct VkDeviceMemoryOverallocationCreateInfoAMD
{
    VkStructureType sType;
    const(void)* pNext;
    VkMemoryOverallocationBehaviorAMD overallocationBehavior;
}

enum VK_EXT_vertex_attribute_divisor = 1;
enum VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = 3;
enum VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_EXT_vertex_attribute_divisor";

struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    uint maxVertexAttribDivisor;
}

struct VkVertexInputBindingDivisorDescriptionEXT
{
    uint binding;
    uint divisor;
}

struct VkPipelineVertexInputDivisorStateCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    uint vertexBindingDivisorCount;
    const(VkVertexInputBindingDivisorDescriptionEXT)* pVertexBindingDivisors;
}

struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 vertexAttributeInstanceRateDivisor;
    VkBool32 vertexAttributeInstanceRateZeroDivisor;
}

enum VK_EXT_pipeline_creation_feedback = 1;
enum VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION = 1;
enum VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME = "VK_EXT_pipeline_creation_feedback";
alias VkPipelineCreationFeedbackFlagBitsEXT = VkPipelineCreationFeedbackFlagBits;

alias VkPipelineCreationFeedbackFlagsEXT = uint;

alias VkPipelineCreationFeedbackCreateInfoEXT = VkPipelineCreationFeedbackCreateInfo;

alias VkPipelineCreationFeedbackEXT = VkPipelineCreationFeedback;

enum VK_NV_shader_subgroup_partitioned = 1;
enum VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION = 1;
enum VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME = "VK_NV_shader_subgroup_partitioned";

enum VK_NV_compute_shader_derivatives = 1;
enum VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION = 1;
enum VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = "VK_NV_compute_shader_derivatives";

struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 computeDerivativeGroupQuads;
    VkBool32 computeDerivativeGroupLinear;
}

enum VK_NV_mesh_shader = 1;
enum VK_NV_MESH_SHADER_SPEC_VERSION = 1;
enum VK_NV_MESH_SHADER_EXTENSION_NAME = "VK_NV_mesh_shader";

struct VkPhysicalDeviceMeshShaderFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 taskShader;
    VkBool32 meshShader;
}

struct VkPhysicalDeviceMeshShaderPropertiesNV
{
    VkStructureType sType;
    void* pNext;
    uint maxDrawMeshTasksCount;
    uint maxTaskWorkGroupInvocations;
    uint[3] maxTaskWorkGroupSize;
    uint maxTaskTotalMemorySize;
    uint maxTaskOutputCount;
    uint maxMeshWorkGroupInvocations;
    uint[3] maxMeshWorkGroupSize;
    uint maxMeshTotalMemorySize;
    uint maxMeshOutputVertices;
    uint maxMeshOutputPrimitives;
    uint maxMeshMultiviewViewCount;
    uint meshOutputPerVertexGranularity;
    uint meshOutputPerPrimitiveGranularity;
}

struct VkDrawMeshTasksIndirectCommandNV
{
    uint taskCount;
    uint firstTask;
}

alias PFN_vkCmdDrawMeshTasksNV = void function (VkCommandBuffer commandBuffer, uint taskCount, uint firstTask);
alias PFN_vkCmdDrawMeshTasksIndirectNV = void function (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride);
alias PFN_vkCmdDrawMeshTasksIndirectCountNV = void function (VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride);

void vkCmdDrawMeshTasksNV (
    VkCommandBuffer commandBuffer,
    uint taskCount,
    uint firstTask);

void vkCmdDrawMeshTasksIndirectNV (
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint drawCount,
    uint stride);

void vkCmdDrawMeshTasksIndirectCountNV (
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint maxDrawCount,
    uint stride);

enum VK_NV_fragment_shader_barycentric = 1;
enum VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = 1;
enum VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_NV_fragment_shader_barycentric";

struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 fragmentShaderBarycentric;
}

enum VK_NV_shader_image_footprint = 1;
enum VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION = 2;
enum VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME = "VK_NV_shader_image_footprint";

struct VkPhysicalDeviceShaderImageFootprintFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 imageFootprint;
}

enum VK_NV_scissor_exclusive = 1;
enum VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION = 1;
enum VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME = "VK_NV_scissor_exclusive";

struct VkPipelineViewportExclusiveScissorStateCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    uint exclusiveScissorCount;
    const(VkRect2D)* pExclusiveScissors;
}

struct VkPhysicalDeviceExclusiveScissorFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 exclusiveScissor;
}

alias PFN_vkCmdSetExclusiveScissorNV = void function (VkCommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, const(VkRect2D)* pExclusiveScissors);

void vkCmdSetExclusiveScissorNV (
    VkCommandBuffer commandBuffer,
    uint firstExclusiveScissor,
    uint exclusiveScissorCount,
    const(VkRect2D)* pExclusiveScissors);

enum VK_NV_device_diagnostic_checkpoints = 1;
enum VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION = 2;
enum VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME = "VK_NV_device_diagnostic_checkpoints";

struct VkQueueFamilyCheckpointPropertiesNV
{
    VkStructureType sType;
    void* pNext;
    VkPipelineStageFlags checkpointExecutionStageMask;
}

struct VkCheckpointDataNV
{
    VkStructureType sType;
    void* pNext;
    VkPipelineStageFlagBits stage;
    void* pCheckpointMarker;
}

alias PFN_vkCmdSetCheckpointNV = void function (VkCommandBuffer commandBuffer, const(void)* pCheckpointMarker);
alias PFN_vkGetQueueCheckpointDataNV = void function (VkQueue queue, uint* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData);

void vkCmdSetCheckpointNV (
    VkCommandBuffer commandBuffer,
    const(void)* pCheckpointMarker);

void vkGetQueueCheckpointDataNV (
    VkQueue queue,
    uint* pCheckpointDataCount,
    VkCheckpointDataNV* pCheckpointData);

enum VK_INTEL_shader_integer_functions2 = 1;
enum VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION = 1;
enum VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME = "VK_INTEL_shader_integer_functions2";

struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
{
    VkStructureType sType;
    void* pNext;
    VkBool32 shaderIntegerFunctions2;
}

enum VK_INTEL_performance_query = 1;
struct VkPerformanceConfigurationINTEL_T;
alias VkPerformanceConfigurationINTEL = VkPerformanceConfigurationINTEL_T*;
enum VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION = 2;
enum VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_INTEL_performance_query";

enum VkPerformanceConfigurationTypeINTEL
{
    VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0,
    VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF
}

enum VkQueryPoolSamplingModeINTEL
{
    VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0,
    VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL = 0x7FFFFFFF
}

enum VkPerformanceOverrideTypeINTEL
{
    VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0,
    VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1,
    VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF
}

enum VkPerformanceParameterTypeINTEL
{
    VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0,
    VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1,
    VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF
}

enum VkPerformanceValueTypeINTEL
{
    VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0,
    VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1,
    VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2,
    VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3,
    VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4,
    VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL = 0x7FFFFFFF
}

union VkPerformanceValueDataINTEL
{
    uint value32;
    ulong value64;
    float valueFloat;
    VkBool32 valueBool;
    const(char)* valueString;
}

struct VkPerformanceValueINTEL
{
    VkPerformanceValueTypeINTEL type;
    VkPerformanceValueDataINTEL data;
}

struct VkInitializePerformanceApiInfoINTEL
{
    VkStructureType sType;
    const(void)* pNext;
    void* pUserData;
}

struct VkQueryPoolPerformanceQueryCreateInfoINTEL
{
    VkStructureType sType;
    const(void)* pNext;
    VkQueryPoolSamplingModeINTEL performanceCountersSampling;
}

alias VkQueryPoolCreateInfoINTEL = VkQueryPoolPerformanceQueryCreateInfoINTEL;

struct VkPerformanceMarkerInfoINTEL
{
    VkStructureType sType;
    const(void)* pNext;
    ulong marker;
}

struct VkPerformanceStreamMarkerInfoINTEL
{
    VkStructureType sType;
    const(void)* pNext;
    uint marker;
}

struct VkPerformanceOverrideInfoINTEL
{
    VkStructureType sType;
    const(void)* pNext;
    VkPerformanceOverrideTypeINTEL type;
    VkBool32 enable;
    ulong parameter;
}

struct VkPerformanceConfigurationAcquireInfoINTEL
{
    VkStructureType sType;
    const(void)* pNext;
    VkPerformanceConfigurationTypeINTEL type;
}

alias PFN_vkInitializePerformanceApiINTEL = VkResult function (VkDevice device, const(VkInitializePerformanceApiInfoINTEL)* pInitializeInfo);
alias PFN_vkUninitializePerformanceApiINTEL = void function (VkDevice device);
alias PFN_vkCmdSetPerformanceMarkerINTEL = VkResult function (VkCommandBuffer commandBuffer, const(VkPerformanceMarkerInfoINTEL)* pMarkerInfo);
alias PFN_vkCmdSetPerformanceStreamMarkerINTEL = VkResult function (VkCommandBuffer commandBuffer, const(VkPerformanceStreamMarkerInfoINTEL)* pMarkerInfo);
alias PFN_vkCmdSetPerformanceOverrideINTEL = VkResult function (VkCommandBuffer commandBuffer, const(VkPerformanceOverrideInfoINTEL)* pOverrideInfo);
alias PFN_vkAcquirePerformanceConfigurationINTEL = VkResult function (VkDevice device, const(VkPerformanceConfigurationAcquireInfoINTEL)* pAcquireInfo, VkPerformanceConfigurationINTEL* pConfiguration);
alias PFN_vkReleasePerformanceConfigurationINTEL = VkResult function (VkDevice device, VkPerformanceConfigurationINTEL configuration);
alias PFN_vkQueueSetPerformanceConfigurationINTEL = VkResult function (VkQueue queue, VkPerformanceConfigurationINTEL configuration);
alias PFN_vkGetPerformanceParameterINTEL = VkResult function (VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue);

VkResult vkInitializePerformanceApiINTEL (
    VkDevice device,
    const(VkInitializePerformanceApiInfoINTEL)* pInitializeInfo);

void vkUninitializePerformanceApiINTEL (VkDevice device);

VkResult vkCmdSetPerformanceMarkerINTEL (
    VkCommandBuffer commandBuffer,
    const(VkPerformanceMarkerInfoINTEL)* pMarkerInfo);

VkResult vkCmdSetPerformanceStreamMarkerINTEL (
    VkCommandBuffer commandBuffer,
    const(VkPerformanceStreamMarkerInfoINTEL)* pMarkerInfo);

VkResult vkCmdSetPerformanceOverrideINTEL (
    VkCommandBuffer commandBuffer,
    const(VkPerformanceOverrideInfoINTEL)* pOverrideInfo);

VkResult vkAcquirePerformanceConfigurationINTEL (
    VkDevice device,
    const(VkPerformanceConfigurationAcquireInfoINTEL)* pAcquireInfo,
    VkPerformanceConfigurationINTEL* pConfiguration);

VkResult vkReleasePerformanceConfigurationINTEL (
    VkDevice device,
    VkPerformanceConfigurationINTEL configuration);

VkResult vkQueueSetPerformanceConfigurationINTEL (
    VkQueue queue,
    VkPerformanceConfigurationINTEL configuration);

VkResult vkGetPerformanceParameterINTEL (
    VkDevice device,
    VkPerformanceParameterTypeINTEL parameter,
    VkPerformanceValueINTEL* pValue);

enum VK_EXT_pci_bus_info = 1;
enum VK_EXT_PCI_BUS_INFO_SPEC_VERSION = 2;
enum VK_EXT_PCI_BUS_INFO_EXTENSION_NAME = "VK_EXT_pci_bus_info";

struct VkPhysicalDevicePCIBusInfoPropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    uint pciDomain;
    uint pciBus;
    uint pciDevice;
    uint pciFunction;
}

enum VK_AMD_display_native_hdr = 1;
enum VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION = 1;
enum VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME = "VK_AMD_display_native_hdr";

struct VkDisplayNativeHdrSurfaceCapabilitiesAMD
{
    VkStructureType sType;
    void* pNext;
    VkBool32 localDimmingSupport;
}

struct VkSwapchainDisplayNativeHdrCreateInfoAMD
{
    VkStructureType sType;
    const(void)* pNext;
    VkBool32 localDimmingEnable;
}

alias PFN_vkSetLocalDimmingAMD = void function (VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable);

void vkSetLocalDimmingAMD (
    VkDevice device,
    VkSwapchainKHR swapChain,
    VkBool32 localDimmingEnable);

enum VK_EXT_fragment_density_map = 1;
enum VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION = 2;
enum VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME = "VK_EXT_fragment_density_map";

struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 fragmentDensityMap;
    VkBool32 fragmentDensityMapDynamic;
    VkBool32 fragmentDensityMapNonSubsampledImages;
}

struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    VkExtent2D minFragmentDensityTexelSize;
    VkExtent2D maxFragmentDensityTexelSize;
    VkBool32 fragmentDensityInvocations;
}

struct VkRenderPassFragmentDensityMapCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkAttachmentReference fragmentDensityMapAttachment;
}

enum VK_EXT_scalar_block_layout = 1;
enum VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION = 1;
enum VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME = "VK_EXT_scalar_block_layout";
alias VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = VkPhysicalDeviceScalarBlockLayoutFeatures;

enum VK_GOOGLE_hlsl_functionality1 = 1;
enum VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION = 1;
enum VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME = "VK_GOOGLE_hlsl_functionality1";
enum VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION = VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION;
enum VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME = VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME;

enum VK_GOOGLE_decorate_string = 1;
enum VK_GOOGLE_DECORATE_STRING_SPEC_VERSION = 1;
enum VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME = "VK_GOOGLE_decorate_string";

enum VK_EXT_subgroup_size_control = 1;
enum VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION = 2;
enum VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME = "VK_EXT_subgroup_size_control";
alias VkPhysicalDeviceSubgroupSizeControlFeaturesEXT = VkPhysicalDeviceSubgroupSizeControlFeatures;

alias VkPhysicalDeviceSubgroupSizeControlPropertiesEXT = VkPhysicalDeviceSubgroupSizeControlProperties;

alias VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;

enum VK_AMD_shader_core_properties2 = 1;
enum VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION = 1;
enum VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME = "VK_AMD_shader_core_properties2";

enum VkShaderCorePropertiesFlagBitsAMD
{
    VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD = 0x7FFFFFFF
}

alias VkShaderCorePropertiesFlagsAMD = uint;

struct VkPhysicalDeviceShaderCoreProperties2AMD
{
    VkStructureType sType;
    void* pNext;
    VkShaderCorePropertiesFlagsAMD shaderCoreFeatures;
    uint activeComputeUnitCount;
}

enum VK_AMD_device_coherent_memory = 1;
enum VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION = 1;
enum VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME = "VK_AMD_device_coherent_memory";

struct VkPhysicalDeviceCoherentMemoryFeaturesAMD
{
    VkStructureType sType;
    void* pNext;
    VkBool32 deviceCoherentMemory;
}

enum VK_EXT_shader_image_atomic_int64 = 1;
enum VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION = 1;
enum VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME = "VK_EXT_shader_image_atomic_int64";

struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 shaderImageInt64Atomics;
    VkBool32 sparseImageInt64Atomics;
}

enum VK_EXT_memory_budget = 1;
enum VK_EXT_MEMORY_BUDGET_SPEC_VERSION = 1;
enum VK_EXT_MEMORY_BUDGET_EXTENSION_NAME = "VK_EXT_memory_budget";

struct VkPhysicalDeviceMemoryBudgetPropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    VkDeviceSize[VK_MAX_MEMORY_HEAPS] heapBudget;
    VkDeviceSize[VK_MAX_MEMORY_HEAPS] heapUsage;
}

enum VK_EXT_memory_priority = 1;
enum VK_EXT_MEMORY_PRIORITY_SPEC_VERSION = 1;
enum VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME = "VK_EXT_memory_priority";

struct VkPhysicalDeviceMemoryPriorityFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 memoryPriority;
}

struct VkMemoryPriorityAllocateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    float priority;
}

enum VK_NV_dedicated_allocation_image_aliasing = 1;
enum VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION = 1;
enum VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME = "VK_NV_dedicated_allocation_image_aliasing";

struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 dedicatedAllocationImageAliasing;
}

enum VK_EXT_buffer_device_address = 1;
enum VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = 2;
enum VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_EXT_buffer_device_address";

struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 bufferDeviceAddress;
    VkBool32 bufferDeviceAddressCaptureReplay;
    VkBool32 bufferDeviceAddressMultiDevice;
}

alias VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;

alias VkBufferDeviceAddressInfoEXT = VkBufferDeviceAddressInfo;

struct VkBufferDeviceAddressCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceAddress deviceAddress;
}

alias PFN_vkGetBufferDeviceAddressEXT = ulong function (VkDevice device, const(VkBufferDeviceAddressInfo)* pInfo);

VkDeviceAddress vkGetBufferDeviceAddressEXT (
    VkDevice device,
    const(VkBufferDeviceAddressInfo)* pInfo);

enum VK_EXT_tooling_info = 1;
enum VK_EXT_TOOLING_INFO_SPEC_VERSION = 1;
enum VK_EXT_TOOLING_INFO_EXTENSION_NAME = "VK_EXT_tooling_info";
alias VkToolPurposeFlagBitsEXT = VkToolPurposeFlagBits;

alias VkToolPurposeFlagsEXT = uint;

alias VkPhysicalDeviceToolPropertiesEXT = VkPhysicalDeviceToolProperties;

alias PFN_vkGetPhysicalDeviceToolPropertiesEXT = VkResult function (VkPhysicalDevice physicalDevice, uint* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties);

VkResult vkGetPhysicalDeviceToolPropertiesEXT (
    VkPhysicalDevice physicalDevice,
    uint* pToolCount,
    VkPhysicalDeviceToolProperties* pToolProperties);

enum VK_EXT_separate_stencil_usage = 1;
enum VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION = 1;
enum VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME = "VK_EXT_separate_stencil_usage";
alias VkImageStencilUsageCreateInfoEXT = VkImageStencilUsageCreateInfo;

enum VK_EXT_validation_features = 1;
enum VK_EXT_VALIDATION_FEATURES_SPEC_VERSION = 5;
enum VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME = "VK_EXT_validation_features";

enum VkValidationFeatureEnableEXT
{
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,
    VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
    VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2,
    VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3,
    VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4,
    VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT = 0x7FFFFFFF
}

enum VkValidationFeatureDisableEXT
{
    VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,
    VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,
    VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,
    VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,
    VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
    VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,
    VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,
    VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7,
    VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT = 0x7FFFFFFF
}

struct VkValidationFeaturesEXT
{
    VkStructureType sType;
    const(void)* pNext;
    uint enabledValidationFeatureCount;
    const(VkValidationFeatureEnableEXT)* pEnabledValidationFeatures;
    uint disabledValidationFeatureCount;
    const(VkValidationFeatureDisableEXT)* pDisabledValidationFeatures;
}

enum VK_NV_cooperative_matrix = 1;
enum VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION = 1;
enum VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_NV_cooperative_matrix";

enum VkComponentTypeNV
{
    VK_COMPONENT_TYPE_FLOAT16_NV = 0,
    VK_COMPONENT_TYPE_FLOAT32_NV = 1,
    VK_COMPONENT_TYPE_FLOAT64_NV = 2,
    VK_COMPONENT_TYPE_SINT8_NV = 3,
    VK_COMPONENT_TYPE_SINT16_NV = 4,
    VK_COMPONENT_TYPE_SINT32_NV = 5,
    VK_COMPONENT_TYPE_SINT64_NV = 6,
    VK_COMPONENT_TYPE_UINT8_NV = 7,
    VK_COMPONENT_TYPE_UINT16_NV = 8,
    VK_COMPONENT_TYPE_UINT32_NV = 9,
    VK_COMPONENT_TYPE_UINT64_NV = 10,
    VK_COMPONENT_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
}

enum VkScopeNV
{
    VK_SCOPE_DEVICE_NV = 1,
    VK_SCOPE_WORKGROUP_NV = 2,
    VK_SCOPE_SUBGROUP_NV = 3,
    VK_SCOPE_QUEUE_FAMILY_NV = 5,
    VK_SCOPE_MAX_ENUM_NV = 0x7FFFFFFF
}

struct VkCooperativeMatrixPropertiesNV
{
    VkStructureType sType;
    void* pNext;
    uint MSize;
    uint NSize;
    uint KSize;
    VkComponentTypeNV AType;
    VkComponentTypeNV BType;
    VkComponentTypeNV CType;
    VkComponentTypeNV DType;
    VkScopeNV scope_;
}

struct VkPhysicalDeviceCooperativeMatrixFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 cooperativeMatrix;
    VkBool32 cooperativeMatrixRobustBufferAccess;
}

struct VkPhysicalDeviceCooperativeMatrixPropertiesNV
{
    VkStructureType sType;
    void* pNext;
    VkShaderStageFlags cooperativeMatrixSupportedStages;
}

alias PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = VkResult function (VkPhysicalDevice physicalDevice, uint* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties);

VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV (
    VkPhysicalDevice physicalDevice,
    uint* pPropertyCount,
    VkCooperativeMatrixPropertiesNV* pProperties);

enum VK_NV_coverage_reduction_mode = 1;
enum VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION = 1;
enum VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME = "VK_NV_coverage_reduction_mode";

enum VkCoverageReductionModeNV
{
    VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0,
    VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1,
    VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV = 0x7FFFFFFF
}

alias VkPipelineCoverageReductionStateCreateFlagsNV = uint;

struct VkPhysicalDeviceCoverageReductionModeFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 coverageReductionMode;
}

struct VkPipelineCoverageReductionStateCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineCoverageReductionStateCreateFlagsNV flags;
    VkCoverageReductionModeNV coverageReductionMode;
}

struct VkFramebufferMixedSamplesCombinationNV
{
    VkStructureType sType;
    void* pNext;
    VkCoverageReductionModeNV coverageReductionMode;
    VkSampleCountFlagBits rasterizationSamples;
    VkSampleCountFlags depthStencilSamples;
    VkSampleCountFlags colorSamples;
}

alias PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = VkResult function (VkPhysicalDevice physicalDevice, uint* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations);

VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV (
    VkPhysicalDevice physicalDevice,
    uint* pCombinationCount,
    VkFramebufferMixedSamplesCombinationNV* pCombinations);

enum VK_EXT_fragment_shader_interlock = 1;
enum VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION = 1;
enum VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME = "VK_EXT_fragment_shader_interlock";

struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 fragmentShaderSampleInterlock;
    VkBool32 fragmentShaderPixelInterlock;
    VkBool32 fragmentShaderShadingRateInterlock;
}

enum VK_EXT_ycbcr_image_arrays = 1;
enum VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION = 1;
enum VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME = "VK_EXT_ycbcr_image_arrays";

struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 ycbcrImageArrays;
}

enum VK_EXT_provoking_vertex = 1;
enum VK_EXT_PROVOKING_VERTEX_SPEC_VERSION = 1;
enum VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME = "VK_EXT_provoking_vertex";

enum VkProvokingVertexModeEXT
{
    VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0,
    VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1,
    VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
}

struct VkPhysicalDeviceProvokingVertexFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 provokingVertexLast;
    VkBool32 transformFeedbackPreservesProvokingVertex;
}

struct VkPhysicalDeviceProvokingVertexPropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 provokingVertexModePerPipeline;
    VkBool32 transformFeedbackPreservesTriangleFanProvokingVertex;
}

struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkProvokingVertexModeEXT provokingVertexMode;
}

enum VK_EXT_headless_surface = 1;
enum VK_EXT_HEADLESS_SURFACE_SPEC_VERSION = 1;
enum VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME = "VK_EXT_headless_surface";
alias VkHeadlessSurfaceCreateFlagsEXT = uint;

struct VkHeadlessSurfaceCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkHeadlessSurfaceCreateFlagsEXT flags;
}

alias PFN_vkCreateHeadlessSurfaceEXT = VkResult function (VkInstance instance, const(VkHeadlessSurfaceCreateInfoEXT)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkSurfaceKHR* pSurface);

VkResult vkCreateHeadlessSurfaceEXT (
    VkInstance instance,
    const(VkHeadlessSurfaceCreateInfoEXT)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkSurfaceKHR* pSurface);

enum VK_EXT_line_rasterization = 1;
enum VK_EXT_LINE_RASTERIZATION_SPEC_VERSION = 1;
enum VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_line_rasterization";

enum VkLineRasterizationModeEXT
{
    VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1,
    VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2,
    VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3,
    VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT = 0x7FFFFFFF
}

struct VkPhysicalDeviceLineRasterizationFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 rectangularLines;
    VkBool32 bresenhamLines;
    VkBool32 smoothLines;
    VkBool32 stippledRectangularLines;
    VkBool32 stippledBresenhamLines;
    VkBool32 stippledSmoothLines;
}

struct VkPhysicalDeviceLineRasterizationPropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    uint lineSubPixelPrecisionBits;
}

struct VkPipelineRasterizationLineStateCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkLineRasterizationModeEXT lineRasterizationMode;
    VkBool32 stippledLineEnable;
    uint lineStippleFactor;
    ushort lineStipplePattern;
}

alias PFN_vkCmdSetLineStippleEXT = void function (VkCommandBuffer commandBuffer, uint lineStippleFactor, ushort lineStipplePattern);

void vkCmdSetLineStippleEXT (
    VkCommandBuffer commandBuffer,
    uint lineStippleFactor,
    ushort lineStipplePattern);

enum VK_EXT_shader_atomic_float = 1;
enum VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION = 1;
enum VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME = "VK_EXT_shader_atomic_float";

struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 shaderBufferFloat32Atomics;
    VkBool32 shaderBufferFloat32AtomicAdd;
    VkBool32 shaderBufferFloat64Atomics;
    VkBool32 shaderBufferFloat64AtomicAdd;
    VkBool32 shaderSharedFloat32Atomics;
    VkBool32 shaderSharedFloat32AtomicAdd;
    VkBool32 shaderSharedFloat64Atomics;
    VkBool32 shaderSharedFloat64AtomicAdd;
    VkBool32 shaderImageFloat32Atomics;
    VkBool32 shaderImageFloat32AtomicAdd;
    VkBool32 sparseImageFloat32Atomics;
    VkBool32 sparseImageFloat32AtomicAdd;
}

enum VK_EXT_host_query_reset = 1;
enum VK_EXT_HOST_QUERY_RESET_SPEC_VERSION = 1;
enum VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME = "VK_EXT_host_query_reset";
alias VkPhysicalDeviceHostQueryResetFeaturesEXT = VkPhysicalDeviceHostQueryResetFeatures;

alias PFN_vkResetQueryPoolEXT = void function (VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount);

void vkResetQueryPoolEXT (
    VkDevice device,
    VkQueryPool queryPool,
    uint firstQuery,
    uint queryCount);

enum VK_EXT_index_type_uint8 = 1;
enum VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION = 1;
enum VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_EXT_index_type_uint8";

struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 indexTypeUint8;
}

enum VK_EXT_extended_dynamic_state = 1;
enum VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION = 1;
enum VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_extended_dynamic_state";

struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 extendedDynamicState;
}

alias PFN_vkCmdSetCullModeEXT = void function (VkCommandBuffer commandBuffer, VkCullModeFlags cullMode);
alias PFN_vkCmdSetFrontFaceEXT = void function (VkCommandBuffer commandBuffer, VkFrontFace frontFace);
alias PFN_vkCmdSetPrimitiveTopologyEXT = void function (VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology);
alias PFN_vkCmdSetViewportWithCountEXT = void function (VkCommandBuffer commandBuffer, uint viewportCount, const(VkViewport)* pViewports);
alias PFN_vkCmdSetScissorWithCountEXT = void function (VkCommandBuffer commandBuffer, uint scissorCount, const(VkRect2D)* pScissors);
alias PFN_vkCmdBindVertexBuffers2EXT = void function (VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, const(VkBuffer)* pBuffers, const(VkDeviceSize)* pOffsets, const(VkDeviceSize)* pSizes, const(VkDeviceSize)* pStrides);
alias PFN_vkCmdSetDepthTestEnableEXT = void function (VkCommandBuffer commandBuffer, VkBool32 depthTestEnable);
alias PFN_vkCmdSetDepthWriteEnableEXT = void function (VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable);
alias PFN_vkCmdSetDepthCompareOpEXT = void function (VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp);
alias PFN_vkCmdSetDepthBoundsTestEnableEXT = void function (VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable);
alias PFN_vkCmdSetStencilTestEnableEXT = void function (VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable);
alias PFN_vkCmdSetStencilOpEXT = void function (VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp);

void vkCmdSetCullModeEXT (
    VkCommandBuffer commandBuffer,
    VkCullModeFlags cullMode);

void vkCmdSetFrontFaceEXT (
    VkCommandBuffer commandBuffer,
    VkFrontFace frontFace);

void vkCmdSetPrimitiveTopologyEXT (
    VkCommandBuffer commandBuffer,
    VkPrimitiveTopology primitiveTopology);

void vkCmdSetViewportWithCountEXT (
    VkCommandBuffer commandBuffer,
    uint viewportCount,
    const(VkViewport)* pViewports);

void vkCmdSetScissorWithCountEXT (
    VkCommandBuffer commandBuffer,
    uint scissorCount,
    const(VkRect2D)* pScissors);

void vkCmdBindVertexBuffers2EXT (
    VkCommandBuffer commandBuffer,
    uint firstBinding,
    uint bindingCount,
    const(VkBuffer)* pBuffers,
    const(VkDeviceSize)* pOffsets,
    const(VkDeviceSize)* pSizes,
    const(VkDeviceSize)* pStrides);

void vkCmdSetDepthTestEnableEXT (
    VkCommandBuffer commandBuffer,
    VkBool32 depthTestEnable);

void vkCmdSetDepthWriteEnableEXT (
    VkCommandBuffer commandBuffer,
    VkBool32 depthWriteEnable);

void vkCmdSetDepthCompareOpEXT (
    VkCommandBuffer commandBuffer,
    VkCompareOp depthCompareOp);

void vkCmdSetDepthBoundsTestEnableEXT (
    VkCommandBuffer commandBuffer,
    VkBool32 depthBoundsTestEnable);

void vkCmdSetStencilTestEnableEXT (
    VkCommandBuffer commandBuffer,
    VkBool32 stencilTestEnable);

void vkCmdSetStencilOpEXT (
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    VkStencilOp failOp,
    VkStencilOp passOp,
    VkStencilOp depthFailOp,
    VkCompareOp compareOp);

enum VK_EXT_shader_atomic_float2 = 1;
enum VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION = 1;
enum VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME = "VK_EXT_shader_atomic_float2";

struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 shaderBufferFloat16Atomics;
    VkBool32 shaderBufferFloat16AtomicAdd;
    VkBool32 shaderBufferFloat16AtomicMinMax;
    VkBool32 shaderBufferFloat32AtomicMinMax;
    VkBool32 shaderBufferFloat64AtomicMinMax;
    VkBool32 shaderSharedFloat16Atomics;
    VkBool32 shaderSharedFloat16AtomicAdd;
    VkBool32 shaderSharedFloat16AtomicMinMax;
    VkBool32 shaderSharedFloat32AtomicMinMax;
    VkBool32 shaderSharedFloat64AtomicMinMax;
    VkBool32 shaderImageFloat32AtomicMinMax;
    VkBool32 sparseImageFloat32AtomicMinMax;
}

enum VK_EXT_shader_demote_to_helper_invocation = 1;
enum VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION = 1;
enum VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME = "VK_EXT_shader_demote_to_helper_invocation";
alias VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;

enum VK_NV_device_generated_commands = 1;
struct VkIndirectCommandsLayoutNV_T;
alias VkIndirectCommandsLayoutNV = VkIndirectCommandsLayoutNV_T*;
enum VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION = 3;
enum VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_NV_device_generated_commands";

enum VkIndirectCommandsTokenTypeNV
{
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7,
    VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
}

enum VkIndirectStateFlagBitsNV
{
    VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV = 0x00000001,
    VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
}

alias VkIndirectStateFlagsNV = uint;

enum VkIndirectCommandsLayoutUsageFlagBitsNV
{
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV = 0x00000001,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV = 0x00000002,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV = 0x00000004,
    VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
}

alias VkIndirectCommandsLayoutUsageFlagsNV = uint;

struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV
{
    VkStructureType sType;
    void* pNext;
    uint maxGraphicsShaderGroupCount;
    uint maxIndirectSequenceCount;
    uint maxIndirectCommandsTokenCount;
    uint maxIndirectCommandsStreamCount;
    uint maxIndirectCommandsTokenOffset;
    uint maxIndirectCommandsStreamStride;
    uint minSequencesCountBufferOffsetAlignment;
    uint minSequencesIndexBufferOffsetAlignment;
    uint minIndirectCommandsBufferOffsetAlignment;
}

struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 deviceGeneratedCommands;
}

struct VkGraphicsShaderGroupCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    uint stageCount;
    const(VkPipelineShaderStageCreateInfo)* pStages;
    const(VkPipelineVertexInputStateCreateInfo)* pVertexInputState;
    const(VkPipelineTessellationStateCreateInfo)* pTessellationState;
}

struct VkGraphicsPipelineShaderGroupsCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    uint groupCount;
    const(VkGraphicsShaderGroupCreateInfoNV)* pGroups;
    uint pipelineCount;
    const(VkPipeline)* pPipelines;
}

struct VkBindShaderGroupIndirectCommandNV
{
    uint groupIndex;
}

struct VkBindIndexBufferIndirectCommandNV
{
    VkDeviceAddress bufferAddress;
    uint size;
    VkIndexType indexType;
}

struct VkBindVertexBufferIndirectCommandNV
{
    VkDeviceAddress bufferAddress;
    uint size;
    uint stride;
}

struct VkSetStateFlagsIndirectCommandNV
{
    uint data;
}

struct VkIndirectCommandsStreamNV
{
    VkBuffer buffer;
    VkDeviceSize offset;
}

struct VkIndirectCommandsLayoutTokenNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkIndirectCommandsTokenTypeNV tokenType;
    uint stream;
    uint offset;
    uint vertexBindingUnit;
    VkBool32 vertexDynamicStride;
    VkPipelineLayout pushconstantPipelineLayout;
    VkShaderStageFlags pushconstantShaderStageFlags;
    uint pushconstantOffset;
    uint pushconstantSize;
    VkIndirectStateFlagsNV indirectStateFlags;
    uint indexTypeCount;
    const(VkIndexType)* pIndexTypes;
    const(uint)* pIndexTypeValues;
}

struct VkIndirectCommandsLayoutCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkIndirectCommandsLayoutUsageFlagsNV flags;
    VkPipelineBindPoint pipelineBindPoint;
    uint tokenCount;
    const(VkIndirectCommandsLayoutTokenNV)* pTokens;
    uint streamCount;
    const(uint)* pStreamStrides;
}

struct VkGeneratedCommandsInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineBindPoint pipelineBindPoint;
    VkPipeline pipeline;
    VkIndirectCommandsLayoutNV indirectCommandsLayout;
    uint streamCount;
    const(VkIndirectCommandsStreamNV)* pStreams;
    uint sequencesCount;
    VkBuffer preprocessBuffer;
    VkDeviceSize preprocessOffset;
    VkDeviceSize preprocessSize;
    VkBuffer sequencesCountBuffer;
    VkDeviceSize sequencesCountOffset;
    VkBuffer sequencesIndexBuffer;
    VkDeviceSize sequencesIndexOffset;
}

struct VkGeneratedCommandsMemoryRequirementsInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineBindPoint pipelineBindPoint;
    VkPipeline pipeline;
    VkIndirectCommandsLayoutNV indirectCommandsLayout;
    uint maxSequencesCount;
}

alias PFN_vkGetGeneratedCommandsMemoryRequirementsNV = void function (VkDevice device, const(VkGeneratedCommandsMemoryRequirementsInfoNV)* pInfo, VkMemoryRequirements2* pMemoryRequirements);
alias PFN_vkCmdPreprocessGeneratedCommandsNV = void function (VkCommandBuffer commandBuffer, const(VkGeneratedCommandsInfoNV)* pGeneratedCommandsInfo);
alias PFN_vkCmdExecuteGeneratedCommandsNV = void function (VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const(VkGeneratedCommandsInfoNV)* pGeneratedCommandsInfo);
alias PFN_vkCmdBindPipelineShaderGroupNV = void function (VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint groupIndex);
alias PFN_vkCreateIndirectCommandsLayoutNV = VkResult function (VkDevice device, const(VkIndirectCommandsLayoutCreateInfoNV)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkIndirectCommandsLayoutNV* pIndirectCommandsLayout);
alias PFN_vkDestroyIndirectCommandsLayoutNV = void function (VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, const(VkAllocationCallbacks)* pAllocator);

void vkGetGeneratedCommandsMemoryRequirementsNV (
    VkDevice device,
    const(VkGeneratedCommandsMemoryRequirementsInfoNV)* pInfo,
    VkMemoryRequirements2* pMemoryRequirements);

void vkCmdPreprocessGeneratedCommandsNV (
    VkCommandBuffer commandBuffer,
    const(VkGeneratedCommandsInfoNV)* pGeneratedCommandsInfo);

void vkCmdExecuteGeneratedCommandsNV (
    VkCommandBuffer commandBuffer,
    VkBool32 isPreprocessed,
    const(VkGeneratedCommandsInfoNV)* pGeneratedCommandsInfo);

void vkCmdBindPipelineShaderGroupNV (
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipeline pipeline,
    uint groupIndex);

VkResult vkCreateIndirectCommandsLayoutNV (
    VkDevice device,
    const(VkIndirectCommandsLayoutCreateInfoNV)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkIndirectCommandsLayoutNV* pIndirectCommandsLayout);

void vkDestroyIndirectCommandsLayoutNV (
    VkDevice device,
    VkIndirectCommandsLayoutNV indirectCommandsLayout,
    const(VkAllocationCallbacks)* pAllocator);

enum VK_NV_inherited_viewport_scissor = 1;
enum VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION = 1;
enum VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME = "VK_NV_inherited_viewport_scissor";

struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 inheritedViewportScissor2D;
}

struct VkCommandBufferInheritanceViewportScissorInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkBool32 viewportScissor2D;
    uint viewportDepthCount;
    const(VkViewport)* pViewportDepths;
}

enum VK_EXT_texel_buffer_alignment = 1;
enum VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION = 1;
enum VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME = "VK_EXT_texel_buffer_alignment";

struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 texelBufferAlignment;
}

alias VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT = VkPhysicalDeviceTexelBufferAlignmentProperties;

enum VK_QCOM_render_pass_transform = 1;
enum VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION = 2;
enum VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME = "VK_QCOM_render_pass_transform";

struct VkRenderPassTransformBeginInfoQCOM
{
    VkStructureType sType;
    void* pNext;
    VkSurfaceTransformFlagBitsKHR transform;
}

struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM
{
    VkStructureType sType;
    void* pNext;
    VkSurfaceTransformFlagBitsKHR transform;
    VkRect2D renderArea;
}

enum VK_EXT_device_memory_report = 1;
enum VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION = 2;
enum VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME = "VK_EXT_device_memory_report";

enum VkDeviceMemoryReportEventTypeEXT
{
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4,
    VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT = 0x7FFFFFFF
}

alias VkDeviceMemoryReportFlagsEXT = uint;

struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 deviceMemoryReport;
}

struct VkDeviceMemoryReportCallbackDataEXT
{
    VkStructureType sType;
    void* pNext;
    VkDeviceMemoryReportFlagsEXT flags;
    VkDeviceMemoryReportEventTypeEXT type;
    ulong memoryObjectId;
    VkDeviceSize size;
    VkObjectType objectType;
    ulong objectHandle;
    uint heapIndex;
}

alias PFN_vkDeviceMemoryReportCallbackEXT = void function (
    const(VkDeviceMemoryReportCallbackDataEXT)* pCallbackData,
    void* pUserData);

struct VkDeviceDeviceMemoryReportCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceMemoryReportFlagsEXT flags;
    PFN_vkDeviceMemoryReportCallbackEXT pfnUserCallback;
    void* pUserData;
}

enum VK_EXT_acquire_drm_display = 1;
enum VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION = 1;
enum VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME = "VK_EXT_acquire_drm_display";
alias PFN_vkAcquireDrmDisplayEXT = VkResult function (VkPhysicalDevice physicalDevice, int drmFd, VkDisplayKHR display);
alias PFN_vkGetDrmDisplayEXT = VkResult function (VkPhysicalDevice physicalDevice, int drmFd, uint connectorId, VkDisplayKHR* display);

VkResult vkAcquireDrmDisplayEXT (
    VkPhysicalDevice physicalDevice,
    int drmFd,
    VkDisplayKHR display);

VkResult vkGetDrmDisplayEXT (
    VkPhysicalDevice physicalDevice,
    int drmFd,
    uint connectorId,
    VkDisplayKHR* display);

enum VK_EXT_robustness2 = 1;
enum VK_EXT_ROBUSTNESS_2_SPEC_VERSION = 1;
enum VK_EXT_ROBUSTNESS_2_EXTENSION_NAME = "VK_EXT_robustness2";

struct VkPhysicalDeviceRobustness2FeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 robustBufferAccess2;
    VkBool32 robustImageAccess2;
    VkBool32 nullDescriptor;
}

struct VkPhysicalDeviceRobustness2PropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    VkDeviceSize robustStorageBufferAccessSizeAlignment;
    VkDeviceSize robustUniformBufferAccessSizeAlignment;
}

enum VK_EXT_custom_border_color = 1;
enum VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION = 12;
enum VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME = "VK_EXT_custom_border_color";

struct VkSamplerCustomBorderColorCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkClearColorValue customBorderColor;
    VkFormat format;
}

struct VkPhysicalDeviceCustomBorderColorPropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    uint maxCustomBorderColorSamplers;
}

struct VkPhysicalDeviceCustomBorderColorFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 customBorderColors;
    VkBool32 customBorderColorWithoutFormat;
}

enum VK_GOOGLE_user_type = 1;
enum VK_GOOGLE_USER_TYPE_SPEC_VERSION = 1;
enum VK_GOOGLE_USER_TYPE_EXTENSION_NAME = "VK_GOOGLE_user_type";

enum VK_EXT_private_data = 1;
alias VkPrivateDataSlotEXT = VkPrivateDataSlot_T*;

enum VK_EXT_PRIVATE_DATA_SPEC_VERSION = 1;
enum VK_EXT_PRIVATE_DATA_EXTENSION_NAME = "VK_EXT_private_data";
alias VkPrivateDataSlotCreateFlagsEXT = uint;

alias VkPrivateDataSlotCreateFlagBitsEXT = VkPrivateDataSlotCreateFlagBits;

alias VkPhysicalDevicePrivateDataFeaturesEXT = VkPhysicalDevicePrivateDataFeatures;

alias VkDevicePrivateDataCreateInfoEXT = VkDevicePrivateDataCreateInfo;

alias VkPrivateDataSlotCreateInfoEXT = VkPrivateDataSlotCreateInfo;

alias PFN_vkCreatePrivateDataSlotEXT = VkResult function (VkDevice device, const(VkPrivateDataSlotCreateInfo)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkPrivateDataSlot* pPrivateDataSlot);
alias PFN_vkDestroyPrivateDataSlotEXT = void function (VkDevice device, VkPrivateDataSlot privateDataSlot, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkSetPrivateDataEXT = VkResult function (VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong data);
alias PFN_vkGetPrivateDataEXT = void function (VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong* pData);

VkResult vkCreatePrivateDataSlotEXT (
    VkDevice device,
    const(VkPrivateDataSlotCreateInfo)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkPrivateDataSlot* pPrivateDataSlot);

void vkDestroyPrivateDataSlotEXT (
    VkDevice device,
    VkPrivateDataSlot privateDataSlot,
    const(VkAllocationCallbacks)* pAllocator);

VkResult vkSetPrivateDataEXT (
    VkDevice device,
    VkObjectType objectType,
    ulong objectHandle,
    VkPrivateDataSlot privateDataSlot,
    ulong data);

void vkGetPrivateDataEXT (
    VkDevice device,
    VkObjectType objectType,
    ulong objectHandle,
    VkPrivateDataSlot privateDataSlot,
    ulong* pData);

enum VK_EXT_pipeline_creation_cache_control = 1;
enum VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION = 3;
enum VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME = "VK_EXT_pipeline_creation_cache_control";
alias VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT = VkPhysicalDevicePipelineCreationCacheControlFeatures;

enum VK_NV_device_diagnostics_config = 1;
enum VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION = 1;
enum VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME = "VK_NV_device_diagnostics_config";

enum VkDeviceDiagnosticsConfigFlagBitsNV
{
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV = 0x00000001,
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV = 0x00000002,
    VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV = 0x00000004,
    VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV = 0x7FFFFFFF
}

alias VkDeviceDiagnosticsConfigFlagsNV = uint;

struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 diagnosticsConfig;
}

struct VkDeviceDiagnosticsConfigCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceDiagnosticsConfigFlagsNV flags;
}

enum VK_QCOM_render_pass_store_ops = 1;
enum VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION = 2;
enum VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME = "VK_QCOM_render_pass_store_ops";

enum VK_NV_fragment_shading_rate_enums = 1;
enum VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION = 1;
enum VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME = "VK_NV_fragment_shading_rate_enums";

enum VkFragmentShadingRateTypeNV
{
    VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0,
    VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1,
    VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
}

enum VkFragmentShadingRateNV
{
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
    VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10,
    VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11,
    VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12,
    VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13,
    VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14,
    VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15,
    VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV = 0x7FFFFFFF
}

struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 fragmentShadingRateEnums;
    VkBool32 supersampleFragmentShadingRates;
    VkBool32 noInvocationFragmentShadingRates;
}

struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV
{
    VkStructureType sType;
    void* pNext;
    VkSampleCountFlagBits maxFragmentShadingRateInvocationCount;
}

struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkFragmentShadingRateTypeNV shadingRateType;
    VkFragmentShadingRateNV shadingRate;
    VkFragmentShadingRateCombinerOpKHR[2] combinerOps;
}

alias PFN_vkCmdSetFragmentShadingRateEnumNV = void function (VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, const(VkFragmentShadingRateCombinerOpKHR)[2] combinerOps);

void vkCmdSetFragmentShadingRateEnumNV (
    VkCommandBuffer commandBuffer,
    VkFragmentShadingRateNV shadingRate,
    ref const(VkFragmentShadingRateCombinerOpKHR)[2] combinerOps);

enum VK_NV_ray_tracing_motion_blur = 1;
enum VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION = 1;
enum VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME = "VK_NV_ray_tracing_motion_blur";

enum VkAccelerationStructureMotionInstanceTypeNV
{
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0,
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1,
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2,
    VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV = 0x7FFFFFFF
}

alias VkAccelerationStructureMotionInfoFlagsNV = uint;
alias VkAccelerationStructureMotionInstanceFlagsNV = uint;

union VkDeviceOrHostAddressConstKHR
{
    VkDeviceAddress deviceAddress;
    const(void)* hostAddress;
}

struct VkAccelerationStructureGeometryMotionTrianglesDataNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceOrHostAddressConstKHR vertexData;
}

struct VkAccelerationStructureMotionInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    uint maxInstances;
    VkAccelerationStructureMotionInfoFlagsNV flags;
}

struct VkAccelerationStructureMatrixMotionInstanceNV
{
    import std.bitmanip : bitfields;

    VkTransformMatrixKHR transformT0;
    VkTransformMatrixKHR transformT1;

    mixin(bitfields!(
        uint, "instanceCustomIndex", 24,
        uint, "mask", 8,
        uint, "instanceShaderBindingTableRecordOffset", 24,
        VkGeometryInstanceFlagsKHR, "flags", 8));

    ulong accelerationStructureReference;
}

struct VkSRTDataNV
{
    float sx;
    float a;
    float b;
    float pvx;
    float sy;
    float c;
    float pvy;
    float sz;
    float pvz;
    float qx;
    float qy;
    float qz;
    float qw;
    float tx;
    float ty;
    float tz;
}

struct VkAccelerationStructureSRTMotionInstanceNV
{
    import std.bitmanip : bitfields;

    VkSRTDataNV transformT0;
    VkSRTDataNV transformT1;

    mixin(bitfields!(
        uint, "instanceCustomIndex", 24,
        uint, "mask", 8,
        uint, "instanceShaderBindingTableRecordOffset", 24,
        VkGeometryInstanceFlagsKHR, "flags", 8));

    ulong accelerationStructureReference;
}

union VkAccelerationStructureMotionInstanceDataNV
{
    VkAccelerationStructureInstanceKHR staticInstance;
    VkAccelerationStructureMatrixMotionInstanceNV matrixMotionInstance;
    VkAccelerationStructureSRTMotionInstanceNV srtMotionInstance;
}

struct VkAccelerationStructureMotionInstanceNV
{
    VkAccelerationStructureMotionInstanceTypeNV type;
    VkAccelerationStructureMotionInstanceFlagsNV flags;
    VkAccelerationStructureMotionInstanceDataNV data;
}

struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 rayTracingMotionBlur;
    VkBool32 rayTracingMotionBlurPipelineTraceRaysIndirect;
}

enum VK_EXT_ycbcr_2plane_444_formats = 1;
enum VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION = 1;
enum VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME = "VK_EXT_ycbcr_2plane_444_formats";

struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 ycbcr2plane444Formats;
}

enum VK_EXT_fragment_density_map2 = 1;
enum VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION = 1;
enum VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME = "VK_EXT_fragment_density_map2";

struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 fragmentDensityMapDeferred;
}

struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 subsampledLoads;
    VkBool32 subsampledCoarseReconstructionEarlyAccess;
    uint maxSubsampledArrayLayers;
    uint maxDescriptorSetSubsampledSamplers;
}

enum VK_QCOM_rotated_copy_commands = 1;
enum VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION = 1;
enum VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME = "VK_QCOM_rotated_copy_commands";

struct VkCopyCommandTransformInfoQCOM
{
    VkStructureType sType;
    const(void)* pNext;
    VkSurfaceTransformFlagBitsKHR transform;
}

enum VK_EXT_image_robustness = 1;
enum VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION = 1;
enum VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_image_robustness";
alias VkPhysicalDeviceImageRobustnessFeaturesEXT = VkPhysicalDeviceImageRobustnessFeatures;

enum VK_EXT_4444_formats = 1;
enum VK_EXT_4444_FORMATS_SPEC_VERSION = 1;
enum VK_EXT_4444_FORMATS_EXTENSION_NAME = "VK_EXT_4444_formats";

struct VkPhysicalDevice4444FormatsFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 formatA4R4G4B4;
    VkBool32 formatA4B4G4R4;
}

enum VK_ARM_rasterization_order_attachment_access = 1;
enum VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION = 1;
enum VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_ARM_rasterization_order_attachment_access";

struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM
{
    VkStructureType sType;
    const(void)* pNext;
    VkBool32 rasterizationOrderColorAttachmentAccess;
    VkBool32 rasterizationOrderDepthAttachmentAccess;
    VkBool32 rasterizationOrderStencilAttachmentAccess;
}

enum VK_EXT_rgba10x6_formats = 1;
enum VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION = 1;
enum VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME = "VK_EXT_rgba10x6_formats";

struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 formatRgba10x6WithoutYCbCrSampler;
}

enum VK_NV_acquire_winrt_display = 1;
enum VK_NV_ACQUIRE_WINRT_DISPLAY_SPEC_VERSION = 1;
enum VK_NV_ACQUIRE_WINRT_DISPLAY_EXTENSION_NAME = "VK_NV_acquire_winrt_display";
alias PFN_vkAcquireWinrtDisplayNV = VkResult function (VkPhysicalDevice physicalDevice, VkDisplayKHR display);
alias PFN_vkGetWinrtDisplayNV = VkResult function (VkPhysicalDevice physicalDevice, uint deviceRelativeId, VkDisplayKHR* pDisplay);

VkResult vkAcquireWinrtDisplayNV (
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display);

VkResult vkGetWinrtDisplayNV (
    VkPhysicalDevice physicalDevice,
    uint deviceRelativeId,
    VkDisplayKHR* pDisplay);

enum VK_VALVE_mutable_descriptor_type = 1;
enum VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION = 1;
enum VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_VALVE_mutable_descriptor_type";

struct VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE
{
    VkStructureType sType;
    void* pNext;
    VkBool32 mutableDescriptorType;
}

struct VkMutableDescriptorTypeListVALVE
{
    uint descriptorTypeCount;
    const(VkDescriptorType)* pDescriptorTypes;
}

struct VkMutableDescriptorTypeCreateInfoVALVE
{
    VkStructureType sType;
    const(void)* pNext;
    uint mutableDescriptorTypeListCount;
    const(VkMutableDescriptorTypeListVALVE)* pMutableDescriptorTypeLists;
}

enum VK_EXT_vertex_input_dynamic_state = 1;
enum VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION = 2;
enum VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_vertex_input_dynamic_state";

struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 vertexInputDynamicState;
}

struct VkVertexInputBindingDescription2EXT
{
    VkStructureType sType;
    void* pNext;
    uint binding;
    uint stride;
    VkVertexInputRate inputRate;
    uint divisor;
}

struct VkVertexInputAttributeDescription2EXT
{
    VkStructureType sType;
    void* pNext;
    uint location;
    uint binding;
    VkFormat format;
    uint offset;
}

alias PFN_vkCmdSetVertexInputEXT = void function (VkCommandBuffer commandBuffer, uint vertexBindingDescriptionCount, const(VkVertexInputBindingDescription2EXT)* pVertexBindingDescriptions, uint vertexAttributeDescriptionCount, const(VkVertexInputAttributeDescription2EXT)* pVertexAttributeDescriptions);

void vkCmdSetVertexInputEXT (
    VkCommandBuffer commandBuffer,
    uint vertexBindingDescriptionCount,
    const(VkVertexInputBindingDescription2EXT)* pVertexBindingDescriptions,
    uint vertexAttributeDescriptionCount,
    const(VkVertexInputAttributeDescription2EXT)* pVertexAttributeDescriptions);

enum VK_EXT_physical_device_drm = 1;
enum VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION = 1;
enum VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME = "VK_EXT_physical_device_drm";

struct VkPhysicalDeviceDrmPropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 hasPrimary;
    VkBool32 hasRender;
    long primaryMajor;
    long primaryMinor;
    long renderMajor;
    long renderMinor;
}

enum VK_EXT_depth_clip_control = 1;
enum VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION = 1;
enum VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME = "VK_EXT_depth_clip_control";

struct VkPhysicalDeviceDepthClipControlFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 depthClipControl;
}

struct VkPipelineViewportDepthClipControlCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkBool32 negativeOneToOne;
}

enum VK_EXT_primitive_topology_list_restart = 1;
enum VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION = 1;
enum VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME = "VK_EXT_primitive_topology_list_restart";

struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 primitiveTopologyListRestart;
    VkBool32 primitiveTopologyPatchListRestart;
}

enum VK_HUAWEI_subpass_shading = 1;
enum VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION = 2;
enum VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME = "VK_HUAWEI_subpass_shading";

struct VkSubpassShadingPipelineCreateInfoHUAWEI
{
    VkStructureType sType;
    void* pNext;
    VkRenderPass renderPass;
    uint subpass;
}

struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI
{
    VkStructureType sType;
    void* pNext;
    VkBool32 subpassShading;
}

struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI
{
    VkStructureType sType;
    void* pNext;
    uint maxSubpassShadingWorkgroupSizeAspectRatio;
}

alias PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = VkResult function (VkDevice device, VkRenderPass renderpass, VkExtent2D* pMaxWorkgroupSize);
alias PFN_vkCmdSubpassShadingHUAWEI = void function (VkCommandBuffer commandBuffer);

VkResult vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI (
    VkDevice device,
    VkRenderPass renderpass,
    VkExtent2D* pMaxWorkgroupSize);

void vkCmdSubpassShadingHUAWEI (VkCommandBuffer commandBuffer);

enum VK_HUAWEI_invocation_mask = 1;
enum VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION = 1;
enum VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME = "VK_HUAWEI_invocation_mask";

struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI
{
    VkStructureType sType;
    void* pNext;
    VkBool32 invocationMask;
}

alias PFN_vkCmdBindInvocationMaskHUAWEI = void function (VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout);

void vkCmdBindInvocationMaskHUAWEI (
    VkCommandBuffer commandBuffer,
    VkImageView imageView,
    VkImageLayout imageLayout);

enum VK_NV_external_memory_rdma = 1;
alias VkRemoteAddressNV = void*;
enum VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION = 1;
enum VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME = "VK_NV_external_memory_rdma";

struct VkMemoryGetRemoteAddressInfoNV
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceMemory memory;
    VkExternalMemoryHandleTypeFlagBits handleType;
}

struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 externalMemoryRDMA;
}

alias PFN_vkGetMemoryRemoteAddressNV = VkResult function (VkDevice device, const(VkMemoryGetRemoteAddressInfoNV)* pMemoryGetRemoteAddressInfo, VkRemoteAddressNV* pAddress);

VkResult vkGetMemoryRemoteAddressNV (
    VkDevice device,
    const(VkMemoryGetRemoteAddressInfoNV)* pMemoryGetRemoteAddressInfo,
    VkRemoteAddressNV* pAddress);

enum VK_EXT_extended_dynamic_state2 = 1;
enum VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION = 1;
enum VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME = "VK_EXT_extended_dynamic_state2";

struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 extendedDynamicState2;
    VkBool32 extendedDynamicState2LogicOp;
    VkBool32 extendedDynamicState2PatchControlPoints;
}

alias PFN_vkCmdSetPatchControlPointsEXT = void function (VkCommandBuffer commandBuffer, uint patchControlPoints);
alias PFN_vkCmdSetRasterizerDiscardEnableEXT = void function (VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable);
alias PFN_vkCmdSetDepthBiasEnableEXT = void function (VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable);
alias PFN_vkCmdSetLogicOpEXT = void function (VkCommandBuffer commandBuffer, VkLogicOp logicOp);
alias PFN_vkCmdSetPrimitiveRestartEnableEXT = void function (VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable);

void vkCmdSetPatchControlPointsEXT (
    VkCommandBuffer commandBuffer,
    uint patchControlPoints);

void vkCmdSetRasterizerDiscardEnableEXT (
    VkCommandBuffer commandBuffer,
    VkBool32 rasterizerDiscardEnable);

void vkCmdSetDepthBiasEnableEXT (
    VkCommandBuffer commandBuffer,
    VkBool32 depthBiasEnable);

void vkCmdSetLogicOpEXT (VkCommandBuffer commandBuffer, VkLogicOp logicOp);

void vkCmdSetPrimitiveRestartEnableEXT (
    VkCommandBuffer commandBuffer,
    VkBool32 primitiveRestartEnable);

enum VK_EXT_color_write_enable = 1;
enum VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION = 1;
enum VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME = "VK_EXT_color_write_enable";

struct VkPhysicalDeviceColorWriteEnableFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 colorWriteEnable;
}

struct VkPipelineColorWriteCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    uint attachmentCount;
    const(VkBool32)* pColorWriteEnables;
}

alias PFN_vkCmdSetColorWriteEnableEXT = void function (VkCommandBuffer commandBuffer, uint attachmentCount, const(VkBool32)* pColorWriteEnables);

void vkCmdSetColorWriteEnableEXT (
    VkCommandBuffer commandBuffer,
    uint attachmentCount,
    const(VkBool32)* pColorWriteEnables);

enum VK_EXT_global_priority_query = 1;
enum VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION = 1;
enum VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME = "VK_EXT_global_priority_query";
enum VK_MAX_GLOBAL_PRIORITY_SIZE_EXT = VK_MAX_GLOBAL_PRIORITY_SIZE_KHR;
alias VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT = VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR;

alias VkQueueFamilyGlobalPriorityPropertiesEXT = VkQueueFamilyGlobalPriorityPropertiesKHR;

enum VK_EXT_image_view_min_lod = 1;
enum VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION = 1;
enum VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME = "VK_EXT_image_view_min_lod";

struct VkPhysicalDeviceImageViewMinLodFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 minLod;
}

struct VkImageViewMinLodCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    float minLod;
}

enum VK_EXT_multi_draw = 1;
enum VK_EXT_MULTI_DRAW_SPEC_VERSION = 1;
enum VK_EXT_MULTI_DRAW_EXTENSION_NAME = "VK_EXT_multi_draw";

struct VkPhysicalDeviceMultiDrawFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 multiDraw;
}

struct VkPhysicalDeviceMultiDrawPropertiesEXT
{
    VkStructureType sType;
    void* pNext;
    uint maxMultiDrawCount;
}

struct VkMultiDrawInfoEXT
{
    uint firstVertex;
    uint vertexCount;
}

struct VkMultiDrawIndexedInfoEXT
{
    uint firstIndex;
    uint indexCount;
    int vertexOffset;
}

alias PFN_vkCmdDrawMultiEXT = void function (VkCommandBuffer commandBuffer, uint drawCount, const(VkMultiDrawInfoEXT)* pVertexInfo, uint instanceCount, uint firstInstance, uint stride);
alias PFN_vkCmdDrawMultiIndexedEXT = void function (VkCommandBuffer commandBuffer, uint drawCount, const(VkMultiDrawIndexedInfoEXT)* pIndexInfo, uint instanceCount, uint firstInstance, uint stride, const(int)* pVertexOffset);

void vkCmdDrawMultiEXT (
    VkCommandBuffer commandBuffer,
    uint drawCount,
    const(VkMultiDrawInfoEXT)* pVertexInfo,
    uint instanceCount,
    uint firstInstance,
    uint stride);

void vkCmdDrawMultiIndexedEXT (
    VkCommandBuffer commandBuffer,
    uint drawCount,
    const(VkMultiDrawIndexedInfoEXT)* pIndexInfo,
    uint instanceCount,
    uint firstInstance,
    uint stride,
    const(int)* pVertexOffset);

enum VK_EXT_load_store_op_none = 1;
enum VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION = 1;
enum VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME = "VK_EXT_load_store_op_none";

enum VK_EXT_border_color_swizzle = 1;
enum VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION = 1;
enum VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME = "VK_EXT_border_color_swizzle";

struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 borderColorSwizzle;
    VkBool32 borderColorSwizzleFromImage;
}

struct VkSamplerBorderColorComponentMappingCreateInfoEXT
{
    VkStructureType sType;
    const(void)* pNext;
    VkComponentMapping components;
    VkBool32 srgb;
}

enum VK_EXT_pageable_device_local_memory = 1;
enum VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION = 1;
enum VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME = "VK_EXT_pageable_device_local_memory";

struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT
{
    VkStructureType sType;
    void* pNext;
    VkBool32 pageableDeviceLocalMemory;
}

alias PFN_vkSetDeviceMemoryPriorityEXT = void function (VkDevice device, VkDeviceMemory memory, float priority);

void vkSetDeviceMemoryPriorityEXT (
    VkDevice device,
    VkDeviceMemory memory,
    float priority);

enum VK_QCOM_fragment_density_map_offset = 1;
enum VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION = 1;
enum VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME = "VK_QCOM_fragment_density_map_offset";

struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM
{
    VkStructureType sType;
    void* pNext;
    VkBool32 fragmentDensityMapOffset;
}

struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM
{
    VkStructureType sType;
    void* pNext;
    VkExtent2D fragmentDensityOffsetGranularity;
}

struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM
{
    VkStructureType sType;
    const(void)* pNext;
    uint fragmentDensityOffsetCount;
    const(VkOffset2D)* pFragmentDensityOffsets;
}

enum VK_NV_linear_color_attachment = 1;
enum VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION = 1;
enum VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME = "VK_NV_linear_color_attachment";

struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV
{
    VkStructureType sType;
    void* pNext;
    VkBool32 linearColorAttachment;
}

enum VK_GOOGLE_surfaceless_query = 1;
enum VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION = 1;
enum VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME = "VK_GOOGLE_surfaceless_query";

enum VK_KHR_acceleration_structure = 1;
struct VkAccelerationStructureKHR_T;
alias VkAccelerationStructureKHR = VkAccelerationStructureKHR_T*;
enum VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION = 13;
enum VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME = "VK_KHR_acceleration_structure";

enum VkBuildAccelerationStructureModeKHR
{
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0,
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1,
    VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR = 0x7FFFFFFF
}

enum VkAccelerationStructureBuildTypeKHR
{
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0,
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1,
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2,
    VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR = 0x7FFFFFFF
}

enum VkAccelerationStructureCompatibilityKHR
{
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0,
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1,
    VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR = 0x7FFFFFFF
}

enum VkAccelerationStructureCreateFlagBitsKHR
{
    VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR = 0x00000001,
    VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV = 0x00000004,
    VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR = 0x7FFFFFFF
}

alias VkAccelerationStructureCreateFlagsKHR = uint;

union VkDeviceOrHostAddressKHR
{
    VkDeviceAddress deviceAddress;
    void* hostAddress;
}

struct VkAccelerationStructureBuildRangeInfoKHR
{
    uint primitiveCount;
    uint primitiveOffset;
    uint firstVertex;
    uint transformOffset;
}

struct VkAccelerationStructureGeometryTrianglesDataKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkFormat vertexFormat;
    VkDeviceOrHostAddressConstKHR vertexData;
    VkDeviceSize vertexStride;
    uint maxVertex;
    VkIndexType indexType;
    VkDeviceOrHostAddressConstKHR indexData;
    VkDeviceOrHostAddressConstKHR transformData;
}

struct VkAccelerationStructureGeometryAabbsDataKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceOrHostAddressConstKHR data;
    VkDeviceSize stride;
}

struct VkAccelerationStructureGeometryInstancesDataKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkBool32 arrayOfPointers;
    VkDeviceOrHostAddressConstKHR data;
}

union VkAccelerationStructureGeometryDataKHR
{
    VkAccelerationStructureGeometryTrianglesDataKHR triangles;
    VkAccelerationStructureGeometryAabbsDataKHR aabbs;
    VkAccelerationStructureGeometryInstancesDataKHR instances;
}

struct VkAccelerationStructureGeometryKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkGeometryTypeKHR geometryType;
    VkAccelerationStructureGeometryDataKHR geometry;
    VkGeometryFlagsKHR flags;
}

struct VkAccelerationStructureBuildGeometryInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkAccelerationStructureTypeKHR type;
    VkBuildAccelerationStructureFlagsKHR flags;
    VkBuildAccelerationStructureModeKHR mode;
    VkAccelerationStructureKHR srcAccelerationStructure;
    VkAccelerationStructureKHR dstAccelerationStructure;
    uint geometryCount;
    const(VkAccelerationStructureGeometryKHR)* pGeometries;
    const(VkAccelerationStructureGeometryKHR*)* ppGeometries;
    VkDeviceOrHostAddressKHR scratchData;
}

struct VkAccelerationStructureCreateInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkAccelerationStructureCreateFlagsKHR createFlags;
    VkBuffer buffer;
    VkDeviceSize offset;
    VkDeviceSize size;
    VkAccelerationStructureTypeKHR type;
    VkDeviceAddress deviceAddress;
}

struct VkWriteDescriptorSetAccelerationStructureKHR
{
    VkStructureType sType;
    const(void)* pNext;
    uint accelerationStructureCount;
    const(VkAccelerationStructureKHR)* pAccelerationStructures;
}

struct VkPhysicalDeviceAccelerationStructureFeaturesKHR
{
    VkStructureType sType;
    void* pNext;
    VkBool32 accelerationStructure;
    VkBool32 accelerationStructureCaptureReplay;
    VkBool32 accelerationStructureIndirectBuild;
    VkBool32 accelerationStructureHostCommands;
    VkBool32 descriptorBindingAccelerationStructureUpdateAfterBind;
}

struct VkPhysicalDeviceAccelerationStructurePropertiesKHR
{
    VkStructureType sType;
    void* pNext;
    ulong maxGeometryCount;
    ulong maxInstanceCount;
    ulong maxPrimitiveCount;
    uint maxPerStageDescriptorAccelerationStructures;
    uint maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
    uint maxDescriptorSetAccelerationStructures;
    uint maxDescriptorSetUpdateAfterBindAccelerationStructures;
    uint minAccelerationStructureScratchOffsetAlignment;
}

struct VkAccelerationStructureDeviceAddressInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkAccelerationStructureKHR accelerationStructure;
}

struct VkAccelerationStructureVersionInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    const(ubyte)* pVersionData;
}

struct VkCopyAccelerationStructureToMemoryInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkAccelerationStructureKHR src;
    VkDeviceOrHostAddressKHR dst;
    VkCopyAccelerationStructureModeKHR mode;
}

struct VkCopyMemoryToAccelerationStructureInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceOrHostAddressConstKHR src;
    VkAccelerationStructureKHR dst;
    VkCopyAccelerationStructureModeKHR mode;
}

struct VkCopyAccelerationStructureInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkAccelerationStructureKHR src;
    VkAccelerationStructureKHR dst;
    VkCopyAccelerationStructureModeKHR mode;
}

struct VkAccelerationStructureBuildSizesInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkDeviceSize accelerationStructureSize;
    VkDeviceSize updateScratchSize;
    VkDeviceSize buildScratchSize;
}

alias PFN_vkCreateAccelerationStructureKHR = VkResult function (VkDevice device, const(VkAccelerationStructureCreateInfoKHR)* pCreateInfo, const(VkAllocationCallbacks)* pAllocator, VkAccelerationStructureKHR* pAccelerationStructure);
alias PFN_vkDestroyAccelerationStructureKHR = void function (VkDevice device, VkAccelerationStructureKHR accelerationStructure, const(VkAllocationCallbacks)* pAllocator);
alias PFN_vkCmdBuildAccelerationStructuresKHR = void function (VkCommandBuffer commandBuffer, uint infoCount, const(VkAccelerationStructureBuildGeometryInfoKHR)* pInfos, const(VkAccelerationStructureBuildRangeInfoKHR*)* ppBuildRangeInfos);
alias PFN_vkCmdBuildAccelerationStructuresIndirectKHR = void function (VkCommandBuffer commandBuffer, uint infoCount, const(VkAccelerationStructureBuildGeometryInfoKHR)* pInfos, const(VkDeviceAddress)* pIndirectDeviceAddresses, const(uint)* pIndirectStrides, const(uint*)* ppMaxPrimitiveCounts);
alias PFN_vkBuildAccelerationStructuresKHR = VkResult function (VkDevice device, VkDeferredOperationKHR deferredOperation, uint infoCount, const(VkAccelerationStructureBuildGeometryInfoKHR)* pInfos, const(VkAccelerationStructureBuildRangeInfoKHR*)* ppBuildRangeInfos);
alias PFN_vkCopyAccelerationStructureKHR = VkResult function (VkDevice device, VkDeferredOperationKHR deferredOperation, const(VkCopyAccelerationStructureInfoKHR)* pInfo);
alias PFN_vkCopyAccelerationStructureToMemoryKHR = VkResult function (VkDevice device, VkDeferredOperationKHR deferredOperation, const(VkCopyAccelerationStructureToMemoryInfoKHR)* pInfo);
alias PFN_vkCopyMemoryToAccelerationStructureKHR = VkResult function (VkDevice device, VkDeferredOperationKHR deferredOperation, const(VkCopyMemoryToAccelerationStructureInfoKHR)* pInfo);
alias PFN_vkWriteAccelerationStructuresPropertiesKHR = VkResult function (VkDevice device, uint accelerationStructureCount, const(VkAccelerationStructureKHR)* pAccelerationStructures, VkQueryType queryType, size_t dataSize, void* pData, size_t stride);
alias PFN_vkCmdCopyAccelerationStructureKHR = void function (VkCommandBuffer commandBuffer, const(VkCopyAccelerationStructureInfoKHR)* pInfo);
alias PFN_vkCmdCopyAccelerationStructureToMemoryKHR = void function (VkCommandBuffer commandBuffer, const(VkCopyAccelerationStructureToMemoryInfoKHR)* pInfo);
alias PFN_vkCmdCopyMemoryToAccelerationStructureKHR = void function (VkCommandBuffer commandBuffer, const(VkCopyMemoryToAccelerationStructureInfoKHR)* pInfo);
alias PFN_vkGetAccelerationStructureDeviceAddressKHR = ulong function (VkDevice device, const(VkAccelerationStructureDeviceAddressInfoKHR)* pInfo);
alias PFN_vkCmdWriteAccelerationStructuresPropertiesKHR = void function (VkCommandBuffer commandBuffer, uint accelerationStructureCount, const(VkAccelerationStructureKHR)* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery);
alias PFN_vkGetDeviceAccelerationStructureCompatibilityKHR = void function (VkDevice device, const(VkAccelerationStructureVersionInfoKHR)* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility);
alias PFN_vkGetAccelerationStructureBuildSizesKHR = void function (VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const(VkAccelerationStructureBuildGeometryInfoKHR)* pBuildInfo, const(uint)* pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo);

VkResult vkCreateAccelerationStructureKHR (
    VkDevice device,
    const(VkAccelerationStructureCreateInfoKHR)* pCreateInfo,
    const(VkAllocationCallbacks)* pAllocator,
    VkAccelerationStructureKHR* pAccelerationStructure);

void vkDestroyAccelerationStructureKHR (
    VkDevice device,
    VkAccelerationStructureKHR accelerationStructure,
    const(VkAllocationCallbacks)* pAllocator);

void vkCmdBuildAccelerationStructuresKHR (
    VkCommandBuffer commandBuffer,
    uint infoCount,
    const(VkAccelerationStructureBuildGeometryInfoKHR)* pInfos,
    const(VkAccelerationStructureBuildRangeInfoKHR*)* ppBuildRangeInfos);

void vkCmdBuildAccelerationStructuresIndirectKHR (
    VkCommandBuffer commandBuffer,
    uint infoCount,
    const(VkAccelerationStructureBuildGeometryInfoKHR)* pInfos,
    const(VkDeviceAddress)* pIndirectDeviceAddresses,
    const(uint)* pIndirectStrides,
    const(uint*)* ppMaxPrimitiveCounts);

VkResult vkBuildAccelerationStructuresKHR (
    VkDevice device,
    VkDeferredOperationKHR deferredOperation,
    uint infoCount,
    const(VkAccelerationStructureBuildGeometryInfoKHR)* pInfos,
    const(VkAccelerationStructureBuildRangeInfoKHR*)* ppBuildRangeInfos);

VkResult vkCopyAccelerationStructureKHR (
    VkDevice device,
    VkDeferredOperationKHR deferredOperation,
    const(VkCopyAccelerationStructureInfoKHR)* pInfo);

VkResult vkCopyAccelerationStructureToMemoryKHR (
    VkDevice device,
    VkDeferredOperationKHR deferredOperation,
    const(VkCopyAccelerationStructureToMemoryInfoKHR)* pInfo);

VkResult vkCopyMemoryToAccelerationStructureKHR (
    VkDevice device,
    VkDeferredOperationKHR deferredOperation,
    const(VkCopyMemoryToAccelerationStructureInfoKHR)* pInfo);

VkResult vkWriteAccelerationStructuresPropertiesKHR (
    VkDevice device,
    uint accelerationStructureCount,
    const(VkAccelerationStructureKHR)* pAccelerationStructures,
    VkQueryType queryType,
    size_t dataSize,
    void* pData,
    size_t stride);

void vkCmdCopyAccelerationStructureKHR (
    VkCommandBuffer commandBuffer,
    const(VkCopyAccelerationStructureInfoKHR)* pInfo);

void vkCmdCopyAccelerationStructureToMemoryKHR (
    VkCommandBuffer commandBuffer,
    const(VkCopyAccelerationStructureToMemoryInfoKHR)* pInfo);

void vkCmdCopyMemoryToAccelerationStructureKHR (
    VkCommandBuffer commandBuffer,
    const(VkCopyMemoryToAccelerationStructureInfoKHR)* pInfo);

VkDeviceAddress vkGetAccelerationStructureDeviceAddressKHR (
    VkDevice device,
    const(VkAccelerationStructureDeviceAddressInfoKHR)* pInfo);

void vkCmdWriteAccelerationStructuresPropertiesKHR (
    VkCommandBuffer commandBuffer,
    uint accelerationStructureCount,
    const(VkAccelerationStructureKHR)* pAccelerationStructures,
    VkQueryType queryType,
    VkQueryPool queryPool,
    uint firstQuery);

void vkGetDeviceAccelerationStructureCompatibilityKHR (
    VkDevice device,
    const(VkAccelerationStructureVersionInfoKHR)* pVersionInfo,
    VkAccelerationStructureCompatibilityKHR* pCompatibility);

void vkGetAccelerationStructureBuildSizesKHR (
    VkDevice device,
    VkAccelerationStructureBuildTypeKHR buildType,
    const(VkAccelerationStructureBuildGeometryInfoKHR)* pBuildInfo,
    const(uint)* pMaxPrimitiveCounts,
    VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo);

enum VK_KHR_ray_tracing_pipeline = 1;
enum VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION = 1;
enum VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME = "VK_KHR_ray_tracing_pipeline";

enum VkShaderGroupShaderKHR
{
    VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0,
    VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1,
    VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2,
    VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3,
    VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR = 0x7FFFFFFF
}

struct VkRayTracingShaderGroupCreateInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkRayTracingShaderGroupTypeKHR type;
    uint generalShader;
    uint closestHitShader;
    uint anyHitShader;
    uint intersectionShader;
    const(void)* pShaderGroupCaptureReplayHandle;
}

struct VkRayTracingPipelineInterfaceCreateInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    uint maxPipelineRayPayloadSize;
    uint maxPipelineRayHitAttributeSize;
}

struct VkRayTracingPipelineCreateInfoKHR
{
    VkStructureType sType;
    const(void)* pNext;
    VkPipelineCreateFlags flags;
    uint stageCount;
    const(VkPipelineShaderStageCreateInfo)* pStages;
    uint groupCount;
    const(VkRayTracingShaderGroupCreateInfoKHR)* pGroups;
    uint maxPipelineRayRecursionDepth;
    const(VkPipelineLibraryCreateInfoKHR)* pLibraryInfo;
    const(VkRayTracingPipelineInterfaceCreateInfoKHR)* pLibraryInterface;
    const(VkPipelineDynamicStateCreateInfo)* pDynamicState;
    VkPipelineLayout layout;
    VkPipeline basePipelineHandle;
    int basePipelineIndex;
}

struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR
{
    VkStructureType sType;
    void* pNext;
    VkBool32 rayTracingPipeline;
    VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplay;
    VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplayMixed;
    VkBool32 rayTracingPipelineTraceRaysIndirect;
    VkBool32 rayTraversalPrimitiveCulling;
}

struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR
{
    VkStructureType sType;
    void* pNext;
    uint shaderGroupHandleSize;
    uint maxRayRecursionDepth;
    uint maxShaderGroupStride;
    uint shaderGroupBaseAlignment;
    uint shaderGroupHandleCaptureReplaySize;
    uint maxRayDispatchInvocationCount;
    uint shaderGroupHandleAlignment;
    uint maxRayHitAttributeSize;
}

struct VkStridedDeviceAddressRegionKHR
{
    VkDeviceAddress deviceAddress;
    VkDeviceSize stride;
    VkDeviceSize size;
}

struct VkTraceRaysIndirectCommandKHR
{
    uint width;
    uint height;
    uint depth;
}

alias PFN_vkCmdTraceRaysKHR = void function (VkCommandBuffer commandBuffer, const(VkStridedDeviceAddressRegionKHR)* pRaygenShaderBindingTable, const(VkStridedDeviceAddressRegionKHR)* pMissShaderBindingTable, const(VkStridedDeviceAddressRegionKHR)* pHitShaderBindingTable, const(VkStridedDeviceAddressRegionKHR)* pCallableShaderBindingTable, uint width, uint height, uint depth);
alias PFN_vkCreateRayTracingPipelinesKHR = VkResult function (VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint createInfoCount, const(VkRayTracingPipelineCreateInfoKHR)* pCreateInfos, const(VkAllocationCallbacks)* pAllocator, VkPipeline* pPipelines);
alias PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = VkResult function (VkDevice device, VkPipeline pipeline, uint firstGroup, uint groupCount, size_t dataSize, void* pData);
alias PFN_vkCmdTraceRaysIndirectKHR = void function (VkCommandBuffer commandBuffer, const(VkStridedDeviceAddressRegionKHR)* pRaygenShaderBindingTable, const(VkStridedDeviceAddressRegionKHR)* pMissShaderBindingTable, const(VkStridedDeviceAddressRegionKHR)* pHitShaderBindingTable, const(VkStridedDeviceAddressRegionKHR)* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress);
alias PFN_vkGetRayTracingShaderGroupStackSizeKHR = ulong function (VkDevice device, VkPipeline pipeline, uint group, VkShaderGroupShaderKHR groupShader);
alias PFN_vkCmdSetRayTracingPipelineStackSizeKHR = void function (VkCommandBuffer commandBuffer, uint pipelineStackSize);

void vkCmdTraceRaysKHR (
    VkCommandBuffer commandBuffer,
    const(VkStridedDeviceAddressRegionKHR)* pRaygenShaderBindingTable,
    const(VkStridedDeviceAddressRegionKHR)* pMissShaderBindingTable,
    const(VkStridedDeviceAddressRegionKHR)* pHitShaderBindingTable,
    const(VkStridedDeviceAddressRegionKHR)* pCallableShaderBindingTable,
    uint width,
    uint height,
    uint depth);

VkResult vkCreateRayTracingPipelinesKHR (
    VkDevice device,
    VkDeferredOperationKHR deferredOperation,
    VkPipelineCache pipelineCache,
    uint createInfoCount,
    const(VkRayTracingPipelineCreateInfoKHR)* pCreateInfos,
    const(VkAllocationCallbacks)* pAllocator,
    VkPipeline* pPipelines);

VkResult vkGetRayTracingCaptureReplayShaderGroupHandlesKHR (
    VkDevice device,
    VkPipeline pipeline,
    uint firstGroup,
    uint groupCount,
    size_t dataSize,
    void* pData);

void vkCmdTraceRaysIndirectKHR (
    VkCommandBuffer commandBuffer,
    const(VkStridedDeviceAddressRegionKHR)* pRaygenShaderBindingTable,
    const(VkStridedDeviceAddressRegionKHR)* pMissShaderBindingTable,
    const(VkStridedDeviceAddressRegionKHR)* pHitShaderBindingTable,
    const(VkStridedDeviceAddressRegionKHR)* pCallableShaderBindingTable,
    VkDeviceAddress indirectDeviceAddress);

VkDeviceSize vkGetRayTracingShaderGroupStackSizeKHR (
    VkDevice device,
    VkPipeline pipeline,
    uint group,
    VkShaderGroupShaderKHR groupShader);

void vkCmdSetRayTracingPipelineStackSizeKHR (
    VkCommandBuffer commandBuffer,
    uint pipelineStackSize);

enum VK_KHR_ray_query = 1;
enum VK_KHR_RAY_QUERY_SPEC_VERSION = 1;
enum VK_KHR_RAY_QUERY_EXTENSION_NAME = "VK_KHR_ray_query";

struct VkPhysicalDeviceRayQueryFeaturesKHR
{
    VkStructureType sType;
    void* pNext;
    VkBool32 rayQuery;
}
